{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1480132420041},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1480132420041},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1480132420041},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1480132420041},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1480132420041},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1480132420041},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1480132420041},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1480132420041},{"_id":"themes/next/_config.yml","hash":"e4ef93cbcc4e649877e8215952f429add4c728e3","modified":1480132420041},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1480132420041},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1480132420041},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1480132420045},{"_id":"source/_posts/Git使用过程.md","hash":"fa7f6a098aeefe3937ef958239b3ba6e7147f627","modified":1480132420041},{"_id":"source/_posts/Hexo-Github建博客教程.md","hash":"c68975afddd3db770a8944938f71ec735addf0a4","modified":1480132420041},{"_id":"source/_posts/Unix-Cheat-Sheet.md","hash":"877ea9d6cdf222beef81372c2b56a5f032aa3455","modified":1480132420041},{"_id":"source/_posts/Ubuntu安装及调试记录.md","hash":"03f46f14b29e10315569480763b90b05e1048757","modified":1480230235088},{"_id":"source/tags/index.md","hash":"e122fc0b7fb087a0da7859851f39f38398db594a","modified":1480132420041},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1480132420041},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1480132420041},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1480132420041},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1480132420041},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1480132420041},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1480132420041},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1480132420041},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1480132420041},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1480132420041},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1480132420041},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1480132420041},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1480132420041},{"_id":"themes/next/languages/zh-Hans.yml","hash":"439c16c744b1596f24d9e0b4e230c4d3c93b7d85","modified":1480132420041},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1480132420041},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1480132420041},{"_id":"themes/next/layout/_layout.swig","hash":"b4ef30f7da073bf2a9052186f76e0e080de1c794","modified":1480132420041},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1480132420045},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1480132420045},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1480132420045},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1480132420045},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1480132420045},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1480132420045},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1480132420045},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1480132420045},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1480132420069},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1480132420069},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1480132420069},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480132420049},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1480132420041},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1480132420041},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1480132420041},{"_id":"themes/next/layout/_macro/post.swig","hash":"abfc88f34f2c0ae52229c4ffa577b00ad7cecdc6","modified":1480132420041},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1480132420041},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3b261c758a7673d91c116367be1bb5223403f9e0","modified":1480132420041},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1480132420041},{"_id":"themes/next/layout/_partials/comments.swig","hash":"a5ffadb516522f85c052b290b94c0e4af3002644","modified":1480132420045},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1480132420045},{"_id":"themes/next/layout/_partials/footer.swig","hash":"168430bd87ca8212cf9773b5dd94f52b805ef210","modified":1480132420045},{"_id":"themes/next/layout/_partials/head.swig","hash":"740684ef2b6e56183529387882042612e904bc8d","modified":1480132420045},{"_id":"themes/next/layout/_partials/header.swig","hash":"d9b10a92fdccd57a0c0d6773831f9c1b0f1bb449","modified":1480132420045},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1480132420045},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1480132420045},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1480132420045},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1480132420045},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1480132420045},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1480132420045},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1480132420045},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1480132420045},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1480132420045},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1480132420045},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1480132420045},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1480132420049},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1480132420049},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480132420053},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1480132420053},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1480132420053},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1480132420053},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1480132420053},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1480132420053},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1480132420053},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1480132420053},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480132420053},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480132420053},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1480132420053},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1480132420053},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480132420053},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480132420045},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480132420045},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480132420049},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480132420049},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480132420049},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480132420049},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480132420049},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1480132420041},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1480132420041},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1480132420045},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1480132420045},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1480132420045},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1480132420045},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1480132420045},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1480132420045},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1480132420045},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1480132420045},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1480132420045},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1480132420045},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"9c8f4b2a29741d96adf0b8fef52ae7f4396f27f5","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1480132420045},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1480132420049},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1480132420049},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1480132420049},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1480132420049},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"d7826b48a20162835450495db534d353ac52e476","modified":1480132420049},{"_id":"themes/next/source/css/_variables/base.styl","hash":"af54b8b080b9db8261e552151cec8d8b45259259","modified":1480132420049},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1480132420053},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1480132420053},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1480132420053},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1480132420053},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1480132420053},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1480132420053},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1480132420053},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1480132420053},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1480132420053},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1480132420057},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1480132420057},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1480132420057},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1480132420057},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1480132420057},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1480132420057},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1480132420057},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1480132420057},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1480132420057},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1480132420065},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1480132420065},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1480132420065},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1480132420065},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1480132420069},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1480132420069},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1480132420069},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1480132420069},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1480132420069},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1480132420069},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1480132420069},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1480132420069},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1480132420065},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1480132420045},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1480132420049},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1480132420049},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1480132420049},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1480132420049},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1480132420049},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1480132420049},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1480132420049},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1480132420053},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480132420057},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1480132420057},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480132420057},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1480132420061},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1480132420061},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1480132420061},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1480132420069},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1480132420069},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1480132420061},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1480132420061},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1480132420065},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1480132420065},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1480132420069},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1480132420045},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e2066dd20747e3125c969ef8459d0015fa5233a2","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1480132420049},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4f1e9d96940aa3e42d58fb63a26d4fa260323b0d","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1480132420049},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1480132420049},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480132420057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480132420057},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1480132420065},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1480132420057},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1480132420065},{"_id":"source/favicon.ico","hash":"2635768a4986cd46c7b92ebf94bbc7bfa7e5225f","modified":1480231178200},{"_id":"public/tags/index.html","hash":"e7a55b507de3bc1a7a3851740be55bb3796689ff","modified":1480231265341},{"_id":"public/tags/Git/index.html","hash":"64c5cf326195a4c7ccbb41c1774b1fd9277125a3","modified":1480231265341},{"_id":"public/tags/Github/index.html","hash":"a07d4fa699988a84bf3a3b4918cc339fb4607316","modified":1480231265342},{"_id":"public/tags/hexo/index.html","hash":"27b55f21592a0cb32e4498ca69cb7fde82a09ebc","modified":1480231265342},{"_id":"public/tags/github-page/index.html","hash":"8e40e9318a0cfab0d25b1476251a68cbc78cf817","modified":1480231265342},{"_id":"public/tags/搭建博客/index.html","hash":"2aa3abf9ecf2a1877f85afd1637a2e7163af129b","modified":1480231265342},{"_id":"public/tags/linux常用命令/index.html","hash":"d1bf1e233bfc954ff92b247ee659dbf1428e435f","modified":1480231265342},{"_id":"public/tags/DOS命令/index.html","hash":"126e5525297dd0c657f30de05c73af888a7cc4d1","modified":1480231265342},{"_id":"public/tags/Ubuntu命令/index.html","hash":"9685979bd3f06a47a78d67d0bd4daf6622483b01","modified":1480231265342},{"_id":"public/tags/Cheat-Sheet/index.html","hash":"7f70a49cd03b9ff6c679a291015be408c824abaa","modified":1480231265342},{"_id":"public/tags/Ubuntu安装/index.html","hash":"6ad7921eba388c1a5c1260a6bc48d4987e6cffb1","modified":1480231265342},{"_id":"public/tags/Ubuntu快捷键/index.html","hash":"bba62fc7da7aad624c137cb7af098d10b1c6faf7","modified":1480231265342},{"_id":"public/tags/Shandowsocks配置/index.html","hash":"ae575adebb6a17dcfa60cb84a6a8c966d4078101","modified":1480231265343},{"_id":"public/archives/index.html","hash":"f98fe7a153e5349cc7255986a31b87356d9108c1","modified":1480231265343},{"_id":"public/archives/2016/index.html","hash":"f34cd2979ff498856a7bbe66129db69720f565c6","modified":1480231265343},{"_id":"public/archives/2016/11/index.html","hash":"6bbcaa630097ea3711e29ab289a57cdaf24d4952","modified":1480231265343},{"_id":"public/2016/11/26/Git使用过程/index.html","hash":"04f304df37584267736d276d7b3493f690ce68a7","modified":1480231265343},{"_id":"public/2016/11/26/Hexo-Github建博客教程/index.html","hash":"c54a54542618e2ceeebc10da749a697c23ba9d68","modified":1480231265343},{"_id":"public/2016/11/24/Unix-Cheat-Sheet/index.html","hash":"de3e1a66a6d14ab2511d31f82e5410bd275994cb","modified":1480231265343},{"_id":"public/2016/11/20/Ubuntu安装及调试记录/index.html","hash":"43e968338829e779db895968a35e409a12aa9f7d","modified":1480231265343},{"_id":"public/index.html","hash":"550a17f3fb87a4070892c04911d581a54e195327","modified":1480231265343},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1480231265360},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480231265360},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1480231265360},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1480231265360},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1480231265360},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1480231265361},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1480231265361},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1480231265361},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1480231265361},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480231265361},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480231265361},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1480231265361},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1480231265361},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480231265361},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1480231265361},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1480231265361},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480231265361},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480231265362},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480231265362},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480231265362},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480231265362},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480231265362},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1480231265362},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480231265362},{"_id":"public/favicon.ico","hash":"2635768a4986cd46c7b92ebf94bbc7bfa7e5225f","modified":1480231265362},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1480231266919},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1480231266977},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1480231266992},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1480231266992},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480231267020},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1480231267020},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480231267020},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480231267020},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480231267021},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480231267021},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480231267021},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1480231267024},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1480231267024},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1480231267024},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1480231267024},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1480231267024},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1480231267025},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1480231267025},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1480231267025},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480231267025},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480231267025},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1480231267025},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480231267025},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1480231267025},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480231267025},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480231267025},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480231267025},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480231267026},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480231267026},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480231267026},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480231267026},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480231267026},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480231267026},{"_id":"public/css/main.css","hash":"ea847e8c571b82eba6be484d10cf6ddc29acb652","modified":1480231267026},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480231267026},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480231267026},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480231267026},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480231267026},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480231267027},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480231267027},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1480231267027},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1480231267027},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480231267027},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1480231267027},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1480231267027},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1480231267087}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2016-11-21T13:32:56.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-21 21:32:56\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-11-26T03:53:40.041Z","path":"tags/index.html","layout":"page","_id":"civyon3ya0001umdf0n6bwodx","content":"","excerpt":"","more":""}],"Post":[{"title":"Git使用过程","_content":"本文其实只是自己的操作备忘啦啦啦..   \nGit是什么？Git是目前世界上最先进的分布式版本控制系统（没有之一）。   \nGit有什么特点？简单来说就是：高端大气上档次！  GIt只能跟踪文本文件的改动,图片/视频等多媒体就算了吧,还有MSword是二进制文件,也不可以的..\nbalabala...\n\n详细教程请[参考网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n## 安装git\n\n- linux安装\n\n\t```bash\n\tsudo apt install git\n\t```\n\n\t> 早期的版本都是安装git-core,因为git=GNU interactive Tools,后来由于git名气太大,就用git了.\n\n- windows安装\n\n\t在 Windows 上安装 Git 同样轻松，有个叫做 `msysGit`的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行:http://msysgit.github.com/\n\n\t> 说明:不要用记事本编辑任何文本文件,Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题.\n\n<!-- more -->\n\n## 配置git\n\n因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。\n\n配置文件目录  \nlinux在:`/etc/gitconfig` 和 `~/.gitconfig`  \nwins在:`C:\\Documents and Settings\\$USER`  \n可以在目录中直接编辑,也可以通过相应命令来配置.\n\n```bash\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"email@example.com\"\n```\n\n注意`git config`命令的`--global`参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n此外还可以设置默认文本编辑器/差异分析工具/配色等等\n\n```bash\ngit config --global core.editor emacs\ngit config --global merge.tool vimdiff\n```\n\n## 创建仓库(repository/版本库)\n\n首先我们需要知道三个概念：`工作区(Working Directory)`、`版本库(Repository)`、`暂存区(Stage or index)`.\n\n工作区-当你在开发一个项目时，主目录就是你的工作区。  \n\n版本库-工作区中有一个隐藏目录.git，这个就是git的版本库了。  \n\n暂存区-Git的版本库里存了很多文件，其中包括称为Stage或index的暂存区，还有一个git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD。如下图:  \n\n![](http://7u2o1q.com1.z0.glb.clouddn.com/git%E4%B8%89%E4%B8%AA%E5%8C%BA%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg)\n\n- 命令行进入已存在或新建的`目录`,(windows需要右键`Git bash here`)  \n\t`友情提示`:记得使用英文目录哦\n- 通过初始化将当前目录变成Git管理的仓库  \n\t使用`git init`命令;将目录变成可以管理的仓库，细心的读者可以发现当前目录下多了一个`.git`的目录，这个目录是Git来跟踪管理版本库的，没事就不要修改这个目录，免得Git仓库给破坏了。\n\n- 添加相应文件到缓存区,并提交到仓库.\n\t如:\n\n\t```bash\n\tgit add file1.txt\n\tgit add file2.txt file3.txt\n\tgit commit -m \"add 3 files.\"\n\t```\n\n\t> `git add -A` =>保存所有的修改.  \n\t> `git add .` =>保存新的添加和修改，但是不包括删除.  \n\t> `git add -u`=>保存修改和删除，但是不包括新建文件.\n\n## 时光机穿梭\n\n提交修改和提交新文件是一样的两步，第一步是`git add`,第二部是`git commit -m \"add distributed\"`  \n\n要随时掌握工作区的状态，使用`git status`命令。  \n\n如果`git status`告诉你有文件被修改过，用`git diff`可以查看修改内容。\n\n- 版本回退\n\n\t```bash\n\tgit log #可以查看每次提交改动的历史记录\n\tgit log --pretty=oneline #可以一行显示一条\n\tgit reset --hard HEAD^ #退回当前版本的上一个版本\n\tgit reset --hard HEAD^^ #退回当前版本的上两个版本\n\tgit reset --hard HEAD~100 #退回当前版本的上100个版本\n\tgit reset --hard 3628164...... #退回commit id为3628164开头的那个版本(可以不写完)\n\t```\n\n\tHEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`。  \n\t穿梭前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。  \n\t要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。  \n\n- 工作区和暂存区\n\n\t工作区+git版本库{暂存区+N个分支(分支+指向分支的指针HEAD)}\n\n\t为什么说Git管理的是修改，而不是文件呢？`文件`修改后提交,是不会在库里有修改记录的,必须把`修改`,`git add`后才能用`git status`查询.\n\n- 撤销修改\n\n\t场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。\n\n\t场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD file`，就回到了场景1，第二步按场景1操作。\n\n\t场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n- 删除文件\n\n\t确实要从版本库中删除该文件，那就用命令`git rm`删掉，并且`git commit`\n\n\t另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本  \n\t`git checkout -- test.txt`  \n\t`git checkout`其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。\n\n## 远程仓库\n\n为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n\n- 添加远程库\n\n\t要关联一个远程库，使用命令`git remote add origin 仓库地址`；\n\n\t关联后，使用命令`git push -u origin master`第一次推送master分支的所有内容；\n\n\t此后，每次本地提交后，只要有必要，就可以使用命令`git push origin master`推送最新修改；\n\n- 从远程库克隆\n\n\t要克隆一个仓库，首先必须知道仓库的地址，然后使用`git clone 仓库地址`命令克隆。  \n\tGit支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。\n\n## 分支管理\n\n### 创建与合并分支\n\nGit鼓励大量使用分支：\n查看分支：`git branch`\n创建分支：`git branch <name>`\n切换分支：`git checkout <name>`\n创建+切换分支：`git checkout -b <name>`\n合并某分支到当前分支：`git merge <name>`\n删除分支：`git branch -d <name>`\n\n### 解决冲突\n\n当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n用`git log --graph --pretty=oneline --abbrev-commit`命令可以看到分支合并图。\n\n### 分支管理策略\n\n在实际开发中，我们应该按照几个基本原则进行分支管理：\n\n首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；\n\n那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；\n\n你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。\n\n所以，团队合作的分支看起来就像这样：\n\n![](http://www.liaoxuefeng.com/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0)\n\n### Bug分支\n\n突然接到任务要修复代号101的bug,很自然,你想创建一个分支`issue-101`来修复,但是当前`dev`分支上的工作还没有提交,并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？\n\n```bash\ngit status #查看到在`dev`分支上的工作没有提交\ngit stash #把当前工作现场“储藏”起来\n\ngit checkout master #切换到master分支\ngit checkout -b issue-101 #创建并切换到`issue-101`分支\ngit add readme.txt  #修复bug后增加相应文件\ngit commit -m \"fix bug 101\" #提交\ngit checkout master #切换到master分支\ngit merge --no-ff -m \"merged bug fix 101\" issue-101 #将`issue-101`分支合并到master分支\ngit branch -d issue-101 #删除`issue-101`分支\n\n#太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！\ngit checkout dev\ngit status\n\n#工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：\ngit stash list #查看刚才的工作现场存到哪去了?\ngit stash pop #恢复工作现场继续工作\n```\n\n### Feature分支\n\n添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。\n\n现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。\n\n于是准备开发：\n\n```bash\ngit checkout -b feature-vulcan\n\n#5分钟后，开发完毕：\ngit add vulcan.py\ngit status\ngit commit -m \"add feature vulcan\"\ngit checkout dev #切换到`dev`分支,准备合并\ngit merge feature-vulcan #将`feature-vulcan`分支合并到 `dev`分支\n```\n\n\n### 多人协作\n\n查看远程库信息，使用`git remote`或`git remote -v`(更详细)；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n\n从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。\n\n## 标签管理\n\n请把上周一的那个版本打包发布，commit号是`6a5819e...`一串乱七八糟的数字不好找！请把上周一的那个版本打包发布，版本号是v1.2,“好的，按照tag v1.2查找commit就行！所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。\n\n- 创建标签\n\n\t```bash\n\tgit branch #查看所有分支\n\tgit checkout master #切换到需要打标签的分支上\n\tgit tag v1.0 #打一个新标签\n\tgit tag #查看所有标签\n\tgit tag v0.9 `<commit id>` #可以对历史某个commit打标签\n\t```\n\n\t命令`git tag <name>`用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n\t`git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；\n\t`git tag -s <tagname> -m \"blablabla...\"`可以用PGP签名标签；\n\t命令`git tag`可以查看所有标签。\n\n- 操作标签\n\n\t命令`git push origin <tagname>`可以推送一个本地标签；  \n\t命令`git push origin --tags`可以推送全部未推送过的本地标签；  \n\t命令`git tag -d <tagname>`可以删除一个本地标签；  \n\t命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签。  \n\n## 使用github\n\n在GitHub上，可以任意Fork开源仓库；  \n自己拥有Fork后的仓库的读写权限；  \n可以推送pull request给官方仓库来贡献代码。\n\n![](http://www.liaoxuefeng.com/files/attachments/001384926554932eb5e65df912341c1a48045bc274ba4bf000/0)\n\n## 自定义git\n\n- 忽略特殊文件\n\n\t有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次`git status`都会显示`Untracked files ...`，有强迫症的童鞋心里肯定不爽。\n\n\t好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的`.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。\n\n\t忽略某些文件时，需要编写.gitignore；  \n\t`.gitignore`文件本身要放到版本库里，并且可以对`.gitignore`做版本管理！\n\n- 设置别名\n\n\t给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。\n\n- 搭建Git服务器\n\n\t针对于自己公司非开源的项目.\n\n\t搭建Git服务器非常简单，通常10分钟即可完成；  \n","source":"_posts/Git使用过程.md","raw":"---\ntitle: Git使用过程\ntags:\n- Git\n- Github\n---\n本文其实只是自己的操作备忘啦啦啦..   \nGit是什么？Git是目前世界上最先进的分布式版本控制系统（没有之一）。   \nGit有什么特点？简单来说就是：高端大气上档次！  GIt只能跟踪文本文件的改动,图片/视频等多媒体就算了吧,还有MSword是二进制文件,也不可以的..\nbalabala...\n\n详细教程请[参考网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n## 安装git\n\n- linux安装\n\n\t```bash\n\tsudo apt install git\n\t```\n\n\t> 早期的版本都是安装git-core,因为git=GNU interactive Tools,后来由于git名气太大,就用git了.\n\n- windows安装\n\n\t在 Windows 上安装 Git 同样轻松，有个叫做 `msysGit`的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行:http://msysgit.github.com/\n\n\t> 说明:不要用记事本编辑任何文本文件,Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题.\n\n<!-- more -->\n\n## 配置git\n\n因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。\n\n配置文件目录  \nlinux在:`/etc/gitconfig` 和 `~/.gitconfig`  \nwins在:`C:\\Documents and Settings\\$USER`  \n可以在目录中直接编辑,也可以通过相应命令来配置.\n\n```bash\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"email@example.com\"\n```\n\n注意`git config`命令的`--global`参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n此外还可以设置默认文本编辑器/差异分析工具/配色等等\n\n```bash\ngit config --global core.editor emacs\ngit config --global merge.tool vimdiff\n```\n\n## 创建仓库(repository/版本库)\n\n首先我们需要知道三个概念：`工作区(Working Directory)`、`版本库(Repository)`、`暂存区(Stage or index)`.\n\n工作区-当你在开发一个项目时，主目录就是你的工作区。  \n\n版本库-工作区中有一个隐藏目录.git，这个就是git的版本库了。  \n\n暂存区-Git的版本库里存了很多文件，其中包括称为Stage或index的暂存区，还有一个git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD。如下图:  \n\n![](http://7u2o1q.com1.z0.glb.clouddn.com/git%E4%B8%89%E4%B8%AA%E5%8C%BA%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg)\n\n- 命令行进入已存在或新建的`目录`,(windows需要右键`Git bash here`)  \n\t`友情提示`:记得使用英文目录哦\n- 通过初始化将当前目录变成Git管理的仓库  \n\t使用`git init`命令;将目录变成可以管理的仓库，细心的读者可以发现当前目录下多了一个`.git`的目录，这个目录是Git来跟踪管理版本库的，没事就不要修改这个目录，免得Git仓库给破坏了。\n\n- 添加相应文件到缓存区,并提交到仓库.\n\t如:\n\n\t```bash\n\tgit add file1.txt\n\tgit add file2.txt file3.txt\n\tgit commit -m \"add 3 files.\"\n\t```\n\n\t> `git add -A` =>保存所有的修改.  \n\t> `git add .` =>保存新的添加和修改，但是不包括删除.  \n\t> `git add -u`=>保存修改和删除，但是不包括新建文件.\n\n## 时光机穿梭\n\n提交修改和提交新文件是一样的两步，第一步是`git add`,第二部是`git commit -m \"add distributed\"`  \n\n要随时掌握工作区的状态，使用`git status`命令。  \n\n如果`git status`告诉你有文件被修改过，用`git diff`可以查看修改内容。\n\n- 版本回退\n\n\t```bash\n\tgit log #可以查看每次提交改动的历史记录\n\tgit log --pretty=oneline #可以一行显示一条\n\tgit reset --hard HEAD^ #退回当前版本的上一个版本\n\tgit reset --hard HEAD^^ #退回当前版本的上两个版本\n\tgit reset --hard HEAD~100 #退回当前版本的上100个版本\n\tgit reset --hard 3628164...... #退回commit id为3628164开头的那个版本(可以不写完)\n\t```\n\n\tHEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`。  \n\t穿梭前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。  \n\t要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。  \n\n- 工作区和暂存区\n\n\t工作区+git版本库{暂存区+N个分支(分支+指向分支的指针HEAD)}\n\n\t为什么说Git管理的是修改，而不是文件呢？`文件`修改后提交,是不会在库里有修改记录的,必须把`修改`,`git add`后才能用`git status`查询.\n\n- 撤销修改\n\n\t场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。\n\n\t场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD file`，就回到了场景1，第二步按场景1操作。\n\n\t场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n- 删除文件\n\n\t确实要从版本库中删除该文件，那就用命令`git rm`删掉，并且`git commit`\n\n\t另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本  \n\t`git checkout -- test.txt`  \n\t`git checkout`其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。\n\n## 远程仓库\n\n为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n\n- 添加远程库\n\n\t要关联一个远程库，使用命令`git remote add origin 仓库地址`；\n\n\t关联后，使用命令`git push -u origin master`第一次推送master分支的所有内容；\n\n\t此后，每次本地提交后，只要有必要，就可以使用命令`git push origin master`推送最新修改；\n\n- 从远程库克隆\n\n\t要克隆一个仓库，首先必须知道仓库的地址，然后使用`git clone 仓库地址`命令克隆。  \n\tGit支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。\n\n## 分支管理\n\n### 创建与合并分支\n\nGit鼓励大量使用分支：\n查看分支：`git branch`\n创建分支：`git branch <name>`\n切换分支：`git checkout <name>`\n创建+切换分支：`git checkout -b <name>`\n合并某分支到当前分支：`git merge <name>`\n删除分支：`git branch -d <name>`\n\n### 解决冲突\n\n当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n用`git log --graph --pretty=oneline --abbrev-commit`命令可以看到分支合并图。\n\n### 分支管理策略\n\n在实际开发中，我们应该按照几个基本原则进行分支管理：\n\n首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；\n\n那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；\n\n你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。\n\n所以，团队合作的分支看起来就像这样：\n\n![](http://www.liaoxuefeng.com/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0)\n\n### Bug分支\n\n突然接到任务要修复代号101的bug,很自然,你想创建一个分支`issue-101`来修复,但是当前`dev`分支上的工作还没有提交,并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？\n\n```bash\ngit status #查看到在`dev`分支上的工作没有提交\ngit stash #把当前工作现场“储藏”起来\n\ngit checkout master #切换到master分支\ngit checkout -b issue-101 #创建并切换到`issue-101`分支\ngit add readme.txt  #修复bug后增加相应文件\ngit commit -m \"fix bug 101\" #提交\ngit checkout master #切换到master分支\ngit merge --no-ff -m \"merged bug fix 101\" issue-101 #将`issue-101`分支合并到master分支\ngit branch -d issue-101 #删除`issue-101`分支\n\n#太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！\ngit checkout dev\ngit status\n\n#工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：\ngit stash list #查看刚才的工作现场存到哪去了?\ngit stash pop #恢复工作现场继续工作\n```\n\n### Feature分支\n\n添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。\n\n现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。\n\n于是准备开发：\n\n```bash\ngit checkout -b feature-vulcan\n\n#5分钟后，开发完毕：\ngit add vulcan.py\ngit status\ngit commit -m \"add feature vulcan\"\ngit checkout dev #切换到`dev`分支,准备合并\ngit merge feature-vulcan #将`feature-vulcan`分支合并到 `dev`分支\n```\n\n\n### 多人协作\n\n查看远程库信息，使用`git remote`或`git remote -v`(更详细)；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n\n从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。\n\n## 标签管理\n\n请把上周一的那个版本打包发布，commit号是`6a5819e...`一串乱七八糟的数字不好找！请把上周一的那个版本打包发布，版本号是v1.2,“好的，按照tag v1.2查找commit就行！所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。\n\n- 创建标签\n\n\t```bash\n\tgit branch #查看所有分支\n\tgit checkout master #切换到需要打标签的分支上\n\tgit tag v1.0 #打一个新标签\n\tgit tag #查看所有标签\n\tgit tag v0.9 `<commit id>` #可以对历史某个commit打标签\n\t```\n\n\t命令`git tag <name>`用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n\t`git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；\n\t`git tag -s <tagname> -m \"blablabla...\"`可以用PGP签名标签；\n\t命令`git tag`可以查看所有标签。\n\n- 操作标签\n\n\t命令`git push origin <tagname>`可以推送一个本地标签；  \n\t命令`git push origin --tags`可以推送全部未推送过的本地标签；  \n\t命令`git tag -d <tagname>`可以删除一个本地标签；  \n\t命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签。  \n\n## 使用github\n\n在GitHub上，可以任意Fork开源仓库；  \n自己拥有Fork后的仓库的读写权限；  \n可以推送pull request给官方仓库来贡献代码。\n\n![](http://www.liaoxuefeng.com/files/attachments/001384926554932eb5e65df912341c1a48045bc274ba4bf000/0)\n\n## 自定义git\n\n- 忽略特殊文件\n\n\t有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次`git status`都会显示`Untracked files ...`，有强迫症的童鞋心里肯定不爽。\n\n\t好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的`.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。\n\n\t忽略某些文件时，需要编写.gitignore；  \n\t`.gitignore`文件本身要放到版本库里，并且可以对`.gitignore`做版本管理！\n\n- 设置别名\n\n\t给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。\n\n- 搭建Git服务器\n\n\t针对于自己公司非开源的项目.\n\n\t搭建Git服务器非常简单，通常10分钟即可完成；  \n","slug":"Git使用过程","published":1,"date":"2016-11-26T03:53:40.041Z","updated":"2016-11-26T03:53:40.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civyon3y20000umdfjt050r0z","content":"<p>本文其实只是自己的操作备忘啦啦啦..<br>Git是什么？Git是目前世界上最先进的分布式版本控制系统（没有之一）。<br>Git有什么特点？简单来说就是：高端大气上档次！  GIt只能跟踪文本文件的改动,图片/视频等多媒体就算了吧,还有MSword是二进制文件,也不可以的..<br>balabala…</p>\n<p>详细教程请<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">参考网站</a></p>\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><ul>\n<li><p>linux安装</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install git</div></pre></td></tr></table></figure>\n<blockquote>\n<p>早期的版本都是安装git-core,因为git=GNU interactive Tools,后来由于git名气太大,就用git了.</p>\n</blockquote>\n</li>\n<li><p>windows安装</p>\n<p>  在 Windows 上安装 Git 同样轻松，有个叫做 <code>msysGit</code>的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行:<a href=\"http://msysgit.github.com/\" target=\"_blank\" rel=\"external\">http://msysgit.github.com/</a></p>\n<blockquote>\n<p>说明:不要用记事本编辑任何文本文件,Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题.</p>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h2><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p>\n<p>配置文件目录<br>linux在:<code>/etc/gitconfig</code> 和 <code>~/.gitconfig</code><br>wins在:<code>C:\\Documents and Settings\\$USER</code><br>可以在目录中直接编辑,也可以通过相应命令来配置.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name <span class=\"string\">\"Your Name\"</span></div><div class=\"line\">git config --global user.email <span class=\"string\">\"email@example.com\"</span></div></pre></td></tr></table></figure>\n<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n<p>此外还可以设置默认文本编辑器/差异分析工具/配色等等</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.editor emacs</div><div class=\"line\">git config --global merge.tool vimdiff</div></pre></td></tr></table></figure>\n<h2 id=\"创建仓库-repository-版本库\"><a href=\"#创建仓库-repository-版本库\" class=\"headerlink\" title=\"创建仓库(repository/版本库)\"></a>创建仓库(repository/版本库)</h2><p>首先我们需要知道三个概念：<code>工作区(Working Directory)</code>、<code>版本库(Repository)</code>、<code>暂存区(Stage or index)</code>.</p>\n<p>工作区-当你在开发一个项目时，主目录就是你的工作区。  </p>\n<p>版本库-工作区中有一个隐藏目录.git，这个就是git的版本库了。  </p>\n<p>暂存区-Git的版本库里存了很多文件，其中包括称为Stage或index的暂存区，还有一个git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD。如下图:  </p>\n<p><img src=\"http://7u2o1q.com1.z0.glb.clouddn.com/git%E4%B8%89%E4%B8%AA%E5%8C%BA%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg\" alt=\"\"></p>\n<ul>\n<li>命令行进入已存在或新建的<code>目录</code>,(windows需要右键<code>Git bash here</code>)<br>  <code>友情提示</code>:记得使用英文目录哦</li>\n<li><p>通过初始化将当前目录变成Git管理的仓库<br>  使用<code>git init</code>命令;将目录变成可以管理的仓库，细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事就不要修改这个目录，免得Git仓库给破坏了。</p>\n</li>\n<li><p>添加相应文件到缓存区,并提交到仓库.<br>  如:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add file1.txt</div><div class=\"line\">git add file2.txt file3.txt</div><div class=\"line\">git commit -m <span class=\"string\">\"add 3 files.\"</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>git add -A</code> =&gt;保存所有的修改.<br><code>git add .</code> =&gt;保存新的添加和修改，但是不包括删除.<br><code>git add -u</code>=&gt;保存修改和删除，但是不包括新建文件.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"时光机穿梭\"><a href=\"#时光机穿梭\" class=\"headerlink\" title=\"时光机穿梭\"></a>时光机穿梭</h2><p>提交修改和提交新文件是一样的两步，第一步是<code>git add</code>,第二部是<code>git commit -m &quot;add distributed&quot;</code>  </p>\n<p>要随时掌握工作区的状态，使用<code>git status</code>命令。  </p>\n<p>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p>\n<ul>\n<li><p>版本回退</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span> <span class=\"comment\">#可以查看每次提交改动的历史记录</span></div><div class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"comment\">#可以一行显示一条</span></div><div class=\"line\">git reset --hard HEAD^ <span class=\"comment\">#退回当前版本的上一个版本</span></div><div class=\"line\">git reset --hard HEAD^^ <span class=\"comment\">#退回当前版本的上两个版本</span></div><div class=\"line\">git reset --hard HEAD~100 <span class=\"comment\">#退回当前版本的上100个版本</span></div><div class=\"line\">git reset --hard 3628164...... <span class=\"comment\">#退回commit id为3628164开头的那个版本(可以不写完)</span></div></pre></td></tr></table></figure>\n<p>  HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。<br>  穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。<br>  要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。  </p>\n</li>\n<li><p>工作区和暂存区</p>\n<p>  工作区+git版本库{暂存区+N个分支(分支+指向分支的指针HEAD)}</p>\n<p>  为什么说Git管理的是修改，而不是文件呢？<code>文件</code>修改后提交,是不会在库里有修改记录的,必须把<code>修改</code>,<code>git add</code>后才能用<code>git status</code>查询.</p>\n</li>\n<li><p>撤销修改</p>\n<p>  场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>\n<p>  场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p>\n<p>  场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n</li>\n<li><p>删除文件</p>\n<p>  确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code></p>\n<p>  另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本<br>  <code>git checkout -- test.txt</code><br>  <code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>\n</li>\n</ul>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>\n<ul>\n<li><p>添加远程库</p>\n<p>  要关联一个远程库，使用命令<code>git remote add origin 仓库地址</code>；</p>\n<p>  关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>\n<p>  此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>\n</li>\n<li><p>从远程库克隆</p>\n<p>  要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone 仓库地址</code>命令克隆。<br>  Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>\n</li>\n</ul>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h3 id=\"创建与合并分支\"><a href=\"#创建与合并分支\" class=\"headerlink\" title=\"创建与合并分支\"></a>创建与合并分支</h3><p>Git鼓励大量使用分支：<br>查看分支：<code>git branch</code><br>创建分支：<code>git branch &lt;name&gt;</code><br>切换分支：<code>git checkout &lt;name&gt;</code><br>创建+切换分支：<code>git checkout -b &lt;name&gt;</code><br>合并某分支到当前分支：<code>git merge &lt;name&gt;</code><br>删除分支：<code>git branch -d &lt;name&gt;</code></p>\n<h3 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>用<code>git log --graph --pretty=oneline --abbrev-commit</code>命令可以看到分支合并图。</p>\n<h3 id=\"分支管理策略\"><a href=\"#分支管理策略\" class=\"headerlink\" title=\"分支管理策略\"></a>分支管理策略</h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>\n<p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>\n<p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p>\n<p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p>\n<p>所以，团队合作的分支看起来就像这样：</p>\n<p><img src=\"http://www.liaoxuefeng.com/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0\" alt=\"\"></p>\n<h3 id=\"Bug分支\"><a href=\"#Bug分支\" class=\"headerlink\" title=\"Bug分支\"></a>Bug分支</h3><p>突然接到任务要修复代号101的bug,很自然,你想创建一个分支<code>issue-101</code>来修复,但是当前<code>dev</code>分支上的工作还没有提交,并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status <span class=\"comment\">#查看到在`dev`分支上的工作没有提交</span></div><div class=\"line\">git stash <span class=\"comment\">#把当前工作现场“储藏”起来</span></div><div class=\"line\"></div><div class=\"line\">git checkout master <span class=\"comment\">#切换到master分支</span></div><div class=\"line\">git checkout -b issue-101 <span class=\"comment\">#创建并切换到`issue-101`分支</span></div><div class=\"line\">git add readme.txt  <span class=\"comment\">#修复bug后增加相应文件</span></div><div class=\"line\">git commit -m <span class=\"string\">\"fix bug 101\"</span> <span class=\"comment\">#提交</span></div><div class=\"line\">git checkout master <span class=\"comment\">#切换到master分支</span></div><div class=\"line\">git merge --no-ff -m <span class=\"string\">\"merged bug fix 101\"</span> issue-101 <span class=\"comment\">#将`issue-101`分支合并到master分支</span></div><div class=\"line\">git branch <span class=\"_\">-d</span> issue-101 <span class=\"comment\">#删除`issue-101`分支</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！</span></div><div class=\"line\">git checkout dev</div><div class=\"line\">git status</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：</span></div><div class=\"line\">git stash list <span class=\"comment\">#查看刚才的工作现场存到哪去了?</span></div><div class=\"line\">git stash pop <span class=\"comment\">#恢复工作现场继续工作</span></div></pre></td></tr></table></figure>\n<h3 id=\"Feature分支\"><a href=\"#Feature分支\" class=\"headerlink\" title=\"Feature分支\"></a>Feature分支</h3><p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p>\n<p>现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。</p>\n<p>于是准备开发：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b feature-vulcan</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#5分钟后，开发完毕：</span></div><div class=\"line\">git add vulcan.py</div><div class=\"line\">git status</div><div class=\"line\">git commit -m <span class=\"string\">\"add feature vulcan\"</span></div><div class=\"line\">git checkout dev <span class=\"comment\">#切换到`dev`分支,准备合并</span></div><div class=\"line\">git merge feature-vulcan <span class=\"comment\">#将`feature-vulcan`分支合并到 `dev`分支</span></div></pre></td></tr></table></figure>\n<h3 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h3><p>查看远程库信息，使用<code>git remote</code>或<code>git remote -v</code>(更详细)；</p>\n<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>\n<p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p>\n<p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>\n<p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p>\n<p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>\n<h2 id=\"标签管理\"><a href=\"#标签管理\" class=\"headerlink\" title=\"标签管理\"></a>标签管理</h2><p>请把上周一的那个版本打包发布，commit号是<code>6a5819e...</code>一串乱七八糟的数字不好找！请把上周一的那个版本打包发布，版本号是v1.2,“好的，按照tag v1.2查找commit就行！所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p>\n<ul>\n<li><p>创建标签</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch <span class=\"comment\">#查看所有分支</span></div><div class=\"line\">git checkout master <span class=\"comment\">#切换到需要打标签的分支上</span></div><div class=\"line\">git tag v1.0 <span class=\"comment\">#打一个新标签</span></div><div class=\"line\">git tag <span class=\"comment\">#查看所有标签</span></div><div class=\"line\">git tag v0.9 `&lt;commit id&gt;` <span class=\"comment\">#可以对历史某个commit打标签</span></div></pre></td></tr></table></figure>\n<p>  命令<code>git tag &lt;name&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；<br>  <code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；<br>  <code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签；<br>  命令<code>git tag</code>可以查看所有标签。</p>\n</li>\n<li><p>操作标签</p>\n<p>  命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；<br>  命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；<br>  命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；<br>  命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。  </p>\n</li>\n</ul>\n<h2 id=\"使用github\"><a href=\"#使用github\" class=\"headerlink\" title=\"使用github\"></a>使用github</h2><p>在GitHub上，可以任意Fork开源仓库；<br>自己拥有Fork后的仓库的读写权限；<br>可以推送pull request给官方仓库来贡献代码。</p>\n<p><img src=\"http://www.liaoxuefeng.com/files/attachments/001384926554932eb5e65df912341c1a48045bc274ba4bf000/0\" alt=\"\"></p>\n<h2 id=\"自定义git\"><a href=\"#自定义git\" class=\"headerlink\" title=\"自定义git\"></a>自定义git</h2><ul>\n<li><p>忽略特殊文件</p>\n<p>  有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次<code>git status</code>都会显示<code>Untracked files ...</code>，有强迫症的童鞋心里肯定不爽。</p>\n<p>  好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的`.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p>\n<p>  忽略某些文件时，需要编写.gitignore；<br>  <code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</p>\n</li>\n<li><p>设置别名</p>\n<p>  给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。</p>\n</li>\n<li><p>搭建Git服务器</p>\n<p>  针对于自己公司非开源的项目.</p>\n<p>  搭建Git服务器非常简单，通常10分钟即可完成；  </p>\n</li>\n</ul>\n","excerpt":"<p>本文其实只是自己的操作备忘啦啦啦..<br>Git是什么？Git是目前世界上最先进的分布式版本控制系统（没有之一）。<br>Git有什么特点？简单来说就是：高端大气上档次！  GIt只能跟踪文本文件的改动,图片/视频等多媒体就算了吧,还有MSword是二进制文件,也不可以的..<br>balabala…</p>\n<p>详细教程请<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">参考网站</a></p>\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><ul>\n<li><p>linux安装</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install git</div></pre></td></tr></table></figure>\n<blockquote>\n<p>早期的版本都是安装git-core,因为git=GNU interactive Tools,后来由于git名气太大,就用git了.</p>\n</blockquote>\n</li>\n<li><p>windows安装</p>\n<p>  在 Windows 上安装 Git 同样轻松，有个叫做 <code>msysGit</code>的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行:<a href=\"http://msysgit.github.com/\">http://msysgit.github.com/</a></p>\n<blockquote>\n<p>说明:不要用记事本编辑任何文本文件,Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题.</p>\n</blockquote>\n</li>\n</ul>","more":"<h2 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h2><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p>\n<p>配置文件目录<br>linux在:<code>/etc/gitconfig</code> 和 <code>~/.gitconfig</code><br>wins在:<code>C:\\Documents and Settings\\$USER</code><br>可以在目录中直接编辑,也可以通过相应命令来配置.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name <span class=\"string\">\"Your Name\"</span></div><div class=\"line\">git config --global user.email <span class=\"string\">\"email@example.com\"</span></div></pre></td></tr></table></figure>\n<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n<p>此外还可以设置默认文本编辑器/差异分析工具/配色等等</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.editor emacs</div><div class=\"line\">git config --global merge.tool vimdiff</div></pre></td></tr></table></figure>\n<h2 id=\"创建仓库-repository-版本库\"><a href=\"#创建仓库-repository-版本库\" class=\"headerlink\" title=\"创建仓库(repository/版本库)\"></a>创建仓库(repository/版本库)</h2><p>首先我们需要知道三个概念：<code>工作区(Working Directory)</code>、<code>版本库(Repository)</code>、<code>暂存区(Stage or index)</code>.</p>\n<p>工作区-当你在开发一个项目时，主目录就是你的工作区。  </p>\n<p>版本库-工作区中有一个隐藏目录.git，这个就是git的版本库了。  </p>\n<p>暂存区-Git的版本库里存了很多文件，其中包括称为Stage或index的暂存区，还有一个git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD。如下图:  </p>\n<p><img src=\"http://7u2o1q.com1.z0.glb.clouddn.com/git%E4%B8%89%E4%B8%AA%E5%8C%BA%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg\" alt=\"\"></p>\n<ul>\n<li>命令行进入已存在或新建的<code>目录</code>,(windows需要右键<code>Git bash here</code>)<br>  <code>友情提示</code>:记得使用英文目录哦</li>\n<li><p>通过初始化将当前目录变成Git管理的仓库<br>  使用<code>git init</code>命令;将目录变成可以管理的仓库，细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事就不要修改这个目录，免得Git仓库给破坏了。</p>\n</li>\n<li><p>添加相应文件到缓存区,并提交到仓库.<br>  如:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add file1.txt</div><div class=\"line\">git add file2.txt file3.txt</div><div class=\"line\">git commit -m <span class=\"string\">\"add 3 files.\"</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>git add -A</code> =&gt;保存所有的修改.<br><code>git add .</code> =&gt;保存新的添加和修改，但是不包括删除.<br><code>git add -u</code>=&gt;保存修改和删除，但是不包括新建文件.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"时光机穿梭\"><a href=\"#时光机穿梭\" class=\"headerlink\" title=\"时光机穿梭\"></a>时光机穿梭</h2><p>提交修改和提交新文件是一样的两步，第一步是<code>git add</code>,第二部是<code>git commit -m &quot;add distributed&quot;</code>  </p>\n<p>要随时掌握工作区的状态，使用<code>git status</code>命令。  </p>\n<p>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p>\n<ul>\n<li><p>版本回退</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span> <span class=\"comment\">#可以查看每次提交改动的历史记录</span></div><div class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"comment\">#可以一行显示一条</span></div><div class=\"line\">git reset --hard HEAD^ <span class=\"comment\">#退回当前版本的上一个版本</span></div><div class=\"line\">git reset --hard HEAD^^ <span class=\"comment\">#退回当前版本的上两个版本</span></div><div class=\"line\">git reset --hard HEAD~100 <span class=\"comment\">#退回当前版本的上100个版本</span></div><div class=\"line\">git reset --hard 3628164...... <span class=\"comment\">#退回commit id为3628164开头的那个版本(可以不写完)</span></div></pre></td></tr></table></figure>\n<p>  HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。<br>  穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。<br>  要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。  </p>\n</li>\n<li><p>工作区和暂存区</p>\n<p>  工作区+git版本库{暂存区+N个分支(分支+指向分支的指针HEAD)}</p>\n<p>  为什么说Git管理的是修改，而不是文件呢？<code>文件</code>修改后提交,是不会在库里有修改记录的,必须把<code>修改</code>,<code>git add</code>后才能用<code>git status</code>查询.</p>\n</li>\n<li><p>撤销修改</p>\n<p>  场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>\n<p>  场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p>\n<p>  场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n</li>\n<li><p>删除文件</p>\n<p>  确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code></p>\n<p>  另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本<br>  <code>git checkout -- test.txt</code><br>  <code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>\n</li>\n</ul>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>\n<ul>\n<li><p>添加远程库</p>\n<p>  要关联一个远程库，使用命令<code>git remote add origin 仓库地址</code>；</p>\n<p>  关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>\n<p>  此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>\n</li>\n<li><p>从远程库克隆</p>\n<p>  要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone 仓库地址</code>命令克隆。<br>  Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>\n</li>\n</ul>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h3 id=\"创建与合并分支\"><a href=\"#创建与合并分支\" class=\"headerlink\" title=\"创建与合并分支\"></a>创建与合并分支</h3><p>Git鼓励大量使用分支：<br>查看分支：<code>git branch</code><br>创建分支：<code>git branch &lt;name&gt;</code><br>切换分支：<code>git checkout &lt;name&gt;</code><br>创建+切换分支：<code>git checkout -b &lt;name&gt;</code><br>合并某分支到当前分支：<code>git merge &lt;name&gt;</code><br>删除分支：<code>git branch -d &lt;name&gt;</code></p>\n<h3 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>用<code>git log --graph --pretty=oneline --abbrev-commit</code>命令可以看到分支合并图。</p>\n<h3 id=\"分支管理策略\"><a href=\"#分支管理策略\" class=\"headerlink\" title=\"分支管理策略\"></a>分支管理策略</h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>\n<p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>\n<p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p>\n<p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p>\n<p>所以，团队合作的分支看起来就像这样：</p>\n<p><img src=\"http://www.liaoxuefeng.com/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0\" alt=\"\"></p>\n<h3 id=\"Bug分支\"><a href=\"#Bug分支\" class=\"headerlink\" title=\"Bug分支\"></a>Bug分支</h3><p>突然接到任务要修复代号101的bug,很自然,你想创建一个分支<code>issue-101</code>来修复,但是当前<code>dev</code>分支上的工作还没有提交,并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status <span class=\"comment\">#查看到在`dev`分支上的工作没有提交</span></div><div class=\"line\">git stash <span class=\"comment\">#把当前工作现场“储藏”起来</span></div><div class=\"line\"></div><div class=\"line\">git checkout master <span class=\"comment\">#切换到master分支</span></div><div class=\"line\">git checkout -b issue-101 <span class=\"comment\">#创建并切换到`issue-101`分支</span></div><div class=\"line\">git add readme.txt  <span class=\"comment\">#修复bug后增加相应文件</span></div><div class=\"line\">git commit -m <span class=\"string\">\"fix bug 101\"</span> <span class=\"comment\">#提交</span></div><div class=\"line\">git checkout master <span class=\"comment\">#切换到master分支</span></div><div class=\"line\">git merge --no-ff -m <span class=\"string\">\"merged bug fix 101\"</span> issue-101 <span class=\"comment\">#将`issue-101`分支合并到master分支</span></div><div class=\"line\">git branch <span class=\"_\">-d</span> issue-101 <span class=\"comment\">#删除`issue-101`分支</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！</span></div><div class=\"line\">git checkout dev</div><div class=\"line\">git status</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：</span></div><div class=\"line\">git stash list <span class=\"comment\">#查看刚才的工作现场存到哪去了?</span></div><div class=\"line\">git stash pop <span class=\"comment\">#恢复工作现场继续工作</span></div></pre></td></tr></table></figure>\n<h3 id=\"Feature分支\"><a href=\"#Feature分支\" class=\"headerlink\" title=\"Feature分支\"></a>Feature分支</h3><p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p>\n<p>现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。</p>\n<p>于是准备开发：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b feature-vulcan</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#5分钟后，开发完毕：</span></div><div class=\"line\">git add vulcan.py</div><div class=\"line\">git status</div><div class=\"line\">git commit -m <span class=\"string\">\"add feature vulcan\"</span></div><div class=\"line\">git checkout dev <span class=\"comment\">#切换到`dev`分支,准备合并</span></div><div class=\"line\">git merge feature-vulcan <span class=\"comment\">#将`feature-vulcan`分支合并到 `dev`分支</span></div></pre></td></tr></table></figure>\n<h3 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h3><p>查看远程库信息，使用<code>git remote</code>或<code>git remote -v</code>(更详细)；</p>\n<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>\n<p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p>\n<p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>\n<p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p>\n<p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>\n<h2 id=\"标签管理\"><a href=\"#标签管理\" class=\"headerlink\" title=\"标签管理\"></a>标签管理</h2><p>请把上周一的那个版本打包发布，commit号是<code>6a5819e...</code>一串乱七八糟的数字不好找！请把上周一的那个版本打包发布，版本号是v1.2,“好的，按照tag v1.2查找commit就行！所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p>\n<ul>\n<li><p>创建标签</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch <span class=\"comment\">#查看所有分支</span></div><div class=\"line\">git checkout master <span class=\"comment\">#切换到需要打标签的分支上</span></div><div class=\"line\">git tag v1.0 <span class=\"comment\">#打一个新标签</span></div><div class=\"line\">git tag <span class=\"comment\">#查看所有标签</span></div><div class=\"line\">git tag v0.9 `&lt;commit id&gt;` <span class=\"comment\">#可以对历史某个commit打标签</span></div></pre></td></tr></table></figure>\n<p>  命令<code>git tag &lt;name&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；<br>  <code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；<br>  <code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签；<br>  命令<code>git tag</code>可以查看所有标签。</p>\n</li>\n<li><p>操作标签</p>\n<p>  命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；<br>  命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；<br>  命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；<br>  命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。  </p>\n</li>\n</ul>\n<h2 id=\"使用github\"><a href=\"#使用github\" class=\"headerlink\" title=\"使用github\"></a>使用github</h2><p>在GitHub上，可以任意Fork开源仓库；<br>自己拥有Fork后的仓库的读写权限；<br>可以推送pull request给官方仓库来贡献代码。</p>\n<p><img src=\"http://www.liaoxuefeng.com/files/attachments/001384926554932eb5e65df912341c1a48045bc274ba4bf000/0\" alt=\"\"></p>\n<h2 id=\"自定义git\"><a href=\"#自定义git\" class=\"headerlink\" title=\"自定义git\"></a>自定义git</h2><ul>\n<li><p>忽略特殊文件</p>\n<p>  有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次<code>git status</code>都会显示<code>Untracked files ...</code>，有强迫症的童鞋心里肯定不爽。</p>\n<p>  好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的`.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p>\n<p>  忽略某些文件时，需要编写.gitignore；<br>  <code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</p>\n</li>\n<li><p>设置别名</p>\n<p>  给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。</p>\n</li>\n<li><p>搭建Git服务器</p>\n<p>  针对于自己公司非开源的项目.</p>\n<p>  搭建Git服务器非常简单，通常10分钟即可完成；  </p>\n</li>\n</ul>"},{"title":"Hexo-Github建博客教程","_content":"本人=一名小白,而且我对网站开发以及前端的知识几乎是零基础,所以在自己刚接触这个东西的时候,我像很多人一样,都是上网找教程,但是要知道,那都是程序员的教程.一路摸爬滚打,终于搞定了,这篇文章算是自己的操作记录,为以后的重新搭建留个备忘...\n\n参考官网:https://hexo.io/docs  \n参考网站1:http://jiji262.github.io  \n参考网站2:http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/\n\n## 安装Hexo\n\nHexo需要安装`Node.js`和`Git`.二者的安装可以到相应的官网下载安装即可.注意`apt-get`安装的`Node.js`不是最新版本. 具体参考[hexo官网](https://hexo.io/docs  ).  \n\n在任意目录下(如`E\\hexo`)文件夹中运行\n\n```bash\nnpm install hexo-cli -g \n```\n\n注:卸载hexo可尝试`npm uninstall hexo-cli`.\n\n## 初始化Hexo\n\n在相应目录下(如`E\\hexo`)文件夹中运行\n\n```bash\nhexo init blog #建立文件夹`blog`,并在其中初始化hexo\ncd blog #进入`blog`目录\nnpm install #npm安装package.json中的依赖包\nnpm install hexo-deployer-git --save #安装deploy插件,后续部署github需要.\n```\n\n<!--more-->\n\n初始化完成后,可以`hexo generate`,`hexo server`查看是否能正常访问本地博客`http://localhost:4000`.  \n安装成功后可以使用`hexo -v`查看本地配置环境\n\n## Hexo主题\n\n### 下载主题\n\n- 可以直接下载相关zip文件,解压缩到`.../hexo/themes`文件夹下\n\n- 可以在`blog`目录下运行`git clone https://github.com/iissnan/hexo-theme-next themes/next`将next主题下载到themes文件夹下(推荐,可以使用`git pull`更新主题).\n\n### 启用主题\n\n编辑配置文件`_config.xml`中的主题名为`themes`文件夹下对应的文件夹名.然后运行如下命令.\n\n```bash\nhexo clean #清理hexo缓存\nhexo s #重新启动本地web服务器\n```\n\n主题的其他设置见next主题[官网](http://theme-next.iissnan.com/).\n\n## 创建Github pages\n\n- 在线创建库并起名`yaro97.github.io`,在设置中通过` Launch automatic page generator`生成github page即可  \n**注意:**`name`要是唯一的话,生成的网址为`name.github.io`,若不唯一,网址为`yaro97.github.com/name.github.io`\n\n## 部署本地Hexo到Github pages\n\n- 注意部署前一定要安装插件`hexo-deployer-git`.前面已经安装\n\n- 修改`_config.xml`文件\n\n    ```bash\n    deploy:\n        type: git\n        repo: https://github.com/yaro97/yaro97.github.io.git\n        branch: master\n        name: yaro\n        email: wyzh97@gmail.com\n    # 具体设置可以参考hexo官网.\n    ```\n\n- 执行命令`hexo d`完成部署,过程中需要github账号/密码,账号为`yaro97`.\n\n## 自定义域名\n\n### 绑定主域名\n\n- 在新建的`repository`中新建文件`CNAME`,内容填写:\n    \n    ```bash\n    www.paotime.com\n    paotimecom\n    ```\n\n- 在阿里云中,添加域名解析,内容如下:\n\n    ```bash\n    记录类型:A; 主机记录:@; 记录值:192.30.252.153.\n    记录类型:A; 主机记录:www; 记录值:192.30.252.153.\n    ```\n\n### 绑定二级域名\n\n- 在新建的`repository`中新建文件`CNAME`,内容填写:\n\n    ```bash\n    blog.paotime.com\n    ```\n\n- 在阿里云中,添加域名解析,内容如下:\n\n    ```bash\n    记录类型:CNAME; 主机记录:blog 记录值:paotime.github.io. #注意这个点`.`\n    ```\n\n## 在两个台电脑同时更新\n\n### 对A电脑的操作如下\n\n1. 在github新建仓库名为blog\n2. 上传A电脑本地Hexo博客的源文件夹至github的blog仓库，流程如下：\n\n    - 删除根目录和主题目录下的.git文件夹\n    - 修改根目录下的.gitignore文件为：\n\n        ```bash\n        /.deploy_git\n        /public\n        ```\n\n    - 依次执行以下指令，同步源文件至github\n\n        ```bash\n        git init \n        git add .\n        # 若出现`warning: LF will be replaced by CRLF in`\n        # 执行:\n        # git config --global core.autocrlf  false\n        git commit -m \"first commit\"\n        git remote add origin git@github.com:yaro97/blog.git\n        git push -u origin master\n        # 此时可能会出错failed to push some refs to git  出现错误的主要原因是github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并\n        # git pull --rebase origin master\n        # 此时再执行语句 \n        # git push -u origin master\n        ```\n\n### 对B电脑的操作如下：\n\n1. 安装Git，并配置github账号下的B电脑的.ssh\n2. 安装Node.js\n3. 使用npm指令安装Hexo  \n\n    ```bash\n    npm install -g hexo-cli\n    ```\n\n4. 使用Git bash随便选择一个文件夹,执行git clone\n\n    ```bash\n    git clone git@github.com:yaro97/blog.git\n    ```\n\n至此，两个电脑的hexo环境一致，Hexo博客源文件一致.倘若还有C电脑,重复B电脑的操作即可.  \n这里需要说明的是:在blog\n\n## 关于日常的改动流程（A，B两台电脑均使用的情况下）\n\n1. 建议先检查更新git pull，将本地博客源文件更新至最新版本\n\n    ```bash\n    git pull\n    ```\n\n2. 然后可以新建或修改博客内容，进行预览等操作\n\n    ```bash\n    hexo new <新的博客名称>\n    hexo server\n    ```\n\n3. 新建博客后，先同步Hexo源文件，将修改后的源文件同步至github\n\n    ```bash\n    git add . #不添加被删除的文件,`git add -A`会添加所有修改.\n    git commit -m \"更新描述\"\n    git push origin master\n    ```\n\n4. 然后再执行Hexo的生成文件和部署指令\n\n    ```bash\n    hexo g -d #hexo generate && hexo deploy\n    ```","source":"_posts/Hexo-Github建博客教程.md","raw":"---\ntitle: Hexo-Github建博客教程\ntags:\n- hexo\n- github page\n- 搭建博客\n---\n本人=一名小白,而且我对网站开发以及前端的知识几乎是零基础,所以在自己刚接触这个东西的时候,我像很多人一样,都是上网找教程,但是要知道,那都是程序员的教程.一路摸爬滚打,终于搞定了,这篇文章算是自己的操作记录,为以后的重新搭建留个备忘...\n\n参考官网:https://hexo.io/docs  \n参考网站1:http://jiji262.github.io  \n参考网站2:http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/\n\n## 安装Hexo\n\nHexo需要安装`Node.js`和`Git`.二者的安装可以到相应的官网下载安装即可.注意`apt-get`安装的`Node.js`不是最新版本. 具体参考[hexo官网](https://hexo.io/docs  ).  \n\n在任意目录下(如`E\\hexo`)文件夹中运行\n\n```bash\nnpm install hexo-cli -g \n```\n\n注:卸载hexo可尝试`npm uninstall hexo-cli`.\n\n## 初始化Hexo\n\n在相应目录下(如`E\\hexo`)文件夹中运行\n\n```bash\nhexo init blog #建立文件夹`blog`,并在其中初始化hexo\ncd blog #进入`blog`目录\nnpm install #npm安装package.json中的依赖包\nnpm install hexo-deployer-git --save #安装deploy插件,后续部署github需要.\n```\n\n<!--more-->\n\n初始化完成后,可以`hexo generate`,`hexo server`查看是否能正常访问本地博客`http://localhost:4000`.  \n安装成功后可以使用`hexo -v`查看本地配置环境\n\n## Hexo主题\n\n### 下载主题\n\n- 可以直接下载相关zip文件,解压缩到`.../hexo/themes`文件夹下\n\n- 可以在`blog`目录下运行`git clone https://github.com/iissnan/hexo-theme-next themes/next`将next主题下载到themes文件夹下(推荐,可以使用`git pull`更新主题).\n\n### 启用主题\n\n编辑配置文件`_config.xml`中的主题名为`themes`文件夹下对应的文件夹名.然后运行如下命令.\n\n```bash\nhexo clean #清理hexo缓存\nhexo s #重新启动本地web服务器\n```\n\n主题的其他设置见next主题[官网](http://theme-next.iissnan.com/).\n\n## 创建Github pages\n\n- 在线创建库并起名`yaro97.github.io`,在设置中通过` Launch automatic page generator`生成github page即可  \n**注意:**`name`要是唯一的话,生成的网址为`name.github.io`,若不唯一,网址为`yaro97.github.com/name.github.io`\n\n## 部署本地Hexo到Github pages\n\n- 注意部署前一定要安装插件`hexo-deployer-git`.前面已经安装\n\n- 修改`_config.xml`文件\n\n    ```bash\n    deploy:\n        type: git\n        repo: https://github.com/yaro97/yaro97.github.io.git\n        branch: master\n        name: yaro\n        email: wyzh97@gmail.com\n    # 具体设置可以参考hexo官网.\n    ```\n\n- 执行命令`hexo d`完成部署,过程中需要github账号/密码,账号为`yaro97`.\n\n## 自定义域名\n\n### 绑定主域名\n\n- 在新建的`repository`中新建文件`CNAME`,内容填写:\n    \n    ```bash\n    www.paotime.com\n    paotimecom\n    ```\n\n- 在阿里云中,添加域名解析,内容如下:\n\n    ```bash\n    记录类型:A; 主机记录:@; 记录值:192.30.252.153.\n    记录类型:A; 主机记录:www; 记录值:192.30.252.153.\n    ```\n\n### 绑定二级域名\n\n- 在新建的`repository`中新建文件`CNAME`,内容填写:\n\n    ```bash\n    blog.paotime.com\n    ```\n\n- 在阿里云中,添加域名解析,内容如下:\n\n    ```bash\n    记录类型:CNAME; 主机记录:blog 记录值:paotime.github.io. #注意这个点`.`\n    ```\n\n## 在两个台电脑同时更新\n\n### 对A电脑的操作如下\n\n1. 在github新建仓库名为blog\n2. 上传A电脑本地Hexo博客的源文件夹至github的blog仓库，流程如下：\n\n    - 删除根目录和主题目录下的.git文件夹\n    - 修改根目录下的.gitignore文件为：\n\n        ```bash\n        /.deploy_git\n        /public\n        ```\n\n    - 依次执行以下指令，同步源文件至github\n\n        ```bash\n        git init \n        git add .\n        # 若出现`warning: LF will be replaced by CRLF in`\n        # 执行:\n        # git config --global core.autocrlf  false\n        git commit -m \"first commit\"\n        git remote add origin git@github.com:yaro97/blog.git\n        git push -u origin master\n        # 此时可能会出错failed to push some refs to git  出现错误的主要原因是github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并\n        # git pull --rebase origin master\n        # 此时再执行语句 \n        # git push -u origin master\n        ```\n\n### 对B电脑的操作如下：\n\n1. 安装Git，并配置github账号下的B电脑的.ssh\n2. 安装Node.js\n3. 使用npm指令安装Hexo  \n\n    ```bash\n    npm install -g hexo-cli\n    ```\n\n4. 使用Git bash随便选择一个文件夹,执行git clone\n\n    ```bash\n    git clone git@github.com:yaro97/blog.git\n    ```\n\n至此，两个电脑的hexo环境一致，Hexo博客源文件一致.倘若还有C电脑,重复B电脑的操作即可.  \n这里需要说明的是:在blog\n\n## 关于日常的改动流程（A，B两台电脑均使用的情况下）\n\n1. 建议先检查更新git pull，将本地博客源文件更新至最新版本\n\n    ```bash\n    git pull\n    ```\n\n2. 然后可以新建或修改博客内容，进行预览等操作\n\n    ```bash\n    hexo new <新的博客名称>\n    hexo server\n    ```\n\n3. 新建博客后，先同步Hexo源文件，将修改后的源文件同步至github\n\n    ```bash\n    git add . #不添加被删除的文件,`git add -A`会添加所有修改.\n    git commit -m \"更新描述\"\n    git push origin master\n    ```\n\n4. 然后再执行Hexo的生成文件和部署指令\n\n    ```bash\n    hexo g -d #hexo generate && hexo deploy\n    ```","slug":"Hexo-Github建博客教程","published":1,"date":"2016-11-26T03:53:40.041Z","updated":"2016-11-26T03:53:40.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civyon3yc0002umdfvsvjcx5d","content":"<p>本人=一名小白,而且我对网站开发以及前端的知识几乎是零基础,所以在自己刚接触这个东西的时候,我像很多人一样,都是上网找教程,但是要知道,那都是程序员的教程.一路摸爬滚打,终于搞定了,这篇文章算是自己的操作记录,为以后的重新搭建留个备忘…</p>\n<p>参考官网:<a href=\"https://hexo.io/docs\" target=\"_blank\" rel=\"external\">https://hexo.io/docs</a><br>参考网站1:<a href=\"http://jiji262.github.io\" target=\"_blank\" rel=\"external\">http://jiji262.github.io</a><br>参考网站2:<a href=\"http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/\" target=\"_blank\" rel=\"external\">http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/</a></p>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>Hexo需要安装<code>Node.js</code>和<code>Git</code>.二者的安装可以到相应的官网下载安装即可.注意<code>apt-get</code>安装的<code>Node.js</code>不是最新版本. 具体参考<a href=\"https://hexo.io/docs\" target=\"_blank\" rel=\"external\">hexo官网</a>.  </p>\n<p>在任意目录下(如<code>E\\hexo</code>)文件夹中运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>注:卸载hexo可尝试<code>npm uninstall hexo-cli</code>.</p>\n<h2 id=\"初始化Hexo\"><a href=\"#初始化Hexo\" class=\"headerlink\" title=\"初始化Hexo\"></a>初始化Hexo</h2><p>在相应目录下(如<code>E\\hexo</code>)文件夹中运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init blog <span class=\"comment\">#建立文件夹`blog`,并在其中初始化hexo</span></div><div class=\"line\"><span class=\"built_in\">cd</span> blog <span class=\"comment\">#进入`blog`目录</span></div><div class=\"line\">npm install <span class=\"comment\">#npm安装package.json中的依赖包</span></div><div class=\"line\">npm install hexo-deployer-git --save <span class=\"comment\">#安装deploy插件,后续部署github需要.</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>初始化完成后,可以<code>hexo generate</code>,<code>hexo server</code>查看是否能正常访问本地博客<code>http://localhost:4000</code>.<br>安装成功后可以使用<code>hexo -v</code>查看本地配置环境</p>\n<h2 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h2><h3 id=\"下载主题\"><a href=\"#下载主题\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h3><ul>\n<li><p>可以直接下载相关zip文件,解压缩到<code>.../hexo/themes</code>文件夹下</p>\n</li>\n<li><p>可以在<code>blog</code>目录下运行<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>将next主题下载到themes文件夹下(推荐,可以使用<code>git pull</code>更新主题).</p>\n</li>\n</ul>\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>编辑配置文件<code>_config.xml</code>中的主题名为<code>themes</code>文件夹下对应的文件夹名.然后运行如下命令.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean <span class=\"comment\">#清理hexo缓存</span></div><div class=\"line\">hexo s <span class=\"comment\">#重新启动本地web服务器</span></div></pre></td></tr></table></figure>\n<p>主题的其他设置见next主题<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">官网</a>.</p>\n<h2 id=\"创建Github-pages\"><a href=\"#创建Github-pages\" class=\"headerlink\" title=\"创建Github pages\"></a>创建Github pages</h2><ul>\n<li>在线创建库并起名<code>yaro97.github.io</code>,在设置中通过<code>Launch automatic page generator</code>生成github page即可<br><strong>注意:</strong><code>name</code>要是唯一的话,生成的网址为<code>name.github.io</code>,若不唯一,网址为<code>yaro97.github.com/name.github.io</code></li>\n</ul>\n<h2 id=\"部署本地Hexo到Github-pages\"><a href=\"#部署本地Hexo到Github-pages\" class=\"headerlink\" title=\"部署本地Hexo到Github pages\"></a>部署本地Hexo到Github pages</h2><ul>\n<li><p>注意部署前一定要安装插件<code>hexo-deployer-git</code>.前面已经安装</p>\n</li>\n<li><p>修改<code>_config.xml</code>文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">    <span class=\"built_in\">type</span>: git</div><div class=\"line\">    repo: https://github.com/yaro97/yaro97.github.io.git</div><div class=\"line\">    branch: master</div><div class=\"line\">    name: yaro</div><div class=\"line\">    email: wyzh97@gmail.com</div><div class=\"line\"><span class=\"comment\"># 具体设置可以参考hexo官网.</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>执行命令<code>hexo d</code>完成部署,过程中需要github账号/密码,账号为<code>yaro97</code>.</p>\n</li>\n</ul>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><h3 id=\"绑定主域名\"><a href=\"#绑定主域名\" class=\"headerlink\" title=\"绑定主域名\"></a>绑定主域名</h3><ul>\n<li><p>在新建的<code>repository</code>中新建文件<code>CNAME</code>,内容填写:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">www.paotime.com</div><div class=\"line\">paotimecom</div></pre></td></tr></table></figure>\n</li>\n<li><p>在阿里云中,添加域名解析,内容如下:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">记录类型:A; 主机记录:@; 记录值:192.30.252.153.</div><div class=\"line\">记录类型:A; 主机记录:www; 记录值:192.30.252.153.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"绑定二级域名\"><a href=\"#绑定二级域名\" class=\"headerlink\" title=\"绑定二级域名\"></a>绑定二级域名</h3><ul>\n<li><p>在新建的<code>repository</code>中新建文件<code>CNAME</code>,内容填写:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">blog.paotime.com</div></pre></td></tr></table></figure>\n</li>\n<li><p>在阿里云中,添加域名解析,内容如下:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">记录类型:CNAME; 主机记录:blog 记录值:paotime.github.io. <span class=\"comment\">#注意这个点`.`</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"在两个台电脑同时更新\"><a href=\"#在两个台电脑同时更新\" class=\"headerlink\" title=\"在两个台电脑同时更新\"></a>在两个台电脑同时更新</h2><h3 id=\"对A电脑的操作如下\"><a href=\"#对A电脑的操作如下\" class=\"headerlink\" title=\"对A电脑的操作如下\"></a>对A电脑的操作如下</h3><ol>\n<li>在github新建仓库名为blog</li>\n<li><p>上传A电脑本地Hexo博客的源文件夹至github的blog仓库，流程如下：</p>\n<ul>\n<li>删除根目录和主题目录下的.git文件夹</li>\n<li><p>修改根目录下的.gitignore文件为：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/.deploy_git</div><div class=\"line\">/public</div></pre></td></tr></table></figure>\n</li>\n<li><p>依次执行以下指令，同步源文件至github</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init </div><div class=\"line\">git add .</div><div class=\"line\"><span class=\"comment\"># 若出现`warning: LF will be replaced by CRLF in`</span></div><div class=\"line\"><span class=\"comment\"># 执行:</span></div><div class=\"line\"><span class=\"comment\"># git config --global core.autocrlf  false</span></div><div class=\"line\">git commit -m <span class=\"string\">\"first commit\"</span></div><div class=\"line\">git remote add origin git@github.com:yaro97/blog.git</div><div class=\"line\">git push -u origin master</div><div class=\"line\"><span class=\"comment\"># 此时可能会出错failed to push some refs to git  出现错误的主要原因是github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并</span></div><div class=\"line\"><span class=\"comment\"># git pull --rebase origin master</span></div><div class=\"line\"><span class=\"comment\"># 此时再执行语句 </span></div><div class=\"line\"><span class=\"comment\"># git push -u origin master</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"对B电脑的操作如下：\"><a href=\"#对B电脑的操作如下：\" class=\"headerlink\" title=\"对B电脑的操作如下：\"></a>对B电脑的操作如下：</h3><ol>\n<li>安装Git，并配置github账号下的B电脑的.ssh</li>\n<li>安装Node.js</li>\n<li><p>使用npm指令安装Hexo  </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用Git bash随便选择一个文件夹,执行git clone</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:yaro97/blog.git</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>至此，两个电脑的hexo环境一致，Hexo博客源文件一致.倘若还有C电脑,重复B电脑的操作即可.<br>这里需要说明的是:在blog</p>\n<h2 id=\"关于日常的改动流程（A，B两台电脑均使用的情况下）\"><a href=\"#关于日常的改动流程（A，B两台电脑均使用的情况下）\" class=\"headerlink\" title=\"关于日常的改动流程（A，B两台电脑均使用的情况下）\"></a>关于日常的改动流程（A，B两台电脑均使用的情况下）</h2><ol>\n<li><p>建议先检查更新git pull，将本地博客源文件更新至最新版本</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后可以新建或修改博客内容，进行预览等操作</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &lt;新的博客名称&gt;</div><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建博客后，先同步Hexo源文件，将修改后的源文件同步至github</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add . <span class=\"comment\">#不添加被删除的文件,`git add -A`会添加所有修改.</span></div><div class=\"line\">git commit -m <span class=\"string\">\"更新描述\"</span></div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后再执行Hexo的生成文件和部署指令</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g <span class=\"_\">-d</span> <span class=\"comment\">#hexo generate &amp;&amp; hexo deploy</span></div></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"<p>本人=一名小白,而且我对网站开发以及前端的知识几乎是零基础,所以在自己刚接触这个东西的时候,我像很多人一样,都是上网找教程,但是要知道,那都是程序员的教程.一路摸爬滚打,终于搞定了,这篇文章算是自己的操作记录,为以后的重新搭建留个备忘…</p>\n<p>参考官网:<a href=\"https://hexo.io/docs\">https://hexo.io/docs</a><br>参考网站1:<a href=\"http://jiji262.github.io\">http://jiji262.github.io</a><br>参考网站2:<a href=\"http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/\">http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/</a></p>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>Hexo需要安装<code>Node.js</code>和<code>Git</code>.二者的安装可以到相应的官网下载安装即可.注意<code>apt-get</code>安装的<code>Node.js</code>不是最新版本. 具体参考<a href=\"https://hexo.io/docs\">hexo官网</a>.  </p>\n<p>在任意目录下(如<code>E\\hexo</code>)文件夹中运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>注:卸载hexo可尝试<code>npm uninstall hexo-cli</code>.</p>\n<h2 id=\"初始化Hexo\"><a href=\"#初始化Hexo\" class=\"headerlink\" title=\"初始化Hexo\"></a>初始化Hexo</h2><p>在相应目录下(如<code>E\\hexo</code>)文件夹中运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init blog <span class=\"comment\">#建立文件夹`blog`,并在其中初始化hexo</span></div><div class=\"line\"><span class=\"built_in\">cd</span> blog <span class=\"comment\">#进入`blog`目录</span></div><div class=\"line\">npm install <span class=\"comment\">#npm安装package.json中的依赖包</span></div><div class=\"line\">npm install hexo-deployer-git --save <span class=\"comment\">#安装deploy插件,后续部署github需要.</span></div></pre></td></tr></table></figure>","more":"<p>初始化完成后,可以<code>hexo generate</code>,<code>hexo server</code>查看是否能正常访问本地博客<code>http://localhost:4000</code>.<br>安装成功后可以使用<code>hexo -v</code>查看本地配置环境</p>\n<h2 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h2><h3 id=\"下载主题\"><a href=\"#下载主题\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h3><ul>\n<li><p>可以直接下载相关zip文件,解压缩到<code>.../hexo/themes</code>文件夹下</p>\n</li>\n<li><p>可以在<code>blog</code>目录下运行<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>将next主题下载到themes文件夹下(推荐,可以使用<code>git pull</code>更新主题).</p>\n</li>\n</ul>\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>编辑配置文件<code>_config.xml</code>中的主题名为<code>themes</code>文件夹下对应的文件夹名.然后运行如下命令.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean <span class=\"comment\">#清理hexo缓存</span></div><div class=\"line\">hexo s <span class=\"comment\">#重新启动本地web服务器</span></div></pre></td></tr></table></figure>\n<p>主题的其他设置见next主题<a href=\"http://theme-next.iissnan.com/\">官网</a>.</p>\n<h2 id=\"创建Github-pages\"><a href=\"#创建Github-pages\" class=\"headerlink\" title=\"创建Github pages\"></a>创建Github pages</h2><ul>\n<li>在线创建库并起名<code>yaro97.github.io</code>,在设置中通过<code>Launch automatic page generator</code>生成github page即可<br><strong>注意:</strong><code>name</code>要是唯一的话,生成的网址为<code>name.github.io</code>,若不唯一,网址为<code>yaro97.github.com/name.github.io</code></li>\n</ul>\n<h2 id=\"部署本地Hexo到Github-pages\"><a href=\"#部署本地Hexo到Github-pages\" class=\"headerlink\" title=\"部署本地Hexo到Github pages\"></a>部署本地Hexo到Github pages</h2><ul>\n<li><p>注意部署前一定要安装插件<code>hexo-deployer-git</code>.前面已经安装</p>\n</li>\n<li><p>修改<code>_config.xml</code>文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">    <span class=\"built_in\">type</span>: git</div><div class=\"line\">    repo: https://github.com/yaro97/yaro97.github.io.git</div><div class=\"line\">    branch: master</div><div class=\"line\">    name: yaro</div><div class=\"line\">    email: wyzh97@gmail.com</div><div class=\"line\"><span class=\"comment\"># 具体设置可以参考hexo官网.</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>执行命令<code>hexo d</code>完成部署,过程中需要github账号/密码,账号为<code>yaro97</code>.</p>\n</li>\n</ul>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><h3 id=\"绑定主域名\"><a href=\"#绑定主域名\" class=\"headerlink\" title=\"绑定主域名\"></a>绑定主域名</h3><ul>\n<li><p>在新建的<code>repository</code>中新建文件<code>CNAME</code>,内容填写:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">www.paotime.com</div><div class=\"line\">paotimecom</div></pre></td></tr></table></figure>\n</li>\n<li><p>在阿里云中,添加域名解析,内容如下:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">记录类型:A; 主机记录:@; 记录值:192.30.252.153.</div><div class=\"line\">记录类型:A; 主机记录:www; 记录值:192.30.252.153.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"绑定二级域名\"><a href=\"#绑定二级域名\" class=\"headerlink\" title=\"绑定二级域名\"></a>绑定二级域名</h3><ul>\n<li><p>在新建的<code>repository</code>中新建文件<code>CNAME</code>,内容填写:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">blog.paotime.com</div></pre></td></tr></table></figure>\n</li>\n<li><p>在阿里云中,添加域名解析,内容如下:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">记录类型:CNAME; 主机记录:blog 记录值:paotime.github.io. <span class=\"comment\">#注意这个点`.`</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"在两个台电脑同时更新\"><a href=\"#在两个台电脑同时更新\" class=\"headerlink\" title=\"在两个台电脑同时更新\"></a>在两个台电脑同时更新</h2><h3 id=\"对A电脑的操作如下\"><a href=\"#对A电脑的操作如下\" class=\"headerlink\" title=\"对A电脑的操作如下\"></a>对A电脑的操作如下</h3><ol>\n<li>在github新建仓库名为blog</li>\n<li><p>上传A电脑本地Hexo博客的源文件夹至github的blog仓库，流程如下：</p>\n<ul>\n<li>删除根目录和主题目录下的.git文件夹</li>\n<li><p>修改根目录下的.gitignore文件为：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/.deploy_git</div><div class=\"line\">/public</div></pre></td></tr></table></figure>\n</li>\n<li><p>依次执行以下指令，同步源文件至github</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init </div><div class=\"line\">git add .</div><div class=\"line\"><span class=\"comment\"># 若出现`warning: LF will be replaced by CRLF in`</span></div><div class=\"line\"><span class=\"comment\"># 执行:</span></div><div class=\"line\"><span class=\"comment\"># git config --global core.autocrlf  false</span></div><div class=\"line\">git commit -m <span class=\"string\">\"first commit\"</span></div><div class=\"line\">git remote add origin git@github.com:yaro97/blog.git</div><div class=\"line\">git push -u origin master</div><div class=\"line\"><span class=\"comment\"># 此时可能会出错failed to push some refs to git  出现错误的主要原因是github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并</span></div><div class=\"line\"><span class=\"comment\"># git pull --rebase origin master</span></div><div class=\"line\"><span class=\"comment\"># 此时再执行语句 </span></div><div class=\"line\"><span class=\"comment\"># git push -u origin master</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"对B电脑的操作如下：\"><a href=\"#对B电脑的操作如下：\" class=\"headerlink\" title=\"对B电脑的操作如下：\"></a>对B电脑的操作如下：</h3><ol>\n<li>安装Git，并配置github账号下的B电脑的.ssh</li>\n<li>安装Node.js</li>\n<li><p>使用npm指令安装Hexo  </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用Git bash随便选择一个文件夹,执行git clone</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:yaro97/blog.git</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>至此，两个电脑的hexo环境一致，Hexo博客源文件一致.倘若还有C电脑,重复B电脑的操作即可.<br>这里需要说明的是:在blog</p>\n<h2 id=\"关于日常的改动流程（A，B两台电脑均使用的情况下）\"><a href=\"#关于日常的改动流程（A，B两台电脑均使用的情况下）\" class=\"headerlink\" title=\"关于日常的改动流程（A，B两台电脑均使用的情况下）\"></a>关于日常的改动流程（A，B两台电脑均使用的情况下）</h2><ol>\n<li><p>建议先检查更新git pull，将本地博客源文件更新至最新版本</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后可以新建或修改博客内容，进行预览等操作</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &lt;新的博客名称&gt;</div><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建博客后，先同步Hexo源文件，将修改后的源文件同步至github</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add . <span class=\"comment\">#不添加被删除的文件,`git add -A`会添加所有修改.</span></div><div class=\"line\">git commit -m <span class=\"string\">\"更新描述\"</span></div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后再执行Hexo的生成文件和部署指令</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g <span class=\"_\">-d</span> <span class=\"comment\">#hexo generate &amp;&amp; hexo deploy</span></div></pre></td></tr></table></figure></li>\n</ol>"},{"title":"Unix Cheat Sheet","date":"2016-11-24T04:03:05.000Z","_content":"People who use Windows without DOS, or a Macintosh, or PPP without a terminal, or an ISP's menu without the Unix prompt are at a disadvantage. Something is happening, and they don't know what it is. I like to know what's really going on, so I've been learning some Unix.\n\nThe Net is a Unix place. I'm no wizard, but I'm comfortable with basic commands and occasionally type \"rm\" at my DOS prompt instead of \"del\". This is my Unix cheat sheet, so I can remember. Uppercase and lowercase matter. These commands (mostly) work with my C-shell account on RAIN. Your account might be different, especially if your prompt ends with a \"$\" (Korn shell) rather than a \"%\", so be cautious. When I need help, I reach for the books UNIX in a Nutshell (O'Reilly) and Unix Unbound by Harley Hahn (Osborne/McGraw Hill, 1994).\n\n- Help on any Unix command. RTFM!\n\n```bash\nman {command}\t#Type man ls to read the manual for the ls command.\nman {command} > {filename}\t#Redirect help to a file to download.\nwhatis {command}\t#Give short description of command. (Not on RAIN?)\napropos {keyword}\t#Search for all Unix commands that match keyword, eg apropos file. (Not on RAIN?)\n```\n\n<!-- more -->\n\n- List a directory\n\n```bash\nls {path}\t#It's ok to combine attributes, eg ls -laF gets a long listing of all files with types.\nls {path_1} {path_2}\t#List both {path_1} and {path_2}.\nls -l {path}\t#Long listing, with date, size and permisions.\nls -a {path}\t#Show all files, including important .dot files that don't otherwise show.\nls -F {path}\t#Show type of each file. \"/\" = directory, \"*\" = executable.\nls -R {path}\t#Recursive listing, with all subdirs.\nls {path} > {filename}\t#Redirect directory to a file.\nls {path} | more\t#\t#Show listing one screen at a time.\ndir {path}\t#Useful alias for DOS people, or use with ncftp.\n```\n\n- Change to directory\n\n```bash\ncd {dirname}\t#There must be a space between.\ncd ~\t#Go back to home directory, useful if you're lost.\ncd ..\t#Go back one directory.\ncdup\t#Useful alias, like \"cd ..\", or use with ncftp.\n```\n\n- Make a new directory\n\n```bash\nmkdir {dirname}\n```\n\n- Remove a directory\n\n```bash\nrmdir {dirname}\t#Only works if {dirname} is empty.\nrm -r {dirname}\t#Remove all files and subdirs. Careful!\n```\n\n- Print working directory\n\n```bash\npwd\t#Show where you are as full path. Useful if you're lost or exploring.\n```\n\n- Copy a file or directory\n\n```bash\ncp {file1} {file2}\ncp -r {dir1} {dir2}\t#Recursive, copy directory and all subdirs.\ncat {newfile} >> {oldfile}\t#Append newfile to end of oldfile.\n```\n\n- Move (or rename) a file\n\n```bash\nmv {oldfile} {newfile}\t#Moving a file and renaming it are the same thing.\nmv {oldname} {newname}\n```\n\n- Delete a file\n\n```bash\nrm {filespec}\t#? and * wildcards work like DOS should. \"?\" is any character; \"*\" is any string of characters.\nls {filespec} >> rm {filespec}\t#Good strategy: first list a group to make sure it's what's you think...then delete it all at once.\n```\n\n- Download with zmodem\t#(Use sx with xmodem.)\n\n```bash\nsz [-a|b] {filename}\t#-a = ascii, -b = binary. Use binary for everything. (It's the default?)\nsz *.zip\t#Handy after downloading with FTP. Go talk to your spouse while it does it's stuff.\n```\n\n- Upload with zmodem\t#(Use rx with xmodem.)\n\n```bash\nrz [-a|b] (filename}\t#Give rz command in Unix, THEN start upload at home. Works fine with multiple files.\n```\n\n- View a text file\n\n```bash\nmore {filename}\t#View file one screen at a time.\nless {filename} \t#Like more, with extra features.\ncat {filename} \t#View file, but it scrolls.\ncat {filename} | more\t#View file one screen at a time.\npage {filename}\t#Very handy with ncftp.\npico {filename}\t#Use text editor and don't save.\n```\n\n- Edit a text file.\n\n```bash\npico {filename}\t#The same editor PINE uses, so you already know it. vi and emacs are also available.\n```\n\n- Create a text file.\n\n```bash\ncat > {filename}\t#Enter your text (multiple lines with enter are ok) and press control-d to save.\npico {filename}\t#Create some text and save it.\n```\n\n- Compare two files\n\n```bash\ndiff {file1} {file2}\t#Show the differences.\nsdiff {file1} {file2}\t#Show files side by side.\n```\n\n- Other text commands\n\n```bash\ngrep '{pattern}' {file}\t#Find regular expression in file.\nsort {file1} > {file2}\t#Sort file1 and save as file2.\nsort -o {file} {file}\t#Replace file with sorted version.\nspell {file}\t#Display misspelled words.\nwc {file}\t#Count words in file.\n```\n\n- Find files on system\n\n```bash\nfind {filespec}\t#Works with wildcards. Handy for snooping.\nfind {filespec} > {filename}\t#Redirect find list to file. Can be big!\n```\n\n- Make an Alias\n\n```bash\nalias {name} '{command}'\t#Put the command in 'single quotes'. More useful in your .cshrc file.\n```\n\n- Wildcards and Shortcuts\n\n```bash\n*\t#Match any string of characters, eg page* gets page1, page10, and page.txt.\n?\t#Match any single character, eg page? gets page1 and page2, but not page10.\n[...]\t#Match any characters in a range, eg page[1-3] gets page1, page2, and page3.\n~\t#Short for your home directory, eg cd ~ will take you home, and rm -r ~ will destroy it.\n.\t#The current directory.\n..\t#One directory up the tree, eg ls ...\n```\n\n- Pipes and Redirection\t#(You pipe a command to another command, and redirect it to a file.)\n\n```bash\n{command} > {file}\t#Redirect output to a file, eg ls > list.txt writes directory to file.\n{command} >> {file}\t#Append output to an existing file, eg cat update >> archive adds update to end of archive.\n{command} < {file}\t#Get input from a file, eg sort < file.txt\n{command} < {file1} > {file2}\t#Get input from file1, and write to file2, eg sort < old.txt > new.txt sorts old.txt and saves as new.txt.\n{command} | {command}\t#Pipe one command to another, eg ls | more gets directory and sends it to more to show it one page at a time.\n```\n\n- Permissions, important and tricky!\n\nUnix permissions concern who can read a file or directory, write to it, and execute it. Permissions are granted or withheld with a magic 3-digit number. The three digits correspond to the owner (you); the group (?); and the world (everyone else).\n\n- Think of each digit as a sum:\n\n```bash\nexecute permission\t= 1\nwrite permission\t= 2\nwrite and execute (1+2)\t= 3\nread permission\t= 4\nread and execute (4+1)\t= 5\nread and write (4+2)\t= 6\nread, write and execute (4+2+1)\t= 7\n```\n\n- Add the number value of the permissions you want to grant each group to make a three digit number, one digit each for the owner, the group, and the world. Here are some useful combinations. Try to figure them out!\n\n```bash\nchmod 600 {filespec}\t#You can read and write; the world can't. Good for files.\nchmod 700 {filespec}\t#You can read, write, and execute; the world can't. Good for scripts.\nchmod 644 {filespec}\t#You can read and write; the world can only read. Good for web pages.\nchmod 755 {filespec}\t#You can read, write, and execute; the world can read and execute. Good for programs you want to share, and your public_html directory.\n```\n\n- Permissions, another way\n\nYou can also change file permissions with letters:\n\n```bash\nu = user (yourself)\tg = group\ta = everyone\n\nr = read\tw = write\tx = execute\n```\n\n```bash\nchmod u+rw {filespec}\t#Give yourself read and write permission\nchmod u+x {filespec}\t#Give yourself execute permission.\nchmod a+rw {filespec}\t#Give read and write permission to everyone.\n```\n\n- Applications I use\n\n```bash\nfinger {userid}\t#Find out what someone's up to.\ngopher\t#Gopher.\nirc\t#IRC, but not available on RAIN.\nlynx\t#Text-based Web browser, fast and lean.\nncftp\t#Better FTP.\npico {filename}\t\t#Easy text editor, but limited. vi and emacs are available.\npine\t#Email.\ntelnet {host}\t#Start Telnet session to another host.\ntin\t#Usenet.\nuudecode {filename} \t#...\nuuencode {filename}\t#Do it on the server to reduce download size about 1/3.\nytalk {userid}\t#Chat with someone else online, eg ytalk mkummel. Please use w first so you don't interrupt a big download!\n```\n\n- System info\n\n```bash\ndate\t#Show date and time.\ndf\t#Check system disk capacity.\ndu\t#Check your disk usage and show bytes in each directory.\nmore /etc/motd\t#Read message of the day, \"motd\" is a useful alias..\nprintenv\t#Show all environmental variables (in C-shell% - use set in Korn shell$).\nquota -v\t#Check your total disk use.\nuptime\t#Find out system load.\nw\t#Who's online and what are they doing?\n```\n\n- Unix Directory Format\n\nLong listings (ls -l) have this format:\n\n![](http://images2015.cnblogs.com/blog/832918/201609/832918-20160920180157621-294414687.png)\n\n- How to Make an Alias\n\nAn alias lets you type something simple and do something complex. It's a shorthand for a command. If you want to type \"dir\" instead of \"ls -l\" then type alias dir 'ls -l'. The single quotes tell Unix that the enclosed text is one command.\n\nAliases are more useful if they're permanent so you don't have to think about them. You can do this by adding the alias to your .cshrc file so they're automatically loaded when you start. Type pico .cshrc and look for the alias section and add what you want. It will be effective when you start. Just remember that if you make an alias with the name of a Unix command, that command will become unavailable.\n\n- Here are a few aliases from my .cshrc file:\n\n```bash\n# enter your aliases here in the form:\n# alias     this    means this\nalias       h       history\nalias       m       more\nalias\tq\tquota -v\nalias       bye     exit\nalias \tls \tls -F\nalias       dir     ls\nalias \tcdup\tcd ..\nalias\tmotd\tmore /etc/motd\n```\n\n- How to Make a Script\n\nA Unix script is a text file of commands that can be executed, like a .bat file in DOS. Unix contains a powerful programming language with loops and variables that I don't really understand. Here's a useful example.\n\nUnix can't rename a bunch of files at once the way DOS can. This is a problem if you develop Web pages on a DOS machine and then upload them to your Unix Server. You might have a bunch of .htm files that you want to rename as .html files, but Unix makes you do it one by one. This is actually not a defect. (It's a feature!) Unix is just being more consistent than DOS. So make a script!\n\nMake a text file (eg with pico) with the following lines. The first line is special. It tells Unix what program or shell should execute the script. Other # lines are comments.\n\n```bash\n#! /bin/csh\n# htm2html converts *.htm files to *.html\nforeach f ( *.htm )\nset base=`basename $f .htm`\nmv $f $base.html\nend\n```\n\nSave this in your home directory as htm2html (or whatever). Then make it user-executable by typing chmod 700 htm2html. After this a * will appear by the file name when you ls -F, to show that it's executable. Change to a directory with .htm files and type ~/htm2html, and it will do its stuff.\n\nThink about scripts whenever you find yourself doing the same tedious thing over and over.\n\n\n- Dotfiles (aka Hidden Files)\n\nDotfile names begin with a \".\" These files and directories don't show up when you list a directory unless you use the -a option, so they are also called hidden files. Type ls -la in your home directory to see what you have.\n\nSome of these dotfiles are crucial. They initialize your shell and the programs you use, like autoexec.bat in DOS and .ini files in Windows. rc means \"run commands\". These are all text files that can be edited, but change them at your peril. Make backups first!\n\nHere's some of what I get when I type ls -laF:\n\n```bash\n.addressbook\t#my email addressbook.\n.cshrc\t\t#my C-shell startup info, important!\n.gopherrc\t#my gopher setup.\n.history\t\t#list of past commands.\n.login\t\t#login init, important!\n.lynxrc\t\t#my lynx setup for WWW.\n.ncftp/\t\t#hidden dir of ncftp stuff.\n.newsrc\t#my list of subscribed newsgroups.\n.pinerc\t\t#my pine setup for email.\n.plan\t\t#text appears when I'm fingered, ok to edit.\n.profile\t\t#Korn shell startup info, important!\n.project  \t#text appears when I'm fingered, ok to edit.\n.signature\t#my signature file for mail and news, ok to edit.\n.tin/\t\t#hidden dir of my tin stuff for usenet.\n.ytalkrc\t\t#my ytalk setup.\n```\n\n- DOS and UNIX commands\n\n```bash\nAction\tDOS\tUNIX\nchange directory\tcd\tcd\nchange file protection\tattrib\tchmod\ncompare files\tcomp\tdiff\ncopy file\tcopy\tcp\ndelete file\tdel\trm\ndelete directory\trd\trmdir\ndirectory list\tdir\tls\nedit a file\tedit\tpico\nenvironment\tset\tprintenv\nfind string in file\tfind\tgrep\nhelp\thelp\tman\nmake directory\tmd\tmkdir\nmove file\tmove\tmv\nrename file\tren\tmv\nshow date and time\tdate, time\tdate\nshow disk space\tchkdsk\tdf\nshow file\ttype\tcat\nshow file by screens\ttype filename | more\tmore\nsort data\tsort\tsort\n```\n","source":"_posts/Unix-Cheat-Sheet.md","raw":"---\ntitle: Unix Cheat Sheet\ndate: 2016-11-24 12:03:05\ntags:\n- linux常用命令\n- DOS命令\n- Ubuntu命令\n- Cheat Sheet\n---\nPeople who use Windows without DOS, or a Macintosh, or PPP without a terminal, or an ISP's menu without the Unix prompt are at a disadvantage. Something is happening, and they don't know what it is. I like to know what's really going on, so I've been learning some Unix.\n\nThe Net is a Unix place. I'm no wizard, but I'm comfortable with basic commands and occasionally type \"rm\" at my DOS prompt instead of \"del\". This is my Unix cheat sheet, so I can remember. Uppercase and lowercase matter. These commands (mostly) work with my C-shell account on RAIN. Your account might be different, especially if your prompt ends with a \"$\" (Korn shell) rather than a \"%\", so be cautious. When I need help, I reach for the books UNIX in a Nutshell (O'Reilly) and Unix Unbound by Harley Hahn (Osborne/McGraw Hill, 1994).\n\n- Help on any Unix command. RTFM!\n\n```bash\nman {command}\t#Type man ls to read the manual for the ls command.\nman {command} > {filename}\t#Redirect help to a file to download.\nwhatis {command}\t#Give short description of command. (Not on RAIN?)\napropos {keyword}\t#Search for all Unix commands that match keyword, eg apropos file. (Not on RAIN?)\n```\n\n<!-- more -->\n\n- List a directory\n\n```bash\nls {path}\t#It's ok to combine attributes, eg ls -laF gets a long listing of all files with types.\nls {path_1} {path_2}\t#List both {path_1} and {path_2}.\nls -l {path}\t#Long listing, with date, size and permisions.\nls -a {path}\t#Show all files, including important .dot files that don't otherwise show.\nls -F {path}\t#Show type of each file. \"/\" = directory, \"*\" = executable.\nls -R {path}\t#Recursive listing, with all subdirs.\nls {path} > {filename}\t#Redirect directory to a file.\nls {path} | more\t#\t#Show listing one screen at a time.\ndir {path}\t#Useful alias for DOS people, or use with ncftp.\n```\n\n- Change to directory\n\n```bash\ncd {dirname}\t#There must be a space between.\ncd ~\t#Go back to home directory, useful if you're lost.\ncd ..\t#Go back one directory.\ncdup\t#Useful alias, like \"cd ..\", or use with ncftp.\n```\n\n- Make a new directory\n\n```bash\nmkdir {dirname}\n```\n\n- Remove a directory\n\n```bash\nrmdir {dirname}\t#Only works if {dirname} is empty.\nrm -r {dirname}\t#Remove all files and subdirs. Careful!\n```\n\n- Print working directory\n\n```bash\npwd\t#Show where you are as full path. Useful if you're lost or exploring.\n```\n\n- Copy a file or directory\n\n```bash\ncp {file1} {file2}\ncp -r {dir1} {dir2}\t#Recursive, copy directory and all subdirs.\ncat {newfile} >> {oldfile}\t#Append newfile to end of oldfile.\n```\n\n- Move (or rename) a file\n\n```bash\nmv {oldfile} {newfile}\t#Moving a file and renaming it are the same thing.\nmv {oldname} {newname}\n```\n\n- Delete a file\n\n```bash\nrm {filespec}\t#? and * wildcards work like DOS should. \"?\" is any character; \"*\" is any string of characters.\nls {filespec} >> rm {filespec}\t#Good strategy: first list a group to make sure it's what's you think...then delete it all at once.\n```\n\n- Download with zmodem\t#(Use sx with xmodem.)\n\n```bash\nsz [-a|b] {filename}\t#-a = ascii, -b = binary. Use binary for everything. (It's the default?)\nsz *.zip\t#Handy after downloading with FTP. Go talk to your spouse while it does it's stuff.\n```\n\n- Upload with zmodem\t#(Use rx with xmodem.)\n\n```bash\nrz [-a|b] (filename}\t#Give rz command in Unix, THEN start upload at home. Works fine with multiple files.\n```\n\n- View a text file\n\n```bash\nmore {filename}\t#View file one screen at a time.\nless {filename} \t#Like more, with extra features.\ncat {filename} \t#View file, but it scrolls.\ncat {filename} | more\t#View file one screen at a time.\npage {filename}\t#Very handy with ncftp.\npico {filename}\t#Use text editor and don't save.\n```\n\n- Edit a text file.\n\n```bash\npico {filename}\t#The same editor PINE uses, so you already know it. vi and emacs are also available.\n```\n\n- Create a text file.\n\n```bash\ncat > {filename}\t#Enter your text (multiple lines with enter are ok) and press control-d to save.\npico {filename}\t#Create some text and save it.\n```\n\n- Compare two files\n\n```bash\ndiff {file1} {file2}\t#Show the differences.\nsdiff {file1} {file2}\t#Show files side by side.\n```\n\n- Other text commands\n\n```bash\ngrep '{pattern}' {file}\t#Find regular expression in file.\nsort {file1} > {file2}\t#Sort file1 and save as file2.\nsort -o {file} {file}\t#Replace file with sorted version.\nspell {file}\t#Display misspelled words.\nwc {file}\t#Count words in file.\n```\n\n- Find files on system\n\n```bash\nfind {filespec}\t#Works with wildcards. Handy for snooping.\nfind {filespec} > {filename}\t#Redirect find list to file. Can be big!\n```\n\n- Make an Alias\n\n```bash\nalias {name} '{command}'\t#Put the command in 'single quotes'. More useful in your .cshrc file.\n```\n\n- Wildcards and Shortcuts\n\n```bash\n*\t#Match any string of characters, eg page* gets page1, page10, and page.txt.\n?\t#Match any single character, eg page? gets page1 and page2, but not page10.\n[...]\t#Match any characters in a range, eg page[1-3] gets page1, page2, and page3.\n~\t#Short for your home directory, eg cd ~ will take you home, and rm -r ~ will destroy it.\n.\t#The current directory.\n..\t#One directory up the tree, eg ls ...\n```\n\n- Pipes and Redirection\t#(You pipe a command to another command, and redirect it to a file.)\n\n```bash\n{command} > {file}\t#Redirect output to a file, eg ls > list.txt writes directory to file.\n{command} >> {file}\t#Append output to an existing file, eg cat update >> archive adds update to end of archive.\n{command} < {file}\t#Get input from a file, eg sort < file.txt\n{command} < {file1} > {file2}\t#Get input from file1, and write to file2, eg sort < old.txt > new.txt sorts old.txt and saves as new.txt.\n{command} | {command}\t#Pipe one command to another, eg ls | more gets directory and sends it to more to show it one page at a time.\n```\n\n- Permissions, important and tricky!\n\nUnix permissions concern who can read a file or directory, write to it, and execute it. Permissions are granted or withheld with a magic 3-digit number. The three digits correspond to the owner (you); the group (?); and the world (everyone else).\n\n- Think of each digit as a sum:\n\n```bash\nexecute permission\t= 1\nwrite permission\t= 2\nwrite and execute (1+2)\t= 3\nread permission\t= 4\nread and execute (4+1)\t= 5\nread and write (4+2)\t= 6\nread, write and execute (4+2+1)\t= 7\n```\n\n- Add the number value of the permissions you want to grant each group to make a three digit number, one digit each for the owner, the group, and the world. Here are some useful combinations. Try to figure them out!\n\n```bash\nchmod 600 {filespec}\t#You can read and write; the world can't. Good for files.\nchmod 700 {filespec}\t#You can read, write, and execute; the world can't. Good for scripts.\nchmod 644 {filespec}\t#You can read and write; the world can only read. Good for web pages.\nchmod 755 {filespec}\t#You can read, write, and execute; the world can read and execute. Good for programs you want to share, and your public_html directory.\n```\n\n- Permissions, another way\n\nYou can also change file permissions with letters:\n\n```bash\nu = user (yourself)\tg = group\ta = everyone\n\nr = read\tw = write\tx = execute\n```\n\n```bash\nchmod u+rw {filespec}\t#Give yourself read and write permission\nchmod u+x {filespec}\t#Give yourself execute permission.\nchmod a+rw {filespec}\t#Give read and write permission to everyone.\n```\n\n- Applications I use\n\n```bash\nfinger {userid}\t#Find out what someone's up to.\ngopher\t#Gopher.\nirc\t#IRC, but not available on RAIN.\nlynx\t#Text-based Web browser, fast and lean.\nncftp\t#Better FTP.\npico {filename}\t\t#Easy text editor, but limited. vi and emacs are available.\npine\t#Email.\ntelnet {host}\t#Start Telnet session to another host.\ntin\t#Usenet.\nuudecode {filename} \t#...\nuuencode {filename}\t#Do it on the server to reduce download size about 1/3.\nytalk {userid}\t#Chat with someone else online, eg ytalk mkummel. Please use w first so you don't interrupt a big download!\n```\n\n- System info\n\n```bash\ndate\t#Show date and time.\ndf\t#Check system disk capacity.\ndu\t#Check your disk usage and show bytes in each directory.\nmore /etc/motd\t#Read message of the day, \"motd\" is a useful alias..\nprintenv\t#Show all environmental variables (in C-shell% - use set in Korn shell$).\nquota -v\t#Check your total disk use.\nuptime\t#Find out system load.\nw\t#Who's online and what are they doing?\n```\n\n- Unix Directory Format\n\nLong listings (ls -l) have this format:\n\n![](http://images2015.cnblogs.com/blog/832918/201609/832918-20160920180157621-294414687.png)\n\n- How to Make an Alias\n\nAn alias lets you type something simple and do something complex. It's a shorthand for a command. If you want to type \"dir\" instead of \"ls -l\" then type alias dir 'ls -l'. The single quotes tell Unix that the enclosed text is one command.\n\nAliases are more useful if they're permanent so you don't have to think about them. You can do this by adding the alias to your .cshrc file so they're automatically loaded when you start. Type pico .cshrc and look for the alias section and add what you want. It will be effective when you start. Just remember that if you make an alias with the name of a Unix command, that command will become unavailable.\n\n- Here are a few aliases from my .cshrc file:\n\n```bash\n# enter your aliases here in the form:\n# alias     this    means this\nalias       h       history\nalias       m       more\nalias\tq\tquota -v\nalias       bye     exit\nalias \tls \tls -F\nalias       dir     ls\nalias \tcdup\tcd ..\nalias\tmotd\tmore /etc/motd\n```\n\n- How to Make a Script\n\nA Unix script is a text file of commands that can be executed, like a .bat file in DOS. Unix contains a powerful programming language with loops and variables that I don't really understand. Here's a useful example.\n\nUnix can't rename a bunch of files at once the way DOS can. This is a problem if you develop Web pages on a DOS machine and then upload them to your Unix Server. You might have a bunch of .htm files that you want to rename as .html files, but Unix makes you do it one by one. This is actually not a defect. (It's a feature!) Unix is just being more consistent than DOS. So make a script!\n\nMake a text file (eg with pico) with the following lines. The first line is special. It tells Unix what program or shell should execute the script. Other # lines are comments.\n\n```bash\n#! /bin/csh\n# htm2html converts *.htm files to *.html\nforeach f ( *.htm )\nset base=`basename $f .htm`\nmv $f $base.html\nend\n```\n\nSave this in your home directory as htm2html (or whatever). Then make it user-executable by typing chmod 700 htm2html. After this a * will appear by the file name when you ls -F, to show that it's executable. Change to a directory with .htm files and type ~/htm2html, and it will do its stuff.\n\nThink about scripts whenever you find yourself doing the same tedious thing over and over.\n\n\n- Dotfiles (aka Hidden Files)\n\nDotfile names begin with a \".\" These files and directories don't show up when you list a directory unless you use the -a option, so they are also called hidden files. Type ls -la in your home directory to see what you have.\n\nSome of these dotfiles are crucial. They initialize your shell and the programs you use, like autoexec.bat in DOS and .ini files in Windows. rc means \"run commands\". These are all text files that can be edited, but change them at your peril. Make backups first!\n\nHere's some of what I get when I type ls -laF:\n\n```bash\n.addressbook\t#my email addressbook.\n.cshrc\t\t#my C-shell startup info, important!\n.gopherrc\t#my gopher setup.\n.history\t\t#list of past commands.\n.login\t\t#login init, important!\n.lynxrc\t\t#my lynx setup for WWW.\n.ncftp/\t\t#hidden dir of ncftp stuff.\n.newsrc\t#my list of subscribed newsgroups.\n.pinerc\t\t#my pine setup for email.\n.plan\t\t#text appears when I'm fingered, ok to edit.\n.profile\t\t#Korn shell startup info, important!\n.project  \t#text appears when I'm fingered, ok to edit.\n.signature\t#my signature file for mail and news, ok to edit.\n.tin/\t\t#hidden dir of my tin stuff for usenet.\n.ytalkrc\t\t#my ytalk setup.\n```\n\n- DOS and UNIX commands\n\n```bash\nAction\tDOS\tUNIX\nchange directory\tcd\tcd\nchange file protection\tattrib\tchmod\ncompare files\tcomp\tdiff\ncopy file\tcopy\tcp\ndelete file\tdel\trm\ndelete directory\trd\trmdir\ndirectory list\tdir\tls\nedit a file\tedit\tpico\nenvironment\tset\tprintenv\nfind string in file\tfind\tgrep\nhelp\thelp\tman\nmake directory\tmd\tmkdir\nmove file\tmove\tmv\nrename file\tren\tmv\nshow date and time\tdate, time\tdate\nshow disk space\tchkdsk\tdf\nshow file\ttype\tcat\nshow file by screens\ttype filename | more\tmore\nsort data\tsort\tsort\n```\n","slug":"Unix-Cheat-Sheet","published":1,"updated":"2016-11-26T03:53:40.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civyon3yn0004umdfauavkzpg","content":"<p>People who use Windows without DOS, or a Macintosh, or PPP without a terminal, or an ISP’s menu without the Unix prompt are at a disadvantage. Something is happening, and they don’t know what it is. I like to know what’s really going on, so I’ve been learning some Unix.</p>\n<p>The Net is a Unix place. I’m no wizard, but I’m comfortable with basic commands and occasionally type “rm” at my DOS prompt instead of “del”. This is my Unix cheat sheet, so I can remember. Uppercase and lowercase matter. These commands (mostly) work with my C-shell account on RAIN. Your account might be different, especially if your prompt ends with a “$” (Korn shell) rather than a “%”, so be cautious. When I need help, I reach for the books UNIX in a Nutshell (O’Reilly) and Unix Unbound by Harley Hahn (Osborne/McGraw Hill, 1994).</p>\n<ul>\n<li>Help on any Unix command. RTFM!</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">man &#123;<span class=\"built_in\">command</span>&#125;\t<span class=\"comment\">#Type man ls to read the manual for the ls command.</span></div><div class=\"line\">man &#123;<span class=\"built_in\">command</span>&#125; &gt; &#123;filename&#125;\t<span class=\"comment\">#Redirect help to a file to download.</span></div><div class=\"line\">whatis &#123;<span class=\"built_in\">command</span>&#125;\t<span class=\"comment\">#Give short description of command. (Not on RAIN?)</span></div><div class=\"line\">apropos &#123;keyword&#125;\t<span class=\"comment\">#Search for all Unix commands that match keyword, eg apropos file. (Not on RAIN?)</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>List a directory</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls &#123;path&#125;\t<span class=\"comment\">#It's ok to combine attributes, eg ls -laF gets a long listing of all files with types.</span></div><div class=\"line\">ls &#123;path_1&#125; &#123;path_2&#125;\t<span class=\"comment\">#List both &#123;path_1&#125; and &#123;path_2&#125;.</span></div><div class=\"line\">ls <span class=\"_\">-l</span> &#123;path&#125;\t<span class=\"comment\">#Long listing, with date, size and permisions.</span></div><div class=\"line\">ls <span class=\"_\">-a</span> &#123;path&#125;\t<span class=\"comment\">#Show all files, including important .dot files that don't otherwise show.</span></div><div class=\"line\">ls -F &#123;path&#125;\t<span class=\"comment\">#Show type of each file. \"/\" = directory, \"*\" = executable.</span></div><div class=\"line\">ls -R &#123;path&#125;\t<span class=\"comment\">#Recursive listing, with all subdirs.</span></div><div class=\"line\">ls &#123;path&#125; &gt; &#123;filename&#125;\t<span class=\"comment\">#Redirect directory to a file.</span></div><div class=\"line\">ls &#123;path&#125; | more\t<span class=\"comment\">#\t#Show listing one screen at a time.</span></div><div class=\"line\">dir &#123;path&#125;\t<span class=\"comment\">#Useful alias for DOS people, or use with ncftp.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Change to directory</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> &#123;dirname&#125;\t<span class=\"comment\">#There must be a space between.</span></div><div class=\"line\"><span class=\"built_in\">cd</span> ~\t<span class=\"comment\">#Go back to home directory, useful if you're lost.</span></div><div class=\"line\"><span class=\"built_in\">cd</span> ..\t<span class=\"comment\">#Go back one directory.</span></div><div class=\"line\">cdup\t<span class=\"comment\">#Useful alias, like \"cd ..\", or use with ncftp.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Make a new directory</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir &#123;dirname&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Remove a directory</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rmdir &#123;dirname&#125;\t<span class=\"comment\">#Only works if &#123;dirname&#125; is empty.</span></div><div class=\"line\">rm -r &#123;dirname&#125;\t<span class=\"comment\">#Remove all files and subdirs. Careful!</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Print working directory</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">pwd</span>\t<span class=\"comment\">#Show where you are as full path. Useful if you're lost or exploring.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Copy a file or directory</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp &#123;file1&#125; &#123;file2&#125;</div><div class=\"line\">cp -r &#123;dir1&#125; &#123;dir2&#125;\t<span class=\"comment\">#Recursive, copy directory and all subdirs.</span></div><div class=\"line\">cat &#123;newfile&#125; &gt;&gt; &#123;oldfile&#125;\t<span class=\"comment\">#Append newfile to end of oldfile.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Move (or rename) a file</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv &#123;oldfile&#125; &#123;newfile&#125;\t<span class=\"comment\">#Moving a file and renaming it are the same thing.</span></div><div class=\"line\">mv &#123;oldname&#125; &#123;newname&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Delete a file</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm &#123;filespec&#125;\t<span class=\"comment\">#? and * wildcards work like DOS should. \"?\" is any character; \"*\" is any string of characters.</span></div><div class=\"line\">ls &#123;filespec&#125; &gt;&gt; rm &#123;filespec&#125;\t<span class=\"comment\">#Good strategy: first list a group to make sure it's what's you think...then delete it all at once.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Download with zmodem    #(Use sx with xmodem.)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sz [<span class=\"_\">-a</span>|b] &#123;filename&#125;\t<span class=\"comment\">#-a = ascii, -b = binary. Use binary for everything. (It's the default?)</span></div><div class=\"line\">sz *.zip\t<span class=\"comment\">#Handy after downloading with FTP. Go talk to your spouse while it does it's stuff.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Upload with zmodem    #(Use rx with xmodem.)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rz [<span class=\"_\">-a</span>|b] (filename&#125;\t<span class=\"comment\">#Give rz command in Unix, THEN start upload at home. Works fine with multiple files.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>View a text file</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">more &#123;filename&#125;\t<span class=\"comment\">#View file one screen at a time.</span></div><div class=\"line\">less &#123;filename&#125; \t<span class=\"comment\">#Like more, with extra features.</span></div><div class=\"line\">cat &#123;filename&#125; \t<span class=\"comment\">#View file, but it scrolls.</span></div><div class=\"line\">cat &#123;filename&#125; | more\t<span class=\"comment\">#View file one screen at a time.</span></div><div class=\"line\">page &#123;filename&#125;\t<span class=\"comment\">#Very handy with ncftp.</span></div><div class=\"line\">pico &#123;filename&#125;\t<span class=\"comment\">#Use text editor and don't save.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Edit a text file.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pico &#123;filename&#125;\t<span class=\"comment\">#The same editor PINE uses, so you already know it. vi and emacs are also available.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Create a text file.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat &gt; &#123;filename&#125;\t<span class=\"comment\">#Enter your text (multiple lines with enter are ok) and press control-d to save.</span></div><div class=\"line\">pico &#123;filename&#125;\t<span class=\"comment\">#Create some text and save it.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Compare two files</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">diff &#123;file1&#125; &#123;file2&#125;\t<span class=\"comment\">#Show the differences.</span></div><div class=\"line\">sdiff &#123;file1&#125; &#123;file2&#125;\t<span class=\"comment\">#Show files side by side.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Other text commands</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">grep <span class=\"string\">'&#123;pattern&#125;'</span> &#123;file&#125;\t<span class=\"comment\">#Find regular expression in file.</span></div><div class=\"line\">sort &#123;file1&#125; &gt; &#123;file2&#125;\t<span class=\"comment\">#Sort file1 and save as file2.</span></div><div class=\"line\">sort -o &#123;file&#125; &#123;file&#125;\t<span class=\"comment\">#Replace file with sorted version.</span></div><div class=\"line\">spell &#123;file&#125;\t<span class=\"comment\">#Display misspelled words.</span></div><div class=\"line\">wc &#123;file&#125;\t<span class=\"comment\">#Count words in file.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Find files on system</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">find &#123;filespec&#125;\t<span class=\"comment\">#Works with wildcards. Handy for snooping.</span></div><div class=\"line\">find &#123;filespec&#125; &gt; &#123;filename&#125;\t<span class=\"comment\">#Redirect find list to file. Can be big!</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Make an Alias</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">alias</span> &#123;name&#125; <span class=\"string\">'&#123;command&#125;'</span>\t<span class=\"comment\">#Put the command in 'single quotes'. More useful in your .cshrc file.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Wildcards and Shortcuts</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">*\t<span class=\"comment\">#Match any string of characters, eg page* gets page1, page10, and page.txt.</span></div><div class=\"line\">?\t<span class=\"comment\">#Match any single character, eg page? gets page1 and page2, but not page10.</span></div><div class=\"line\">[...]\t<span class=\"comment\">#Match any characters in a range, eg page[1-3] gets page1, page2, and page3.</span></div><div class=\"line\">~\t<span class=\"comment\">#Short for your home directory, eg cd ~ will take you home, and rm -r ~ will destroy it.</span></div><div class=\"line\">.\t<span class=\"comment\">#The current directory.</span></div><div class=\"line\">..\t<span class=\"comment\">#One directory up the tree, eg ls ...</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Pipes and Redirection    #(You pipe a command to another command, and redirect it to a file.)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"built_in\">command</span>&#125; &gt; &#123;file&#125;\t<span class=\"comment\">#Redirect output to a file, eg ls &gt; list.txt writes directory to file.</span></div><div class=\"line\">&#123;<span class=\"built_in\">command</span>&#125; &gt;&gt; &#123;file&#125;\t<span class=\"comment\">#Append output to an existing file, eg cat update &gt;&gt; archive adds update to end of archive.</span></div><div class=\"line\">&#123;<span class=\"built_in\">command</span>&#125; &lt; &#123;file&#125;\t<span class=\"comment\">#Get input from a file, eg sort &lt; file.txt</span></div><div class=\"line\">&#123;<span class=\"built_in\">command</span>&#125; &lt; &#123;file1&#125; &gt; &#123;file2&#125;\t<span class=\"comment\">#Get input from file1, and write to file2, eg sort &lt; old.txt &gt; new.txt sorts old.txt and saves as new.txt.</span></div><div class=\"line\">&#123;<span class=\"built_in\">command</span>&#125; | &#123;<span class=\"built_in\">command</span>&#125;\t<span class=\"comment\">#Pipe one command to another, eg ls | more gets directory and sends it to more to show it one page at a time.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Permissions, important and tricky!</li>\n</ul>\n<p>Unix permissions concern who can read a file or directory, write to it, and execute it. Permissions are granted or withheld with a magic 3-digit number. The three digits correspond to the owner (you); the group (?); and the world (everyone else).</p>\n<ul>\n<li>Think of each digit as a sum:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">execute permission\t= 1</div><div class=\"line\">write permission\t= 2</div><div class=\"line\">write and execute (1+2)\t= 3</div><div class=\"line\"><span class=\"built_in\">read</span> permission\t= 4</div><div class=\"line\"><span class=\"built_in\">read</span> and execute (4+1)\t= 5</div><div class=\"line\"><span class=\"built_in\">read</span> and write (4+2)\t= 6</div><div class=\"line\"><span class=\"built_in\">read</span>, write and execute (4+2+1)\t= 7</div></pre></td></tr></table></figure>\n<ul>\n<li>Add the number value of the permissions you want to grant each group to make a three digit number, one digit each for the owner, the group, and the world. Here are some useful combinations. Try to figure them out!</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 600 &#123;filespec&#125;\t<span class=\"comment\">#You can read and write; the world can't. Good for files.</span></div><div class=\"line\">chmod 700 &#123;filespec&#125;\t<span class=\"comment\">#You can read, write, and execute; the world can't. Good for scripts.</span></div><div class=\"line\">chmod 644 &#123;filespec&#125;\t<span class=\"comment\">#You can read and write; the world can only read. Good for web pages.</span></div><div class=\"line\">chmod 755 &#123;filespec&#125;\t<span class=\"comment\">#You can read, write, and execute; the world can read and execute. Good for programs you want to share, and your public_html directory.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Permissions, another way</li>\n</ul>\n<p>You can also change file permissions with letters:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">u = user (yourself)\tg = group\ta = everyone</div><div class=\"line\"></div><div class=\"line\">r = <span class=\"built_in\">read</span>\tw = write\tx = execute</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod u+rw &#123;filespec&#125;\t<span class=\"comment\">#Give yourself read and write permission</span></div><div class=\"line\">chmod u+x &#123;filespec&#125;\t<span class=\"comment\">#Give yourself execute permission.</span></div><div class=\"line\">chmod a+rw &#123;filespec&#125;\t<span class=\"comment\">#Give read and write permission to everyone.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Applications I use</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">finger &#123;userid&#125;\t<span class=\"comment\">#Find out what someone's up to.</span></div><div class=\"line\">gopher\t<span class=\"comment\">#Gopher.</span></div><div class=\"line\">irc\t<span class=\"comment\">#IRC, but not available on RAIN.</span></div><div class=\"line\">lynx\t<span class=\"comment\">#Text-based Web browser, fast and lean.</span></div><div class=\"line\">ncftp\t<span class=\"comment\">#Better FTP.</span></div><div class=\"line\">pico &#123;filename&#125;\t\t<span class=\"comment\">#Easy text editor, but limited. vi and emacs are available.</span></div><div class=\"line\">pine\t<span class=\"comment\">#Email.</span></div><div class=\"line\">telnet &#123;host&#125;\t<span class=\"comment\">#Start Telnet session to another host.</span></div><div class=\"line\">tin\t<span class=\"comment\">#Usenet.</span></div><div class=\"line\">uudecode &#123;filename&#125; \t<span class=\"comment\">#...</span></div><div class=\"line\">uuencode &#123;filename&#125;\t<span class=\"comment\">#Do it on the server to reduce download size about 1/3.</span></div><div class=\"line\">ytalk &#123;userid&#125;\t<span class=\"comment\">#Chat with someone else online, eg ytalk mkummel. Please use w first so you don't interrupt a big download!</span></div></pre></td></tr></table></figure>\n<ul>\n<li>System info</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">date\t<span class=\"comment\">#Show date and time.</span></div><div class=\"line\">df\t<span class=\"comment\">#Check system disk capacity.</span></div><div class=\"line\">du\t<span class=\"comment\">#Check your disk usage and show bytes in each directory.</span></div><div class=\"line\">more /etc/motd\t<span class=\"comment\">#Read message of the day, \"motd\" is a useful alias..</span></div><div class=\"line\">printenv\t<span class=\"comment\">#Show all environmental variables (in C-shell% - use set in Korn shell$).</span></div><div class=\"line\">quota -v\t<span class=\"comment\">#Check your total disk use.</span></div><div class=\"line\">uptime\t<span class=\"comment\">#Find out system load.</span></div><div class=\"line\">w\t<span class=\"comment\">#Who's online and what are they doing?</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Unix Directory Format</li>\n</ul>\n<p>Long listings (ls -l) have this format:</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/832918/201609/832918-20160920180157621-294414687.png\" alt=\"\"></p>\n<ul>\n<li>How to Make an Alias</li>\n</ul>\n<p>An alias lets you type something simple and do something complex. It’s a shorthand for a command. If you want to type “dir” instead of “ls -l” then type alias dir ‘ls -l’. The single quotes tell Unix that the enclosed text is one command.</p>\n<p>Aliases are more useful if they’re permanent so you don’t have to think about them. You can do this by adding the alias to your .cshrc file so they’re automatically loaded when you start. Type pico .cshrc and look for the alias section and add what you want. It will be effective when you start. Just remember that if you make an alias with the name of a Unix command, that command will become unavailable.</p>\n<ul>\n<li>Here are a few aliases from my .cshrc file:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># enter your aliases here in the form:</span></div><div class=\"line\"><span class=\"comment\"># alias     this    means this</span></div><div class=\"line\"><span class=\"built_in\">alias</span>       h       <span class=\"built_in\">history</span></div><div class=\"line\"><span class=\"built_in\">alias</span>       m       more</div><div class=\"line\"><span class=\"built_in\">alias</span>\tq\tquota -v</div><div class=\"line\"><span class=\"built_in\">alias</span>       <span class=\"built_in\">bye</span>     <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"built_in\">alias</span> \tls \tls -F</div><div class=\"line\"><span class=\"built_in\">alias</span>       dir     ls</div><div class=\"line\"><span class=\"built_in\">alias</span> \tcdup\t<span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">alias</span>\tmotd\tmore /etc/motd</div></pre></td></tr></table></figure>\n<ul>\n<li>How to Make a Script</li>\n</ul>\n<p>A Unix script is a text file of commands that can be executed, like a .bat file in DOS. Unix contains a powerful programming language with loops and variables that I don’t really understand. Here’s a useful example.</p>\n<p>Unix can’t rename a bunch of files at once the way DOS can. This is a problem if you develop Web pages on a DOS machine and then upload them to your Unix Server. You might have a bunch of .htm files that you want to rename as .html files, but Unix makes you do it one by one. This is actually not a defect. (It’s a feature!) Unix is just being more consistent than DOS. So make a script!</p>\n<p>Make a text file (eg with pico) with the following lines. The first line is special. It tells Unix what program or shell should execute the script. Other # lines are comments.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#! /bin/csh</span></div><div class=\"line\"><span class=\"comment\"># htm2html converts *.htm files to *.html</span></div><div class=\"line\">foreach f ( *.htm )</div><div class=\"line\"><span class=\"built_in\">set</span> base=`basename <span class=\"variable\">$f</span> .htm`</div><div class=\"line\">mv <span class=\"variable\">$f</span> <span class=\"variable\">$base</span>.html</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>Save this in your home directory as htm2html (or whatever). Then make it user-executable by typing chmod 700 htm2html. After this a * will appear by the file name when you ls -F, to show that it’s executable. Change to a directory with .htm files and type ~/htm2html, and it will do its stuff.</p>\n<p>Think about scripts whenever you find yourself doing the same tedious thing over and over.</p>\n<ul>\n<li>Dotfiles (aka Hidden Files)</li>\n</ul>\n<p>Dotfile names begin with a “.” These files and directories don’t show up when you list a directory unless you use the -a option, so they are also called hidden files. Type ls -la in your home directory to see what you have.</p>\n<p>Some of these dotfiles are crucial. They initialize your shell and the programs you use, like autoexec.bat in DOS and .ini files in Windows. rc means “run commands”. These are all text files that can be edited, but change them at your peril. Make backups first!</p>\n<p>Here’s some of what I get when I type ls -laF:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">.addressbook\t<span class=\"comment\">#my email addressbook.</span></div><div class=\"line\">.cshrc\t\t<span class=\"comment\">#my C-shell startup info, important!</span></div><div class=\"line\">.gopherrc\t<span class=\"comment\">#my gopher setup.</span></div><div class=\"line\">.history\t\t<span class=\"comment\">#list of past commands.</span></div><div class=\"line\">.login\t\t<span class=\"comment\">#login init, important!</span></div><div class=\"line\">.lynxrc\t\t<span class=\"comment\">#my lynx setup for WWW.</span></div><div class=\"line\">.ncftp/\t\t<span class=\"comment\">#hidden dir of ncftp stuff.</span></div><div class=\"line\">.newsrc\t<span class=\"comment\">#my list of subscribed newsgroups.</span></div><div class=\"line\">.pinerc\t\t<span class=\"comment\">#my pine setup for email.</span></div><div class=\"line\">.plan\t\t<span class=\"comment\">#text appears when I'm fingered, ok to edit.</span></div><div class=\"line\">.profile\t\t<span class=\"comment\">#Korn shell startup info, important!</span></div><div class=\"line\">.project  \t<span class=\"comment\">#text appears when I'm fingered, ok to edit.</span></div><div class=\"line\">.signature\t<span class=\"comment\">#my signature file for mail and news, ok to edit.</span></div><div class=\"line\">.tin/\t\t<span class=\"comment\">#hidden dir of my tin stuff for usenet.</span></div><div class=\"line\">.ytalkrc\t\t<span class=\"comment\">#my ytalk setup.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>DOS and UNIX commands</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Action\tDOS\tUNIX</div><div class=\"line\">change directory\t<span class=\"built_in\">cd</span>\t<span class=\"built_in\">cd</span></div><div class=\"line\">change file protection\tattrib\tchmod</div><div class=\"line\">compare files\tcomp\tdiff</div><div class=\"line\">copy file\tcopy\tcp</div><div class=\"line\">delete file\tdel\trm</div><div class=\"line\">delete directory\trd\trmdir</div><div class=\"line\">directory list\tdir\tls</div><div class=\"line\">edit a file\tedit\tpico</div><div class=\"line\">environment\t<span class=\"built_in\">set</span>\tprintenv</div><div class=\"line\">find string <span class=\"keyword\">in</span> file\tfind\tgrep</div><div class=\"line\"><span class=\"built_in\">help</span>\t<span class=\"built_in\">help</span>\tman</div><div class=\"line\">make directory\tmd\tmkdir</div><div class=\"line\">move file\tmove\tmv</div><div class=\"line\">rename file\tren\tmv</div><div class=\"line\">show date and time\tdate, time\tdate</div><div class=\"line\">show disk space\tchkdsk\tdf</div><div class=\"line\">show file\t<span class=\"built_in\">type</span>\tcat</div><div class=\"line\">show file by screens\t<span class=\"built_in\">type</span> filename | more\tmore</div><div class=\"line\">sort data\tsort\tsort</div></pre></td></tr></table></figure>\n","excerpt":"<p>People who use Windows without DOS, or a Macintosh, or PPP without a terminal, or an ISP’s menu without the Unix prompt are at a disadvantage. Something is happening, and they don’t know what it is. I like to know what’s really going on, so I’ve been learning some Unix.</p>\n<p>The Net is a Unix place. I’m no wizard, but I’m comfortable with basic commands and occasionally type “rm” at my DOS prompt instead of “del”. This is my Unix cheat sheet, so I can remember. Uppercase and lowercase matter. These commands (mostly) work with my C-shell account on RAIN. Your account might be different, especially if your prompt ends with a “$” (Korn shell) rather than a “%”, so be cautious. When I need help, I reach for the books UNIX in a Nutshell (O’Reilly) and Unix Unbound by Harley Hahn (Osborne/McGraw Hill, 1994).</p>\n<ul>\n<li>Help on any Unix command. RTFM!</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">man &#123;<span class=\"built_in\">command</span>&#125;\t<span class=\"comment\">#Type man ls to read the manual for the ls command.</span></div><div class=\"line\">man &#123;<span class=\"built_in\">command</span>&#125; &gt; &#123;filename&#125;\t<span class=\"comment\">#Redirect help to a file to download.</span></div><div class=\"line\">whatis &#123;<span class=\"built_in\">command</span>&#125;\t<span class=\"comment\">#Give short description of command. (Not on RAIN?)</span></div><div class=\"line\">apropos &#123;keyword&#125;\t<span class=\"comment\">#Search for all Unix commands that match keyword, eg apropos file. (Not on RAIN?)</span></div></pre></td></tr></table></figure>","more":"<ul>\n<li>List a directory</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls &#123;path&#125;\t<span class=\"comment\">#It's ok to combine attributes, eg ls -laF gets a long listing of all files with types.</span></div><div class=\"line\">ls &#123;path_1&#125; &#123;path_2&#125;\t<span class=\"comment\">#List both &#123;path_1&#125; and &#123;path_2&#125;.</span></div><div class=\"line\">ls <span class=\"_\">-l</span> &#123;path&#125;\t<span class=\"comment\">#Long listing, with date, size and permisions.</span></div><div class=\"line\">ls <span class=\"_\">-a</span> &#123;path&#125;\t<span class=\"comment\">#Show all files, including important .dot files that don't otherwise show.</span></div><div class=\"line\">ls -F &#123;path&#125;\t<span class=\"comment\">#Show type of each file. \"/\" = directory, \"*\" = executable.</span></div><div class=\"line\">ls -R &#123;path&#125;\t<span class=\"comment\">#Recursive listing, with all subdirs.</span></div><div class=\"line\">ls &#123;path&#125; &gt; &#123;filename&#125;\t<span class=\"comment\">#Redirect directory to a file.</span></div><div class=\"line\">ls &#123;path&#125; | more\t<span class=\"comment\">#\t#Show listing one screen at a time.</span></div><div class=\"line\">dir &#123;path&#125;\t<span class=\"comment\">#Useful alias for DOS people, or use with ncftp.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Change to directory</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> &#123;dirname&#125;\t<span class=\"comment\">#There must be a space between.</span></div><div class=\"line\"><span class=\"built_in\">cd</span> ~\t<span class=\"comment\">#Go back to home directory, useful if you're lost.</span></div><div class=\"line\"><span class=\"built_in\">cd</span> ..\t<span class=\"comment\">#Go back one directory.</span></div><div class=\"line\">cdup\t<span class=\"comment\">#Useful alias, like \"cd ..\", or use with ncftp.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Make a new directory</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir &#123;dirname&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Remove a directory</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rmdir &#123;dirname&#125;\t<span class=\"comment\">#Only works if &#123;dirname&#125; is empty.</span></div><div class=\"line\">rm -r &#123;dirname&#125;\t<span class=\"comment\">#Remove all files and subdirs. Careful!</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Print working directory</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">pwd</span>\t<span class=\"comment\">#Show where you are as full path. Useful if you're lost or exploring.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Copy a file or directory</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp &#123;file1&#125; &#123;file2&#125;</div><div class=\"line\">cp -r &#123;dir1&#125; &#123;dir2&#125;\t<span class=\"comment\">#Recursive, copy directory and all subdirs.</span></div><div class=\"line\">cat &#123;newfile&#125; &gt;&gt; &#123;oldfile&#125;\t<span class=\"comment\">#Append newfile to end of oldfile.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Move (or rename) a file</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv &#123;oldfile&#125; &#123;newfile&#125;\t<span class=\"comment\">#Moving a file and renaming it are the same thing.</span></div><div class=\"line\">mv &#123;oldname&#125; &#123;newname&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Delete a file</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm &#123;filespec&#125;\t<span class=\"comment\">#? and * wildcards work like DOS should. \"?\" is any character; \"*\" is any string of characters.</span></div><div class=\"line\">ls &#123;filespec&#125; &gt;&gt; rm &#123;filespec&#125;\t<span class=\"comment\">#Good strategy: first list a group to make sure it's what's you think...then delete it all at once.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Download with zmodem    #(Use sx with xmodem.)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sz [<span class=\"_\">-a</span>|b] &#123;filename&#125;\t<span class=\"comment\">#-a = ascii, -b = binary. Use binary for everything. (It's the default?)</span></div><div class=\"line\">sz *.zip\t<span class=\"comment\">#Handy after downloading with FTP. Go talk to your spouse while it does it's stuff.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Upload with zmodem    #(Use rx with xmodem.)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rz [<span class=\"_\">-a</span>|b] (filename&#125;\t<span class=\"comment\">#Give rz command in Unix, THEN start upload at home. Works fine with multiple files.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>View a text file</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">more &#123;filename&#125;\t<span class=\"comment\">#View file one screen at a time.</span></div><div class=\"line\">less &#123;filename&#125; \t<span class=\"comment\">#Like more, with extra features.</span></div><div class=\"line\">cat &#123;filename&#125; \t<span class=\"comment\">#View file, but it scrolls.</span></div><div class=\"line\">cat &#123;filename&#125; | more\t<span class=\"comment\">#View file one screen at a time.</span></div><div class=\"line\">page &#123;filename&#125;\t<span class=\"comment\">#Very handy with ncftp.</span></div><div class=\"line\">pico &#123;filename&#125;\t<span class=\"comment\">#Use text editor and don't save.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Edit a text file.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pico &#123;filename&#125;\t<span class=\"comment\">#The same editor PINE uses, so you already know it. vi and emacs are also available.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Create a text file.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat &gt; &#123;filename&#125;\t<span class=\"comment\">#Enter your text (multiple lines with enter are ok) and press control-d to save.</span></div><div class=\"line\">pico &#123;filename&#125;\t<span class=\"comment\">#Create some text and save it.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Compare two files</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">diff &#123;file1&#125; &#123;file2&#125;\t<span class=\"comment\">#Show the differences.</span></div><div class=\"line\">sdiff &#123;file1&#125; &#123;file2&#125;\t<span class=\"comment\">#Show files side by side.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Other text commands</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">grep <span class=\"string\">'&#123;pattern&#125;'</span> &#123;file&#125;\t<span class=\"comment\">#Find regular expression in file.</span></div><div class=\"line\">sort &#123;file1&#125; &gt; &#123;file2&#125;\t<span class=\"comment\">#Sort file1 and save as file2.</span></div><div class=\"line\">sort -o &#123;file&#125; &#123;file&#125;\t<span class=\"comment\">#Replace file with sorted version.</span></div><div class=\"line\">spell &#123;file&#125;\t<span class=\"comment\">#Display misspelled words.</span></div><div class=\"line\">wc &#123;file&#125;\t<span class=\"comment\">#Count words in file.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Find files on system</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">find &#123;filespec&#125;\t<span class=\"comment\">#Works with wildcards. Handy for snooping.</span></div><div class=\"line\">find &#123;filespec&#125; &gt; &#123;filename&#125;\t<span class=\"comment\">#Redirect find list to file. Can be big!</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Make an Alias</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">alias</span> &#123;name&#125; <span class=\"string\">'&#123;command&#125;'</span>\t<span class=\"comment\">#Put the command in 'single quotes'. More useful in your .cshrc file.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Wildcards and Shortcuts</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">*\t<span class=\"comment\">#Match any string of characters, eg page* gets page1, page10, and page.txt.</span></div><div class=\"line\">?\t<span class=\"comment\">#Match any single character, eg page? gets page1 and page2, but not page10.</span></div><div class=\"line\">[...]\t<span class=\"comment\">#Match any characters in a range, eg page[1-3] gets page1, page2, and page3.</span></div><div class=\"line\">~\t<span class=\"comment\">#Short for your home directory, eg cd ~ will take you home, and rm -r ~ will destroy it.</span></div><div class=\"line\">.\t<span class=\"comment\">#The current directory.</span></div><div class=\"line\">..\t<span class=\"comment\">#One directory up the tree, eg ls ...</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Pipes and Redirection    #(You pipe a command to another command, and redirect it to a file.)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"built_in\">command</span>&#125; &gt; &#123;file&#125;\t<span class=\"comment\">#Redirect output to a file, eg ls &gt; list.txt writes directory to file.</span></div><div class=\"line\">&#123;<span class=\"built_in\">command</span>&#125; &gt;&gt; &#123;file&#125;\t<span class=\"comment\">#Append output to an existing file, eg cat update &gt;&gt; archive adds update to end of archive.</span></div><div class=\"line\">&#123;<span class=\"built_in\">command</span>&#125; &lt; &#123;file&#125;\t<span class=\"comment\">#Get input from a file, eg sort &lt; file.txt</span></div><div class=\"line\">&#123;<span class=\"built_in\">command</span>&#125; &lt; &#123;file1&#125; &gt; &#123;file2&#125;\t<span class=\"comment\">#Get input from file1, and write to file2, eg sort &lt; old.txt &gt; new.txt sorts old.txt and saves as new.txt.</span></div><div class=\"line\">&#123;<span class=\"built_in\">command</span>&#125; | &#123;<span class=\"built_in\">command</span>&#125;\t<span class=\"comment\">#Pipe one command to another, eg ls | more gets directory and sends it to more to show it one page at a time.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Permissions, important and tricky!</li>\n</ul>\n<p>Unix permissions concern who can read a file or directory, write to it, and execute it. Permissions are granted or withheld with a magic 3-digit number. The three digits correspond to the owner (you); the group (?); and the world (everyone else).</p>\n<ul>\n<li>Think of each digit as a sum:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">execute permission\t= 1</div><div class=\"line\">write permission\t= 2</div><div class=\"line\">write and execute (1+2)\t= 3</div><div class=\"line\"><span class=\"built_in\">read</span> permission\t= 4</div><div class=\"line\"><span class=\"built_in\">read</span> and execute (4+1)\t= 5</div><div class=\"line\"><span class=\"built_in\">read</span> and write (4+2)\t= 6</div><div class=\"line\"><span class=\"built_in\">read</span>, write and execute (4+2+1)\t= 7</div></pre></td></tr></table></figure>\n<ul>\n<li>Add the number value of the permissions you want to grant each group to make a three digit number, one digit each for the owner, the group, and the world. Here are some useful combinations. Try to figure them out!</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 600 &#123;filespec&#125;\t<span class=\"comment\">#You can read and write; the world can't. Good for files.</span></div><div class=\"line\">chmod 700 &#123;filespec&#125;\t<span class=\"comment\">#You can read, write, and execute; the world can't. Good for scripts.</span></div><div class=\"line\">chmod 644 &#123;filespec&#125;\t<span class=\"comment\">#You can read and write; the world can only read. Good for web pages.</span></div><div class=\"line\">chmod 755 &#123;filespec&#125;\t<span class=\"comment\">#You can read, write, and execute; the world can read and execute. Good for programs you want to share, and your public_html directory.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Permissions, another way</li>\n</ul>\n<p>You can also change file permissions with letters:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">u = user (yourself)\tg = group\ta = everyone</div><div class=\"line\"></div><div class=\"line\">r = <span class=\"built_in\">read</span>\tw = write\tx = execute</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod u+rw &#123;filespec&#125;\t<span class=\"comment\">#Give yourself read and write permission</span></div><div class=\"line\">chmod u+x &#123;filespec&#125;\t<span class=\"comment\">#Give yourself execute permission.</span></div><div class=\"line\">chmod a+rw &#123;filespec&#125;\t<span class=\"comment\">#Give read and write permission to everyone.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Applications I use</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">finger &#123;userid&#125;\t<span class=\"comment\">#Find out what someone's up to.</span></div><div class=\"line\">gopher\t<span class=\"comment\">#Gopher.</span></div><div class=\"line\">irc\t<span class=\"comment\">#IRC, but not available on RAIN.</span></div><div class=\"line\">lynx\t<span class=\"comment\">#Text-based Web browser, fast and lean.</span></div><div class=\"line\">ncftp\t<span class=\"comment\">#Better FTP.</span></div><div class=\"line\">pico &#123;filename&#125;\t\t<span class=\"comment\">#Easy text editor, but limited. vi and emacs are available.</span></div><div class=\"line\">pine\t<span class=\"comment\">#Email.</span></div><div class=\"line\">telnet &#123;host&#125;\t<span class=\"comment\">#Start Telnet session to another host.</span></div><div class=\"line\">tin\t<span class=\"comment\">#Usenet.</span></div><div class=\"line\">uudecode &#123;filename&#125; \t<span class=\"comment\">#...</span></div><div class=\"line\">uuencode &#123;filename&#125;\t<span class=\"comment\">#Do it on the server to reduce download size about 1/3.</span></div><div class=\"line\">ytalk &#123;userid&#125;\t<span class=\"comment\">#Chat with someone else online, eg ytalk mkummel. Please use w first so you don't interrupt a big download!</span></div></pre></td></tr></table></figure>\n<ul>\n<li>System info</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">date\t<span class=\"comment\">#Show date and time.</span></div><div class=\"line\">df\t<span class=\"comment\">#Check system disk capacity.</span></div><div class=\"line\">du\t<span class=\"comment\">#Check your disk usage and show bytes in each directory.</span></div><div class=\"line\">more /etc/motd\t<span class=\"comment\">#Read message of the day, \"motd\" is a useful alias..</span></div><div class=\"line\">printenv\t<span class=\"comment\">#Show all environmental variables (in C-shell% - use set in Korn shell$).</span></div><div class=\"line\">quota -v\t<span class=\"comment\">#Check your total disk use.</span></div><div class=\"line\">uptime\t<span class=\"comment\">#Find out system load.</span></div><div class=\"line\">w\t<span class=\"comment\">#Who's online and what are they doing?</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Unix Directory Format</li>\n</ul>\n<p>Long listings (ls -l) have this format:</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/832918/201609/832918-20160920180157621-294414687.png\" alt=\"\"></p>\n<ul>\n<li>How to Make an Alias</li>\n</ul>\n<p>An alias lets you type something simple and do something complex. It’s a shorthand for a command. If you want to type “dir” instead of “ls -l” then type alias dir ‘ls -l’. The single quotes tell Unix that the enclosed text is one command.</p>\n<p>Aliases are more useful if they’re permanent so you don’t have to think about them. You can do this by adding the alias to your .cshrc file so they’re automatically loaded when you start. Type pico .cshrc and look for the alias section and add what you want. It will be effective when you start. Just remember that if you make an alias with the name of a Unix command, that command will become unavailable.</p>\n<ul>\n<li>Here are a few aliases from my .cshrc file:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># enter your aliases here in the form:</span></div><div class=\"line\"><span class=\"comment\"># alias     this    means this</span></div><div class=\"line\"><span class=\"built_in\">alias</span>       h       <span class=\"built_in\">history</span></div><div class=\"line\"><span class=\"built_in\">alias</span>       m       more</div><div class=\"line\"><span class=\"built_in\">alias</span>\tq\tquota -v</div><div class=\"line\"><span class=\"built_in\">alias</span>       <span class=\"built_in\">bye</span>     <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"built_in\">alias</span> \tls \tls -F</div><div class=\"line\"><span class=\"built_in\">alias</span>       dir     ls</div><div class=\"line\"><span class=\"built_in\">alias</span> \tcdup\t<span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">alias</span>\tmotd\tmore /etc/motd</div></pre></td></tr></table></figure>\n<ul>\n<li>How to Make a Script</li>\n</ul>\n<p>A Unix script is a text file of commands that can be executed, like a .bat file in DOS. Unix contains a powerful programming language with loops and variables that I don’t really understand. Here’s a useful example.</p>\n<p>Unix can’t rename a bunch of files at once the way DOS can. This is a problem if you develop Web pages on a DOS machine and then upload them to your Unix Server. You might have a bunch of .htm files that you want to rename as .html files, but Unix makes you do it one by one. This is actually not a defect. (It’s a feature!) Unix is just being more consistent than DOS. So make a script!</p>\n<p>Make a text file (eg with pico) with the following lines. The first line is special. It tells Unix what program or shell should execute the script. Other # lines are comments.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#! /bin/csh</span></div><div class=\"line\"><span class=\"comment\"># htm2html converts *.htm files to *.html</span></div><div class=\"line\">foreach f ( *.htm )</div><div class=\"line\"><span class=\"built_in\">set</span> base=`basename <span class=\"variable\">$f</span> .htm`</div><div class=\"line\">mv <span class=\"variable\">$f</span> <span class=\"variable\">$base</span>.html</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>Save this in your home directory as htm2html (or whatever). Then make it user-executable by typing chmod 700 htm2html. After this a * will appear by the file name when you ls -F, to show that it’s executable. Change to a directory with .htm files and type ~/htm2html, and it will do its stuff.</p>\n<p>Think about scripts whenever you find yourself doing the same tedious thing over and over.</p>\n<ul>\n<li>Dotfiles (aka Hidden Files)</li>\n</ul>\n<p>Dotfile names begin with a “.” These files and directories don’t show up when you list a directory unless you use the -a option, so they are also called hidden files. Type ls -la in your home directory to see what you have.</p>\n<p>Some of these dotfiles are crucial. They initialize your shell and the programs you use, like autoexec.bat in DOS and .ini files in Windows. rc means “run commands”. These are all text files that can be edited, but change them at your peril. Make backups first!</p>\n<p>Here’s some of what I get when I type ls -laF:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">.addressbook\t<span class=\"comment\">#my email addressbook.</span></div><div class=\"line\">.cshrc\t\t<span class=\"comment\">#my C-shell startup info, important!</span></div><div class=\"line\">.gopherrc\t<span class=\"comment\">#my gopher setup.</span></div><div class=\"line\">.history\t\t<span class=\"comment\">#list of past commands.</span></div><div class=\"line\">.login\t\t<span class=\"comment\">#login init, important!</span></div><div class=\"line\">.lynxrc\t\t<span class=\"comment\">#my lynx setup for WWW.</span></div><div class=\"line\">.ncftp/\t\t<span class=\"comment\">#hidden dir of ncftp stuff.</span></div><div class=\"line\">.newsrc\t<span class=\"comment\">#my list of subscribed newsgroups.</span></div><div class=\"line\">.pinerc\t\t<span class=\"comment\">#my pine setup for email.</span></div><div class=\"line\">.plan\t\t<span class=\"comment\">#text appears when I'm fingered, ok to edit.</span></div><div class=\"line\">.profile\t\t<span class=\"comment\">#Korn shell startup info, important!</span></div><div class=\"line\">.project  \t<span class=\"comment\">#text appears when I'm fingered, ok to edit.</span></div><div class=\"line\">.signature\t<span class=\"comment\">#my signature file for mail and news, ok to edit.</span></div><div class=\"line\">.tin/\t\t<span class=\"comment\">#hidden dir of my tin stuff for usenet.</span></div><div class=\"line\">.ytalkrc\t\t<span class=\"comment\">#my ytalk setup.</span></div></pre></td></tr></table></figure>\n<ul>\n<li>DOS and UNIX commands</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Action\tDOS\tUNIX</div><div class=\"line\">change directory\t<span class=\"built_in\">cd</span>\t<span class=\"built_in\">cd</span></div><div class=\"line\">change file protection\tattrib\tchmod</div><div class=\"line\">compare files\tcomp\tdiff</div><div class=\"line\">copy file\tcopy\tcp</div><div class=\"line\">delete file\tdel\trm</div><div class=\"line\">delete directory\trd\trmdir</div><div class=\"line\">directory list\tdir\tls</div><div class=\"line\">edit a file\tedit\tpico</div><div class=\"line\">environment\t<span class=\"built_in\">set</span>\tprintenv</div><div class=\"line\">find string <span class=\"keyword\">in</span> file\tfind\tgrep</div><div class=\"line\"><span class=\"built_in\">help</span>\t<span class=\"built_in\">help</span>\tman</div><div class=\"line\">make directory\tmd\tmkdir</div><div class=\"line\">move file\tmove\tmv</div><div class=\"line\">rename file\tren\tmv</div><div class=\"line\">show date and time\tdate, time\tdate</div><div class=\"line\">show disk space\tchkdsk\tdf</div><div class=\"line\">show file\t<span class=\"built_in\">type</span>\tcat</div><div class=\"line\">show file by screens\t<span class=\"built_in\">type</span> filename | more\tmore</div><div class=\"line\">sort data\tsort\tsort</div></pre></td></tr></table></figure>"},{"title":"Ubuntu安装及调试记录","date":"2016-11-20T01:08:16.000Z","_content":"老婆的笔记本有两个显卡,安装win10的时候总是自动更新显卡;但是同时安装两个显卡,重启之后立马黑屏,蛋好疼…没办法,只能试试linux系统了,网上参考了下,Ubuntu算是比较容易入门的了,于是乎就折腾了好几天.现在用着感觉还不错的说,嘿嘿^_^..本文主要是个人操作过程的记录,其中对于新手来说还是有很多坑的,亲们可以参考下.\n\n## 安装Ubuntu\n\nUbuntu[官网下载](http://cn.ubuntu.com/download/)镜像文件，可直接拖动链接到迅雷下载；\n\n制作启动U盘：一定使用要**使用最新版**的**[UltraISO 软碟通](http://cn.ezbsystems.com/ultraiso/)**,否则可能出现错误，原因参考[U盘刻录无法启动原因](http://www.ubuntukylin.com/news/shownews.php?lang=cn&id=362)；\n\n设置电脑BIOS（F2进入）通过U盘启动，倘若无法启动，可尝试开启UEFI；\n\n通过U盘安装Ubuntu.\n\n## 分区\n\n总的来说,linux的分区可以分为`系统分区`和`数据分区` ,`系统分区`包括`/`和`swap`, `数据分区`包括`/home`和`其他数据`\n\n分区建议:  \n根分区/（系统主要文件）大小建议50G，`swap`交换分区大小参考物理内存,数据`/home`分区500G，剩下空间分两个区不挂载\n\n我的实际分区情况：`/`40G，`swap`4g，`其他`全部给`home`分区。\n\n<!-- more -->\n\n## 配置及安装软件\n\n### 解决桌面闪屏问题\n\n倘若鼠标不间断闪动，鼠标可以移动到桌面右边界之外，可如下解决：`设置`=>`显示`=>`关闭unkwon display`即可。\n\n### ubuntu安装软件的常见方式\n\n软件安装参考[这个网页](http://www.cnblogs.com/dubaokun/p/3558848.html).\n\n**直接通过`apt-get`安装**\n\n有些软件都是包含在相应的库中,通过添加库,便可以直接安装.这种方法安装的程序版本可能不是最新版(比如`node.js`).\n\n**下载`.deb`安装包手动安装**\n\n通过手动或`wget`等命令下载安装包,调用`dpkg -i package`安装\n\n**直接下载二进制文件解压即可用**\n\n- 下载二进制文件(Binaries)\n- 下载后将安装包移动到要安装到的文件夹下，根据个人喜好设置即可,这里我放在了`/home/kun/mysofltware/ `下面\n- 解压到当前文件夹下运行 \n- 进入 解压后的目录bin目录下，执行ls会看到两个文件`node`,`npm`. 然后执行`./node -v `，如果显示出 版本号说明我们下载的程序包是没有问题的(这里以`node.js`的安装为例)  \n- 添加到PATH实现任意目录访问  \n\n\t> 因为 `/home/kun/mysofltware/node-v0.10.26-linux-x64/bin`这个目录是不在环境变量中的，所以只能到该目录下才能node的程序。如果在其他的目录下执行node命令的话 ，必须通过绝对路径访问才可以的.  \n\n\t> 如果要在任意目录可以访问的话，需要将node 所在的目录，添加`PATH环境变量`里面，或者通过软连接的形式将`node`和`npm`链接到系统默认的`PATH目录`下的一个，以下分别介绍:  \n\n\t- 软连接方式  \n\t\t在终端执行`echo $PATH`可以获取`PATH变量`包含的内容，系统默认的`PATH环境变量`包括`/usr/local/bin`:`/usr/bin`:`/bin`:`/usr/local/sbin`:`/usr/sbin`:`/sbin`:，冒号为分隔符。所以我们可以将`node`和`npm`链接到`/usr/local/bin `目录执行如下命令  \n\n\t\t```bash\n\t\tln -s /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/node /usr/local/bin/node\n\t\tln -s /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/npm /usr/local/bin/npm\n\t\t```\n\n\t\t通过如此，就可以访问Node了，同时node部署也已经完毕。\n\n\t- 环境变量配置  \n\t\t在node目录下执行pwd 获取node所在的目录，要把这个目录添加到PATH环境变量\n\t\t执行su 输入密码切换到root用户。通过命令打开`vi /etc/profile`profile文件,添加如下代码:\n\n\t\t```bash\n\t\tPATH=$PATH:/home/kun/mysofltware/node-v0.10.26-linux-x64/bin\n\t\t```\n\n\t\t执行命令`source/etc/profile`可以使变量生效，然后执行`echo $PATH`，看看输出内容是否包含自己添加的内容\n\t\t然后到任意目录下去执行一次执行`node -v`,`npm -v`,尝试是否OK? \n\n**下载源码,手动编译二进制**\n\n- 安装编译环境,安装依赖\n- 进入`cd`源码路径,执行里面的`configure文件`,即`./configure --prefix=/`生成二进制文件路径.  \n\n\t> **命令解释:**`--prefix=/`用于指定安装路径,  \n\t若不指定prefix，则可执行文件默认放在`/usr /local/bin`，库文件默认放在`/usr/local/lib`，配置文件默认放在`/usr/local/etc`,其它的资源文件放在`/usr /local/share`。你要卸载这个程序，要么在原来的make目录下用一次`make uninstall`（前提是make文件指定过uninstall）,要么去上述目录里面把相关的文件一个个手工删掉。\n\t若指定prefix，直接删掉一个文件夹就够了。  \n\n- 运行`make`命令，这个是编译过程，运行的时间可能稍长一些\n- 执行`install`命令。如果在第第一步骤中配置的程序安装路径不在系统的环境量PATH中，需要自己添加（下面会介绍在centos下修改环境变量）\n- 关于源码的编译也可以参考[这篇博客](http://blog.csdn.net/zhaoweitco/article/details/12677089).\n\n### 安装chrome\n\n直接访问[官网](https://www.google.com/chrome/browser/desktop/index.html)下载Linux`.deb`安装包安装即可.\n\n也可先尝试运行如下代码：\n\n```bash\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\nsudo dpkg -i google-chrome-stable_current_amd64.deb\n```\n\n注意：若重启电脑后，chrome等软件提示：`账号登录信息已过期，需重新登录`，这是ubuntu的`密钥环`导致的；`bash`启动`密码和秘钥`，在`密码-登录`右键-`修改密码`，新密码置空即可。\n\n### 安装SS\n\n在未FQ之前,通过百度很难找到SS的教程,这时可以利用`简书`或`必应`搜索\n\n#### SS-qt5(GUI)\n\n建议不使用GUI版本,安装命令行工具即可,见下一节.\n\n- 安装\n\n\t```bash\n\tsudo add-apt-repository ppa:hzwhuang/ss-qt5  #加入源\n\tsudo apt-get update #更新源\n\tsudo apt-get install shadowsocks-qt5 #安装SS\n\t```\n\n- 参数设置\n\n\t```json   \n\t{\n\t\"server\":\"104.128.87.111\",\n\t\"server_port\":443,\n\t\"local_address\": \"127.0.0.1\",\n\t\"local_port\":1080,\n\t\"password\":\"Mjg5NTIzMz\",\n\t\"timeout\":600,\n\t\"method\":\"aes-256-cfb\"\n\t}\n\t```\n\n\t可以访问搬瓦工[国内镜像](http://banwagong.cn/)查看最新SS相关配置参数。另外,服务器端重新安装系统难道SS会更快?有待证实.\n\n- 全局代理设置\n\n\t`System Setting > Network > Network proxy > Method > ManualSocket Host 127.0.0.1 1080`。 备注：这样chrome就可以FQ了，但是firefox还需要进一步设置（此处略）。\n\n- PAC代理\n\n\t安装`genpac`\n\n\t```bash\n\tsudo pip install genpac\n\t```\n\n\t倘若提示没有`pip`命令，可以尝试输入`pip --help`，其他命令遇到类似情况同理。\n\n\t生成autoproxy.pac文件\n\n\t```bash\n\tgenpac -p \"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=\"autoproxy.pac\"\n\t```\n\n\t更改系统代理设置 `System settings > Network > Network ProxyMethod > AutomaticConfiguration URL 是 autoproxy.pac文件的路径，设置为/home/yaro/autoproxy.pac`\n\n#### SS或者SS-libev\n\n执行以下命令安装\n\n```bash\nsudo pip install shadowsocks\n```\n\n上述命令会同时安装`sslocal`和`ssserver`两个程序,客户端用前者,服务器用后者.\n\n可以用`whereis`(查找程序命令)查找`sslocal`位置\n\n```bash\nwhereis sslocal\n#默认返回如下:\nsslocal: /usr/local/bin/sslocal\n```\n\n创建配置文件\n\n```bash\nsudo vim /home/yaro/.yaro/shadowsocks/shadowsocks.json   ##创建.json文件,任意目录,内容如下:\n```\n\n```json\n{ \n\"server\":\"104.128.87.111\", \n\"server_port\":443, \n\"local_address\": \"127.0.0.1\", \n\"local_port\":1080,\n\"password\":\"Mjg5NTIzMz\", \n\"timeout\":600, \"\nmethod\":\"aes-256-cfb\" \n}\n```\n\n启动客户端\n\n```bash\nsslocal -c  /home/yaro/.yaro/shadowsocks/shadowsocks.json #在终端运行,不能停止不能关闭\nsudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json -d start #后台运行\n#其他参数可以`sslocal --help`.\n```\n\n开机启动\n\n> 早期的ubuntu版本可以通过写入`rc.local`的方式实现开机运行代码.\n> \n> ```bash\n> sudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json -d start\n> ```\n\nubuntu15.04后,`rc.local`无效,开始使用systemd管理开机启动,可通过写入服务的方式实现开机运行:\n\n注:`sslocal`初始位置为`/usr/local/bin/sslocal`.\n\n创建服务文件\n\n```bash\nsudo vim /lib/systemd/system/sslocal@myserver.service\n```\n\n内容如下:\n\n```bash\n[Unit]\nDescription=Shadowsocks Client Start\nAfter=network.target\n\n[Service]\nType=simple\nUser=yaro\nExecStart=/usr/local/bin/sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n```\n\n**注意:**地址记得用绝对地址,不要用`~/`地址.\n\n将这个文件软连接到`/etc/systemd/system/multi-user.target.wants/`\n\n```bash\nsudo ln -s /lib/systemd/system/sslocal@myserver.service /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service\n```\n\n查看软连接文件权限(需要可执行):\n\n```bash\nls -l /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service\n```\n\n重启电脑,OK! 访问google,或通过如下命令查看服务运行状态(查找问题)\n\n```bash\nsudo systemctl status sslocal@myserver.service\n```\n\n局部代理/全局代理设置同上.\n\n[参考1](https://www.linuxbabe.com/desktop-linux/how-to-install-and-use-shadowsocks-command-line-client)-ubuntu安装SS \n\n[参考2](http://www.linuxidc.com/Linux/2016-04/129727.htm)-Ubuntu systemd添加开机启动\n\n#### proxychains\n\nproxychains支持http/https/socks4/socks5代理方式之间的切换.\n\n安装\n\n```bash\nsudo apt install proxychains\n```\n\n配置\n\n```bash\nsudo vi /etc/proxychains.conf\n#将socks4 127.0.0.1 9095改为socks5  127.0.0.1 1080\n```\n\n使用\n\n```bash\nwget google.com   #直接连google\nproxychains wget google.com #通过sock5代理链接google\nsudo proxychains wget google.com #注意proxy要紧挨这功能命令\nsudo proxychains apt install typora #前提要能访问typora的资源站(先FQ)\n```\n\n其他说明\n\nproxychains配置文件中可以设置三种代理方式:动态代理(依次选择设定的代理方式,有一个可用即可),严格代理(依次选择,但是必须都能用),随机代理(随机选择设定的代理方式)\n\n类似软件:proxychains是只适用于linux/iOS系统,类似的还有polipo(让所有的程序全部走socks5代理),windows平台可以考虑privoxy.\n\n### 卸载不常用软件\n\n卸载libreoffice\n\n```bash\nsudo apt-get purge libreoffice-common\n```\n\n删除amazon链接\n\n```bash\nsudo apt purge unity-webapps-common\n```\n\n删除不用的软件\n\n```bash\nsudo apt-get purge thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install onboard deja-dup\n#上述软件以此是:邮件客户端 多媒体播放 音乐mp3播放 IM通讯 刻录光盘 扫描软件 麻将(gnome-mahjongg) 纸牌(aisleriot) 扫雷(gnome-mines) 象棋 bt下载软件 屏幕阅读器(gnome-orca) 自带浏览器 数字游戏 远程桌面 虚拟键盘(onboard) 备份软件\n```\n\n### 安装常用软件\n\n**常用软件:**sogou输入法/typora(可以用sublime插件实现MD)/坚果云/网易云音乐/sublime，以及源自带的vim(记得安装`vim-gnome`)/goldendict,终端工具zsh/oh-my-zsh([参考官网](https://github.com/robbyrussell/oh-my-zsh)).\n\n**安装方法**\n\n- 源自带的软件 `sudo apt-get install filename` 若是不知道软件名称，可以如下查看 `sudo dpkg -l *filename*`（`*`)为通配符\n\n- 第三方软件 下载`.deb`格式安装包，如下安装 `sudo dpkg -i filename`\n\n备注1:Goldendict的配置及字典可以[参考网站](https://blog.yuanbin.me/posts/2013/01/goldendictxia-san-da-you-zhi-ci-ku-shi-yong-xiao-ji.html)  \n备注2:sublime无法输入中文可以[参考网站1](https://github.com/lyfeyaj/sublime-text-imfix)和[参考网站2](http://www.jianshu.com/p/bf05fb3a4709)  \n备注3:sublime字体设置,打开`sublime`的`Preference-setting`在其中加入如下代码\n`{font_face\": \"Droid Sans Fallback\", \"font_size\": 14}`   \n备注4:查看中文字体名称可以输入`fc-list :lang=zh-cn`\n\n###设置开机启动常用项\n\n需要开机启动的项目如搜狗输入法（依托于fcitx，启动fcitx）/SS/坚果云等\n\n将相关程序复制到用户自定义的开机项即可,也可以参考SS章节中通过添加服务的方式实现开机启动.\n\n```bash\nsudo cp /usr/share/applications/fcitx.desktop ~/.config/autostart/fcitx.desktop\n```\n\n增加可执行权限\n\n```bash\nsudo chmod +x ~/.config/autostart/fctix.desktop\n```\n\n### 设置`~/`下文件名为英文\n\n在安装是若选择中文安装，文件夹全部为中文，如`下载`/`音乐`等，这在终端中很不方便输入。\n\n依次运行如下命令 \n\n```bash\nexport LANG=en_US\nxdg-user-dirs-gtk-update\nexport LANG=zh_CN\n```\n\n或者是通过设置-语言支持-设置英文，再重启/注销。\n\n### 卸载系统内置软件\n\n不需要的软件：firefox/libreoffic*/系统自带浏览器/邮件客户端/gedit等\n\n倘若不清楚软件的名称,可以 `sudo dpkg -l libreoffice*`\n\n或者,利用`tab`自动补全功能 `sudo apt purge libreoffice` 然后按`两次Tab`即可.\n\n### 安装思源字体\n\n思源字体可以[点击此处](https://github.com/adobe-fonts/source-han-sans/tree/release)下载\n\n将`思源字体`安装包放入`~/.fonts`重启即可.双击安装的话会安装在系统文件夹.\n\n话说系统自带的字体`Droid Sans Fallback`也挺好O(∩_∩)O哈哈~\n\n## 其他问题\n\n### Ubuntu出现了内部错误\n\n```bash\nsudo apt-get remove apport\n```\n\n### Ubuntu root 和user切换\n\n[参考网站1](http://www.cnblogs.com/weiweiqiao99/archive/2010/11/10/1873761.html)\n\n**从user切换到root用户**\n\nubuntu默认登录user,可以用`sudo`临时授权使用root权限;此时可以使用`sudo su`切换到root用户\n\n注意:默认的ubuntu的root用户没有固定密码,是动态随机变动的,直接使用`su`是不可以的,因为我们不知道root的密码.\n\n**从root用户切回user用户**\n\n使用`su yaro`即可,或输入`exit`,也可以`ctrl+D`快捷键.\n\n**给root设定一个密码**\n\n默认root用户无固定密码,且被锁定,可以通过`sudo passwd root`设定密码.\n\n**禁用/启用root登录**\n\n禁用:`sudo passwd -l root`(禁用而已,密码还在);\n\n启用:`sudo passwd -u root` .\n\n## Ubuntu 快捷键\n\n注：在普通 PC 上，Super 键通常就是 Win 键， Numpad 表示数字小键盘。\n\n**Launcher (启动器)**\n\n`Super`（按住）- 调用启动器。`Super-1` 或 `2`或 `3`直至`0`\\- 打开或聚焦到应用程序。`Super-T`\\- 打开垃圾箱。`Alt-F1`\\- 把键盘聚焦在启动器上.`Alt-F2`\\- 以“特殊模式”调用托盘，用来运行命令。`Ctrl-Alt-T` \\- 启动终端窗口。\n\n**Dash (托盘）**\n\n`Super`(敲击) - 敲击打开托盘。`Super-A`\\- 打开应用程序托盘。`Super-F` \\- 打开文件及文件夹托盘。\n\n**Panel (面板）**\n\nF10 - 打开面板上的第一个菜单。`Window Management` （窗口管理）`Super-?` \\- 扩展模式，缩小所有窗口到所有工作区。`Super-D` -最小化所有窗口; 再次使用该快捷键的话恢复所有窗口。（不起作用时，可以尝试再按住`Ctrl` ）\n\n**Window Placement （窗口放置）**\n\n假如你反复点击某个组合键，Unity 会循环改变窗口宽度，例如 `Ctrl-Alt-numpad 5`:`Ctrl-Alt-Numpad 7` \\- 放置窗口到屏幕左上角。`Ctrl-Alt-Numpad 8` \\- 放置窗口到屏幕上半部分。`Ctrl-Alt-Numpad 9` \\- 放置窗口到屏幕右上角。`Ctrl-Alt-Numpad 4` \\- 放置窗口到屏幕左侧。`Ctrl-Alt-Numpad 5` \\- 在屏幕中间位置居中/最大化窗口。`Ctrl-Alt-Numpad 6` \\- 放置窗口到屏幕右侧。`Ctrl-Alt-Numpad 1` \\- 放置窗口到屏幕左下角。`Ctrl-Alt-Numpad 2` \\- 放置窗口到屏幕下半部分。`Ctrl-Alt-Numpad 3` \\- 放置窗口到屏幕右下角。`Ctrl-Alt-Numpad 0` \\- 最大化窗口。\n\n**Workspace Management （工作区管理）**\n\n`Super-W` \\- 平铺模式列出所有窗口`Super-S` \\- 浏览模式，缩小所有工作区，让你管理窗口。`Ctrl-Alt-← / → / ↑ / ↓` \\- 切换工作区。`Ctrl-Alt-Shift-← / → / ↑ / ↓` \\- 放置窗口到新工作区。\n\n**Mouse Tricks （鼠标技巧）**\n\n最大化 - `拖动`窗口到顶部面板就会最大化该窗口。  \n最大化按钮上`中击` - 垂直最大化窗口。  \n最大化按钮上`右击` - 水平最大化窗口。  \n平铺 - `拖动`窗口到左边/右边边缘，会自动在屏幕的一边平铺窗口。  \n恢复 - 在顶部面板会把最大化的窗口的标题栏往下`拖动`会自动还原到原始大小。  \n在应用程序的启动器图标上`中击` - 如果之前已打开过此程序，此操作会为该程序再打开一个新的独立进程。  \n在窗口标题栏上`中击`（不是菜单）- 把当前窗口放置到所有窗口的最后面。  \n\n**Nautilus快捷键**\n\n`CTRL + 1`: 图标视图  \n`CTRL + 2`: 列表视图  \n`CTRL + T`: 新建标签页  \n`CTRL + W`: 关闭标签页  \n`CTRL + D` 收藏到书签  \n`CTRL + Q`: 退出  \n`Win+E`: 显示所有的工作空间，可轻松进行切换  \n`Win + Mousewheel`: 桌面上的缩放操作，使用滚轮鼠标操作更方便  \n\n**Terminal终端快捷键**\n\n`CTRL + ALT + T`: 打开终端  \n`TAB`: 自动补全命令或文件名  \n`CTRL + SHIFT + V`: 粘贴（Linux中不需要复制的动作，文本被选择就自动被复制）  \n`CTRL + SHIFT + T`: 新建标签页  \n`CTRL + D`: 关闭标签页  \n`CTRL + L`: 清楚屏幕  \n`CTRL + R` + 文本: 在输入历史中搜索  \n`CTRL + A`: 移动到行首  \n`CTRL + E`: 移动到行末  \n`CTRL + C`: 终止当前任务  \n`CTRL + Z`: 把当前任务放到后台运行（相当于运行命令时后面加&）  \n`~`: 表示用户目录路径  ","source":"_posts/Ubuntu安装及调试记录.md","raw":"---\ntitle: Ubuntu安装及调试记录\ndate: 2016-11-20 09:08:16\ntags:\n- Ubuntu安装\n- Ubuntu快捷键\n- Shandowsocks配置\n---\n老婆的笔记本有两个显卡,安装win10的时候总是自动更新显卡;但是同时安装两个显卡,重启之后立马黑屏,蛋好疼…没办法,只能试试linux系统了,网上参考了下,Ubuntu算是比较容易入门的了,于是乎就折腾了好几天.现在用着感觉还不错的说,嘿嘿^_^..本文主要是个人操作过程的记录,其中对于新手来说还是有很多坑的,亲们可以参考下.\n\n## 安装Ubuntu\n\nUbuntu[官网下载](http://cn.ubuntu.com/download/)镜像文件，可直接拖动链接到迅雷下载；\n\n制作启动U盘：一定使用要**使用最新版**的**[UltraISO 软碟通](http://cn.ezbsystems.com/ultraiso/)**,否则可能出现错误，原因参考[U盘刻录无法启动原因](http://www.ubuntukylin.com/news/shownews.php?lang=cn&id=362)；\n\n设置电脑BIOS（F2进入）通过U盘启动，倘若无法启动，可尝试开启UEFI；\n\n通过U盘安装Ubuntu.\n\n## 分区\n\n总的来说,linux的分区可以分为`系统分区`和`数据分区` ,`系统分区`包括`/`和`swap`, `数据分区`包括`/home`和`其他数据`\n\n分区建议:  \n根分区/（系统主要文件）大小建议50G，`swap`交换分区大小参考物理内存,数据`/home`分区500G，剩下空间分两个区不挂载\n\n我的实际分区情况：`/`40G，`swap`4g，`其他`全部给`home`分区。\n\n<!-- more -->\n\n## 配置及安装软件\n\n### 解决桌面闪屏问题\n\n倘若鼠标不间断闪动，鼠标可以移动到桌面右边界之外，可如下解决：`设置`=>`显示`=>`关闭unkwon display`即可。\n\n### ubuntu安装软件的常见方式\n\n软件安装参考[这个网页](http://www.cnblogs.com/dubaokun/p/3558848.html).\n\n**直接通过`apt-get`安装**\n\n有些软件都是包含在相应的库中,通过添加库,便可以直接安装.这种方法安装的程序版本可能不是最新版(比如`node.js`).\n\n**下载`.deb`安装包手动安装**\n\n通过手动或`wget`等命令下载安装包,调用`dpkg -i package`安装\n\n**直接下载二进制文件解压即可用**\n\n- 下载二进制文件(Binaries)\n- 下载后将安装包移动到要安装到的文件夹下，根据个人喜好设置即可,这里我放在了`/home/kun/mysofltware/ `下面\n- 解压到当前文件夹下运行 \n- 进入 解压后的目录bin目录下，执行ls会看到两个文件`node`,`npm`. 然后执行`./node -v `，如果显示出 版本号说明我们下载的程序包是没有问题的(这里以`node.js`的安装为例)  \n- 添加到PATH实现任意目录访问  \n\n\t> 因为 `/home/kun/mysofltware/node-v0.10.26-linux-x64/bin`这个目录是不在环境变量中的，所以只能到该目录下才能node的程序。如果在其他的目录下执行node命令的话 ，必须通过绝对路径访问才可以的.  \n\n\t> 如果要在任意目录可以访问的话，需要将node 所在的目录，添加`PATH环境变量`里面，或者通过软连接的形式将`node`和`npm`链接到系统默认的`PATH目录`下的一个，以下分别介绍:  \n\n\t- 软连接方式  \n\t\t在终端执行`echo $PATH`可以获取`PATH变量`包含的内容，系统默认的`PATH环境变量`包括`/usr/local/bin`:`/usr/bin`:`/bin`:`/usr/local/sbin`:`/usr/sbin`:`/sbin`:，冒号为分隔符。所以我们可以将`node`和`npm`链接到`/usr/local/bin `目录执行如下命令  \n\n\t\t```bash\n\t\tln -s /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/node /usr/local/bin/node\n\t\tln -s /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/npm /usr/local/bin/npm\n\t\t```\n\n\t\t通过如此，就可以访问Node了，同时node部署也已经完毕。\n\n\t- 环境变量配置  \n\t\t在node目录下执行pwd 获取node所在的目录，要把这个目录添加到PATH环境变量\n\t\t执行su 输入密码切换到root用户。通过命令打开`vi /etc/profile`profile文件,添加如下代码:\n\n\t\t```bash\n\t\tPATH=$PATH:/home/kun/mysofltware/node-v0.10.26-linux-x64/bin\n\t\t```\n\n\t\t执行命令`source/etc/profile`可以使变量生效，然后执行`echo $PATH`，看看输出内容是否包含自己添加的内容\n\t\t然后到任意目录下去执行一次执行`node -v`,`npm -v`,尝试是否OK? \n\n**下载源码,手动编译二进制**\n\n- 安装编译环境,安装依赖\n- 进入`cd`源码路径,执行里面的`configure文件`,即`./configure --prefix=/`生成二进制文件路径.  \n\n\t> **命令解释:**`--prefix=/`用于指定安装路径,  \n\t若不指定prefix，则可执行文件默认放在`/usr /local/bin`，库文件默认放在`/usr/local/lib`，配置文件默认放在`/usr/local/etc`,其它的资源文件放在`/usr /local/share`。你要卸载这个程序，要么在原来的make目录下用一次`make uninstall`（前提是make文件指定过uninstall）,要么去上述目录里面把相关的文件一个个手工删掉。\n\t若指定prefix，直接删掉一个文件夹就够了。  \n\n- 运行`make`命令，这个是编译过程，运行的时间可能稍长一些\n- 执行`install`命令。如果在第第一步骤中配置的程序安装路径不在系统的环境量PATH中，需要自己添加（下面会介绍在centos下修改环境变量）\n- 关于源码的编译也可以参考[这篇博客](http://blog.csdn.net/zhaoweitco/article/details/12677089).\n\n### 安装chrome\n\n直接访问[官网](https://www.google.com/chrome/browser/desktop/index.html)下载Linux`.deb`安装包安装即可.\n\n也可先尝试运行如下代码：\n\n```bash\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\nsudo dpkg -i google-chrome-stable_current_amd64.deb\n```\n\n注意：若重启电脑后，chrome等软件提示：`账号登录信息已过期，需重新登录`，这是ubuntu的`密钥环`导致的；`bash`启动`密码和秘钥`，在`密码-登录`右键-`修改密码`，新密码置空即可。\n\n### 安装SS\n\n在未FQ之前,通过百度很难找到SS的教程,这时可以利用`简书`或`必应`搜索\n\n#### SS-qt5(GUI)\n\n建议不使用GUI版本,安装命令行工具即可,见下一节.\n\n- 安装\n\n\t```bash\n\tsudo add-apt-repository ppa:hzwhuang/ss-qt5  #加入源\n\tsudo apt-get update #更新源\n\tsudo apt-get install shadowsocks-qt5 #安装SS\n\t```\n\n- 参数设置\n\n\t```json   \n\t{\n\t\"server\":\"104.128.87.111\",\n\t\"server_port\":443,\n\t\"local_address\": \"127.0.0.1\",\n\t\"local_port\":1080,\n\t\"password\":\"Mjg5NTIzMz\",\n\t\"timeout\":600,\n\t\"method\":\"aes-256-cfb\"\n\t}\n\t```\n\n\t可以访问搬瓦工[国内镜像](http://banwagong.cn/)查看最新SS相关配置参数。另外,服务器端重新安装系统难道SS会更快?有待证实.\n\n- 全局代理设置\n\n\t`System Setting > Network > Network proxy > Method > ManualSocket Host 127.0.0.1 1080`。 备注：这样chrome就可以FQ了，但是firefox还需要进一步设置（此处略）。\n\n- PAC代理\n\n\t安装`genpac`\n\n\t```bash\n\tsudo pip install genpac\n\t```\n\n\t倘若提示没有`pip`命令，可以尝试输入`pip --help`，其他命令遇到类似情况同理。\n\n\t生成autoproxy.pac文件\n\n\t```bash\n\tgenpac -p \"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=\"autoproxy.pac\"\n\t```\n\n\t更改系统代理设置 `System settings > Network > Network ProxyMethod > AutomaticConfiguration URL 是 autoproxy.pac文件的路径，设置为/home/yaro/autoproxy.pac`\n\n#### SS或者SS-libev\n\n执行以下命令安装\n\n```bash\nsudo pip install shadowsocks\n```\n\n上述命令会同时安装`sslocal`和`ssserver`两个程序,客户端用前者,服务器用后者.\n\n可以用`whereis`(查找程序命令)查找`sslocal`位置\n\n```bash\nwhereis sslocal\n#默认返回如下:\nsslocal: /usr/local/bin/sslocal\n```\n\n创建配置文件\n\n```bash\nsudo vim /home/yaro/.yaro/shadowsocks/shadowsocks.json   ##创建.json文件,任意目录,内容如下:\n```\n\n```json\n{ \n\"server\":\"104.128.87.111\", \n\"server_port\":443, \n\"local_address\": \"127.0.0.1\", \n\"local_port\":1080,\n\"password\":\"Mjg5NTIzMz\", \n\"timeout\":600, \"\nmethod\":\"aes-256-cfb\" \n}\n```\n\n启动客户端\n\n```bash\nsslocal -c  /home/yaro/.yaro/shadowsocks/shadowsocks.json #在终端运行,不能停止不能关闭\nsudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json -d start #后台运行\n#其他参数可以`sslocal --help`.\n```\n\n开机启动\n\n> 早期的ubuntu版本可以通过写入`rc.local`的方式实现开机运行代码.\n> \n> ```bash\n> sudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json -d start\n> ```\n\nubuntu15.04后,`rc.local`无效,开始使用systemd管理开机启动,可通过写入服务的方式实现开机运行:\n\n注:`sslocal`初始位置为`/usr/local/bin/sslocal`.\n\n创建服务文件\n\n```bash\nsudo vim /lib/systemd/system/sslocal@myserver.service\n```\n\n内容如下:\n\n```bash\n[Unit]\nDescription=Shadowsocks Client Start\nAfter=network.target\n\n[Service]\nType=simple\nUser=yaro\nExecStart=/usr/local/bin/sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n```\n\n**注意:**地址记得用绝对地址,不要用`~/`地址.\n\n将这个文件软连接到`/etc/systemd/system/multi-user.target.wants/`\n\n```bash\nsudo ln -s /lib/systemd/system/sslocal@myserver.service /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service\n```\n\n查看软连接文件权限(需要可执行):\n\n```bash\nls -l /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service\n```\n\n重启电脑,OK! 访问google,或通过如下命令查看服务运行状态(查找问题)\n\n```bash\nsudo systemctl status sslocal@myserver.service\n```\n\n局部代理/全局代理设置同上.\n\n[参考1](https://www.linuxbabe.com/desktop-linux/how-to-install-and-use-shadowsocks-command-line-client)-ubuntu安装SS \n\n[参考2](http://www.linuxidc.com/Linux/2016-04/129727.htm)-Ubuntu systemd添加开机启动\n\n#### proxychains\n\nproxychains支持http/https/socks4/socks5代理方式之间的切换.\n\n安装\n\n```bash\nsudo apt install proxychains\n```\n\n配置\n\n```bash\nsudo vi /etc/proxychains.conf\n#将socks4 127.0.0.1 9095改为socks5  127.0.0.1 1080\n```\n\n使用\n\n```bash\nwget google.com   #直接连google\nproxychains wget google.com #通过sock5代理链接google\nsudo proxychains wget google.com #注意proxy要紧挨这功能命令\nsudo proxychains apt install typora #前提要能访问typora的资源站(先FQ)\n```\n\n其他说明\n\nproxychains配置文件中可以设置三种代理方式:动态代理(依次选择设定的代理方式,有一个可用即可),严格代理(依次选择,但是必须都能用),随机代理(随机选择设定的代理方式)\n\n类似软件:proxychains是只适用于linux/iOS系统,类似的还有polipo(让所有的程序全部走socks5代理),windows平台可以考虑privoxy.\n\n### 卸载不常用软件\n\n卸载libreoffice\n\n```bash\nsudo apt-get purge libreoffice-common\n```\n\n删除amazon链接\n\n```bash\nsudo apt purge unity-webapps-common\n```\n\n删除不用的软件\n\n```bash\nsudo apt-get purge thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install onboard deja-dup\n#上述软件以此是:邮件客户端 多媒体播放 音乐mp3播放 IM通讯 刻录光盘 扫描软件 麻将(gnome-mahjongg) 纸牌(aisleriot) 扫雷(gnome-mines) 象棋 bt下载软件 屏幕阅读器(gnome-orca) 自带浏览器 数字游戏 远程桌面 虚拟键盘(onboard) 备份软件\n```\n\n### 安装常用软件\n\n**常用软件:**sogou输入法/typora(可以用sublime插件实现MD)/坚果云/网易云音乐/sublime，以及源自带的vim(记得安装`vim-gnome`)/goldendict,终端工具zsh/oh-my-zsh([参考官网](https://github.com/robbyrussell/oh-my-zsh)).\n\n**安装方法**\n\n- 源自带的软件 `sudo apt-get install filename` 若是不知道软件名称，可以如下查看 `sudo dpkg -l *filename*`（`*`)为通配符\n\n- 第三方软件 下载`.deb`格式安装包，如下安装 `sudo dpkg -i filename`\n\n备注1:Goldendict的配置及字典可以[参考网站](https://blog.yuanbin.me/posts/2013/01/goldendictxia-san-da-you-zhi-ci-ku-shi-yong-xiao-ji.html)  \n备注2:sublime无法输入中文可以[参考网站1](https://github.com/lyfeyaj/sublime-text-imfix)和[参考网站2](http://www.jianshu.com/p/bf05fb3a4709)  \n备注3:sublime字体设置,打开`sublime`的`Preference-setting`在其中加入如下代码\n`{font_face\": \"Droid Sans Fallback\", \"font_size\": 14}`   \n备注4:查看中文字体名称可以输入`fc-list :lang=zh-cn`\n\n###设置开机启动常用项\n\n需要开机启动的项目如搜狗输入法（依托于fcitx，启动fcitx）/SS/坚果云等\n\n将相关程序复制到用户自定义的开机项即可,也可以参考SS章节中通过添加服务的方式实现开机启动.\n\n```bash\nsudo cp /usr/share/applications/fcitx.desktop ~/.config/autostart/fcitx.desktop\n```\n\n增加可执行权限\n\n```bash\nsudo chmod +x ~/.config/autostart/fctix.desktop\n```\n\n### 设置`~/`下文件名为英文\n\n在安装是若选择中文安装，文件夹全部为中文，如`下载`/`音乐`等，这在终端中很不方便输入。\n\n依次运行如下命令 \n\n```bash\nexport LANG=en_US\nxdg-user-dirs-gtk-update\nexport LANG=zh_CN\n```\n\n或者是通过设置-语言支持-设置英文，再重启/注销。\n\n### 卸载系统内置软件\n\n不需要的软件：firefox/libreoffic*/系统自带浏览器/邮件客户端/gedit等\n\n倘若不清楚软件的名称,可以 `sudo dpkg -l libreoffice*`\n\n或者,利用`tab`自动补全功能 `sudo apt purge libreoffice` 然后按`两次Tab`即可.\n\n### 安装思源字体\n\n思源字体可以[点击此处](https://github.com/adobe-fonts/source-han-sans/tree/release)下载\n\n将`思源字体`安装包放入`~/.fonts`重启即可.双击安装的话会安装在系统文件夹.\n\n话说系统自带的字体`Droid Sans Fallback`也挺好O(∩_∩)O哈哈~\n\n## 其他问题\n\n### Ubuntu出现了内部错误\n\n```bash\nsudo apt-get remove apport\n```\n\n### Ubuntu root 和user切换\n\n[参考网站1](http://www.cnblogs.com/weiweiqiao99/archive/2010/11/10/1873761.html)\n\n**从user切换到root用户**\n\nubuntu默认登录user,可以用`sudo`临时授权使用root权限;此时可以使用`sudo su`切换到root用户\n\n注意:默认的ubuntu的root用户没有固定密码,是动态随机变动的,直接使用`su`是不可以的,因为我们不知道root的密码.\n\n**从root用户切回user用户**\n\n使用`su yaro`即可,或输入`exit`,也可以`ctrl+D`快捷键.\n\n**给root设定一个密码**\n\n默认root用户无固定密码,且被锁定,可以通过`sudo passwd root`设定密码.\n\n**禁用/启用root登录**\n\n禁用:`sudo passwd -l root`(禁用而已,密码还在);\n\n启用:`sudo passwd -u root` .\n\n## Ubuntu 快捷键\n\n注：在普通 PC 上，Super 键通常就是 Win 键， Numpad 表示数字小键盘。\n\n**Launcher (启动器)**\n\n`Super`（按住）- 调用启动器。`Super-1` 或 `2`或 `3`直至`0`\\- 打开或聚焦到应用程序。`Super-T`\\- 打开垃圾箱。`Alt-F1`\\- 把键盘聚焦在启动器上.`Alt-F2`\\- 以“特殊模式”调用托盘，用来运行命令。`Ctrl-Alt-T` \\- 启动终端窗口。\n\n**Dash (托盘）**\n\n`Super`(敲击) - 敲击打开托盘。`Super-A`\\- 打开应用程序托盘。`Super-F` \\- 打开文件及文件夹托盘。\n\n**Panel (面板）**\n\nF10 - 打开面板上的第一个菜单。`Window Management` （窗口管理）`Super-?` \\- 扩展模式，缩小所有窗口到所有工作区。`Super-D` -最小化所有窗口; 再次使用该快捷键的话恢复所有窗口。（不起作用时，可以尝试再按住`Ctrl` ）\n\n**Window Placement （窗口放置）**\n\n假如你反复点击某个组合键，Unity 会循环改变窗口宽度，例如 `Ctrl-Alt-numpad 5`:`Ctrl-Alt-Numpad 7` \\- 放置窗口到屏幕左上角。`Ctrl-Alt-Numpad 8` \\- 放置窗口到屏幕上半部分。`Ctrl-Alt-Numpad 9` \\- 放置窗口到屏幕右上角。`Ctrl-Alt-Numpad 4` \\- 放置窗口到屏幕左侧。`Ctrl-Alt-Numpad 5` \\- 在屏幕中间位置居中/最大化窗口。`Ctrl-Alt-Numpad 6` \\- 放置窗口到屏幕右侧。`Ctrl-Alt-Numpad 1` \\- 放置窗口到屏幕左下角。`Ctrl-Alt-Numpad 2` \\- 放置窗口到屏幕下半部分。`Ctrl-Alt-Numpad 3` \\- 放置窗口到屏幕右下角。`Ctrl-Alt-Numpad 0` \\- 最大化窗口。\n\n**Workspace Management （工作区管理）**\n\n`Super-W` \\- 平铺模式列出所有窗口`Super-S` \\- 浏览模式，缩小所有工作区，让你管理窗口。`Ctrl-Alt-← / → / ↑ / ↓` \\- 切换工作区。`Ctrl-Alt-Shift-← / → / ↑ / ↓` \\- 放置窗口到新工作区。\n\n**Mouse Tricks （鼠标技巧）**\n\n最大化 - `拖动`窗口到顶部面板就会最大化该窗口。  \n最大化按钮上`中击` - 垂直最大化窗口。  \n最大化按钮上`右击` - 水平最大化窗口。  \n平铺 - `拖动`窗口到左边/右边边缘，会自动在屏幕的一边平铺窗口。  \n恢复 - 在顶部面板会把最大化的窗口的标题栏往下`拖动`会自动还原到原始大小。  \n在应用程序的启动器图标上`中击` - 如果之前已打开过此程序，此操作会为该程序再打开一个新的独立进程。  \n在窗口标题栏上`中击`（不是菜单）- 把当前窗口放置到所有窗口的最后面。  \n\n**Nautilus快捷键**\n\n`CTRL + 1`: 图标视图  \n`CTRL + 2`: 列表视图  \n`CTRL + T`: 新建标签页  \n`CTRL + W`: 关闭标签页  \n`CTRL + D` 收藏到书签  \n`CTRL + Q`: 退出  \n`Win+E`: 显示所有的工作空间，可轻松进行切换  \n`Win + Mousewheel`: 桌面上的缩放操作，使用滚轮鼠标操作更方便  \n\n**Terminal终端快捷键**\n\n`CTRL + ALT + T`: 打开终端  \n`TAB`: 自动补全命令或文件名  \n`CTRL + SHIFT + V`: 粘贴（Linux中不需要复制的动作，文本被选择就自动被复制）  \n`CTRL + SHIFT + T`: 新建标签页  \n`CTRL + D`: 关闭标签页  \n`CTRL + L`: 清楚屏幕  \n`CTRL + R` + 文本: 在输入历史中搜索  \n`CTRL + A`: 移动到行首  \n`CTRL + E`: 移动到行末  \n`CTRL + C`: 终止当前任务  \n`CTRL + Z`: 把当前任务放到后台运行（相当于运行命令时后面加&）  \n`~`: 表示用户目录路径  ","slug":"Ubuntu安装及调试记录","published":1,"updated":"2016-11-27T07:03:55.088Z","_id":"civyon3yq0005umdfelgezkll","comments":1,"layout":"post","photos":[],"link":"","content":"<p>老婆的笔记本有两个显卡,安装win10的时候总是自动更新显卡;但是同时安装两个显卡,重启之后立马黑屏,蛋好疼…没办法,只能试试linux系统了,网上参考了下,Ubuntu算是比较容易入门的了,于是乎就折腾了好几天.现在用着感觉还不错的说,嘿嘿^_^..本文主要是个人操作过程的记录,其中对于新手来说还是有很多坑的,亲们可以参考下.</p>\n<h2 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h2><p>Ubuntu<a href=\"http://cn.ubuntu.com/download/\" target=\"_blank\" rel=\"external\">官网下载</a>镜像文件，可直接拖动链接到迅雷下载；</p>\n<p>制作启动U盘：一定使用要<strong>使用最新版</strong>的<strong><a href=\"http://cn.ezbsystems.com/ultraiso/\" target=\"_blank\" rel=\"external\">UltraISO 软碟通</a></strong>,否则可能出现错误，原因参考<a href=\"http://www.ubuntukylin.com/news/shownews.php?lang=cn&amp;id=362\" target=\"_blank\" rel=\"external\">U盘刻录无法启动原因</a>；</p>\n<p>设置电脑BIOS（F2进入）通过U盘启动，倘若无法启动，可尝试开启UEFI；</p>\n<p>通过U盘安装Ubuntu.</p>\n<h2 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h2><p>总的来说,linux的分区可以分为<code>系统分区</code>和<code>数据分区</code> ,<code>系统分区</code>包括<code>/</code>和<code>swap</code>, <code>数据分区</code>包括<code>/home</code>和<code>其他数据</code></p>\n<p>分区建议:<br>根分区/（系统主要文件）大小建议50G，<code>swap</code>交换分区大小参考物理内存,数据<code>/home</code>分区500G，剩下空间分两个区不挂载</p>\n<p>我的实际分区情况：<code>/</code>40G，<code>swap</code>4g，<code>其他</code>全部给<code>home</code>分区。</p>\n<a id=\"more\"></a>\n<h2 id=\"配置及安装软件\"><a href=\"#配置及安装软件\" class=\"headerlink\" title=\"配置及安装软件\"></a>配置及安装软件</h2><h3 id=\"解决桌面闪屏问题\"><a href=\"#解决桌面闪屏问题\" class=\"headerlink\" title=\"解决桌面闪屏问题\"></a>解决桌面闪屏问题</h3><p>倘若鼠标不间断闪动，鼠标可以移动到桌面右边界之外，可如下解决：<code>设置</code>=&gt;<code>显示</code>=&gt;<code>关闭unkwon display</code>即可。</p>\n<h3 id=\"ubuntu安装软件的常见方式\"><a href=\"#ubuntu安装软件的常见方式\" class=\"headerlink\" title=\"ubuntu安装软件的常见方式\"></a>ubuntu安装软件的常见方式</h3><p>软件安装参考<a href=\"http://www.cnblogs.com/dubaokun/p/3558848.html\" target=\"_blank\" rel=\"external\">这个网页</a>.</p>\n<p><strong>直接通过<code>apt-get</code>安装</strong></p>\n<p>有些软件都是包含在相应的库中,通过添加库,便可以直接安装.这种方法安装的程序版本可能不是最新版(比如<code>node.js</code>).</p>\n<p><strong>下载<code>.deb</code>安装包手动安装</strong></p>\n<p>通过手动或<code>wget</code>等命令下载安装包,调用<code>dpkg -i package</code>安装</p>\n<p><strong>直接下载二进制文件解压即可用</strong></p>\n<ul>\n<li>下载二进制文件(Binaries)</li>\n<li>下载后将安装包移动到要安装到的文件夹下，根据个人喜好设置即可,这里我放在了<code>/home/kun/mysofltware/</code>下面</li>\n<li>解压到当前文件夹下运行 </li>\n<li>进入 解压后的目录bin目录下，执行ls会看到两个文件<code>node</code>,<code>npm</code>. 然后执行<code>./node -v</code>，如果显示出 版本号说明我们下载的程序包是没有问题的(这里以<code>node.js</code>的安装为例)  </li>\n<li><p>添加到PATH实现任意目录访问  </p>\n<blockquote>\n<p>因为 <code>/home/kun/mysofltware/node-v0.10.26-linux-x64/bin</code>这个目录是不在环境变量中的，所以只能到该目录下才能node的程序。如果在其他的目录下执行node命令的话 ，必须通过绝对路径访问才可以的.  </p>\n<p>如果要在任意目录可以访问的话，需要将node 所在的目录，添加<code>PATH环境变量</code>里面，或者通过软连接的形式将<code>node</code>和<code>npm</code>链接到系统默认的<code>PATH目录</code>下的一个，以下分别介绍:  </p>\n</blockquote>\n<ul>\n<li><p>软连接方式<br>  在终端执行<code>echo $PATH</code>可以获取<code>PATH变量</code>包含的内容，系统默认的<code>PATH环境变量</code>包括<code>/usr/local/bin</code>:<code>/usr/bin</code>:<code>/bin</code>:<code>/usr/local/sbin</code>:<code>/usr/sbin</code>:<code>/sbin</code>:，冒号为分隔符。所以我们可以将<code>node</code>和<code>npm</code>链接到<code>/usr/local/bin</code>目录执行如下命令  </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln <span class=\"_\">-s</span> /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/node /usr/<span class=\"built_in\">local</span>/bin/node</div><div class=\"line\">ln <span class=\"_\">-s</span> /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/npm /usr/<span class=\"built_in\">local</span>/bin/npm</div></pre></td></tr></table></figure>\n<p>  通过如此，就可以访问Node了，同时node部署也已经完毕。</p>\n</li>\n<li><p>环境变量配置<br>  在node目录下执行pwd 获取node所在的目录，要把这个目录添加到PATH环境变量<br>  执行su 输入密码切换到root用户。通过命令打开<code>vi /etc/profile</code>profile文件,添加如下代码:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PATH=<span class=\"variable\">$PATH</span>:/home/kun/mysofltware/node-v0.10.26-linux-x64/bin</div></pre></td></tr></table></figure>\n<p>  执行命令<code>source/etc/profile</code>可以使变量生效，然后执行<code>echo $PATH</code>，看看输出内容是否包含自己添加的内容<br>  然后到任意目录下去执行一次执行<code>node -v</code>,<code>npm -v</code>,尝试是否OK? </p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>下载源码,手动编译二进制</strong></p>\n<ul>\n<li>安装编译环境,安装依赖</li>\n<li><p>进入<code>cd</code>源码路径,执行里面的<code>configure文件</code>,即<code>./configure --prefix=/</code>生成二进制文件路径.  </p>\n<blockquote>\n<p><strong>命令解释:</strong><code>--prefix=/</code>用于指定安装路径,<br>  若不指定prefix，则可执行文件默认放在<code>/usr /local/bin</code>，库文件默认放在<code>/usr/local/lib</code>，配置文件默认放在<code>/usr/local/etc</code>,其它的资源文件放在<code>/usr /local/share</code>。你要卸载这个程序，要么在原来的make目录下用一次<code>make uninstall</code>（前提是make文件指定过uninstall）,要么去上述目录里面把相关的文件一个个手工删掉。<br>  若指定prefix，直接删掉一个文件夹就够了。  </p>\n</blockquote>\n</li>\n<li><p>运行<code>make</code>命令，这个是编译过程，运行的时间可能稍长一些</p>\n</li>\n<li>执行<code>install</code>命令。如果在第第一步骤中配置的程序安装路径不在系统的环境量PATH中，需要自己添加（下面会介绍在centos下修改环境变量）</li>\n<li>关于源码的编译也可以参考<a href=\"http://blog.csdn.net/zhaoweitco/article/details/12677089\" target=\"_blank\" rel=\"external\">这篇博客</a>.</li>\n</ul>\n<h3 id=\"安装chrome\"><a href=\"#安装chrome\" class=\"headerlink\" title=\"安装chrome\"></a>安装chrome</h3><p>直接访问<a href=\"https://www.google.com/chrome/browser/desktop/index.html\" target=\"_blank\" rel=\"external\">官网</a>下载Linux<code>.deb</code>安装包安装即可.</p>\n<p>也可先尝试运行如下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</div><div class=\"line\">sudo dpkg -i google-chrome-stable_current_amd64.deb</div></pre></td></tr></table></figure>\n<p>注意：若重启电脑后，chrome等软件提示：<code>账号登录信息已过期，需重新登录</code>，这是ubuntu的<code>密钥环</code>导致的；<code>bash</code>启动<code>密码和秘钥</code>，在<code>密码-登录</code>右键-<code>修改密码</code>，新密码置空即可。</p>\n<h3 id=\"安装SS\"><a href=\"#安装SS\" class=\"headerlink\" title=\"安装SS\"></a>安装SS</h3><p>在未FQ之前,通过百度很难找到SS的教程,这时可以利用<code>简书</code>或<code>必应</code>搜索</p>\n<h4 id=\"SS-qt5-GUI\"><a href=\"#SS-qt5-GUI\" class=\"headerlink\" title=\"SS-qt5(GUI)\"></a>SS-qt5(GUI)</h4><p>建议不使用GUI版本,安装命令行工具即可,见下一节.</p>\n<ul>\n<li><p>安装</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:hzwhuang/ss-qt5  <span class=\"comment\">#加入源</span></div><div class=\"line\">sudo apt-get update <span class=\"comment\">#更新源</span></div><div class=\"line\">sudo apt-get install shadowsocks-qt5 <span class=\"comment\">#安装SS</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>参数设置</p>\n  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"attr\">\"server\"</span>:<span class=\"string\">\"104.128.87.111\"</span>,</div><div class=\"line\"><span class=\"attr\">\"server_port\"</span>:<span class=\"number\">443</span>,</div><div class=\"line\"><span class=\"attr\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\"><span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\"><span class=\"attr\">\"password\"</span>:<span class=\"string\">\"Mjg5NTIzMz\"</span>,</div><div class=\"line\"><span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</div><div class=\"line\"><span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  可以访问搬瓦工<a href=\"http://banwagong.cn/\" target=\"_blank\" rel=\"external\">国内镜像</a>查看最新SS相关配置参数。另外,服务器端重新安装系统难道SS会更快?有待证实.</p>\n</li>\n<li><p>全局代理设置</p>\n<p>  <code>System Setting &gt; Network &gt; Network proxy &gt; Method &gt; ManualSocket Host 127.0.0.1 1080</code>。 备注：这样chrome就可以FQ了，但是firefox还需要进一步设置（此处略）。</p>\n</li>\n<li><p>PAC代理</p>\n<p>  安装<code>genpac</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install genpac</div></pre></td></tr></table></figure>\n<p>  倘若提示没有<code>pip</code>命令，可以尝试输入<code>pip --help</code>，其他命令遇到类似情况同理。</p>\n<p>  生成autoproxy.pac文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">genpac -p <span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> --gfwlist-proxy=<span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=<span class=\"string\">\"autoproxy.pac\"</span></div></pre></td></tr></table></figure>\n<p>  更改系统代理设置 <code>System settings &gt; Network &gt; Network ProxyMethod &gt; AutomaticConfiguration URL 是 autoproxy.pac文件的路径，设置为/home/yaro/autoproxy.pac</code></p>\n</li>\n</ul>\n<h4 id=\"SS或者SS-libev\"><a href=\"#SS或者SS-libev\" class=\"headerlink\" title=\"SS或者SS-libev\"></a>SS或者SS-libev</h4><p>执行以下命令安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install shadowsocks</div></pre></td></tr></table></figure>\n<p>上述命令会同时安装<code>sslocal</code>和<code>ssserver</code>两个程序,客户端用前者,服务器用后者.</p>\n<p>可以用<code>whereis</code>(查找程序命令)查找<code>sslocal</code>位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">whereis sslocal</div><div class=\"line\"><span class=\"comment\">#默认返回如下:</span></div><div class=\"line\">sslocal: /usr/<span class=\"built_in\">local</span>/bin/sslocal</div></pre></td></tr></table></figure>\n<p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /home/yaro/.yaro/shadowsocks/shadowsocks.json   <span class=\"comment\">##创建.json文件,任意目录,内容如下:</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; </div><div class=\"line\">\"server\":\"104.128.87.111\", </div><div class=\"line\">\"server_port\":443, </div><div class=\"line\">\"local_address\": \"127.0.0.1\", </div><div class=\"line\">\"local_port\":1080,</div><div class=\"line\">\"password\":\"Mjg5NTIzMz\", </div><div class=\"line\">\"timeout\":600, \"</div><div class=\"line\">method\":\"aes-256-cfb\" </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>启动客户端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sslocal -c  /home/yaro/.yaro/shadowsocks/shadowsocks.json <span class=\"comment\">#在终端运行,不能停止不能关闭</span></div><div class=\"line\">sudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json <span class=\"_\">-d</span> start <span class=\"comment\">#后台运行</span></div><div class=\"line\"><span class=\"comment\">#其他参数可以`sslocal --help`.</span></div></pre></td></tr></table></figure>\n<p>开机启动</p>\n<blockquote>\n<p>早期的ubuntu版本可以通过写入<code>rc.local</code>的方式实现开机运行代码.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; sudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json <span class=\"_\">-d</span> start</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>ubuntu15.04后,<code>rc.local</code>无效,开始使用systemd管理开机启动,可通过写入服务的方式实现开机运行:</p>\n<p>注:<code>sslocal</code>初始位置为<code>/usr/local/bin/sslocal</code>.</p>\n<p>创建服务文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /lib/systemd/system/sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>内容如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Unit]</div><div class=\"line\">Description=Shadowsocks Client Start</div><div class=\"line\">After=network.target</div><div class=\"line\"></div><div class=\"line\">[Service]</div><div class=\"line\">Type=simple</div><div class=\"line\">User=yaro</div><div class=\"line\">ExecStart=/usr/<span class=\"built_in\">local</span>/bin/sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json</div><div class=\"line\"></div><div class=\"line\">[Install]</div><div class=\"line\">WantedBy=multi-user.target</div></pre></td></tr></table></figure>\n<p><strong>注意:</strong>地址记得用绝对地址,不要用<code>~/</code>地址.</p>\n<p>将这个文件软连接到<code>/etc/systemd/system/multi-user.target.wants/</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ln <span class=\"_\">-s</span> /lib/systemd/system/sslocal@myserver.service /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>查看软连接文件权限(需要可执行):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls <span class=\"_\">-l</span> /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>重启电脑,OK! 访问google,或通过如下命令查看服务运行状态(查找问题)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl status sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>局部代理/全局代理设置同上.</p>\n<p><a href=\"https://www.linuxbabe.com/desktop-linux/how-to-install-and-use-shadowsocks-command-line-client\" target=\"_blank\" rel=\"external\">参考1</a>-ubuntu安装SS </p>\n<p><a href=\"http://www.linuxidc.com/Linux/2016-04/129727.htm\" target=\"_blank\" rel=\"external\">参考2</a>-Ubuntu systemd添加开机启动</p>\n<h4 id=\"proxychains\"><a href=\"#proxychains\" class=\"headerlink\" title=\"proxychains\"></a>proxychains</h4><p>proxychains支持http/https/socks4/socks5代理方式之间的切换.</p>\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install proxychains</div></pre></td></tr></table></figure>\n<p>配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/proxychains.conf</div><div class=\"line\"><span class=\"comment\">#将socks4 127.0.0.1 9095改为socks5  127.0.0.1 1080</span></div></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget google.com   <span class=\"comment\">#直接连google</span></div><div class=\"line\">proxychains wget google.com <span class=\"comment\">#通过sock5代理链接google</span></div><div class=\"line\">sudo proxychains wget google.com <span class=\"comment\">#注意proxy要紧挨这功能命令</span></div><div class=\"line\">sudo proxychains apt install typora <span class=\"comment\">#前提要能访问typora的资源站(先FQ)</span></div></pre></td></tr></table></figure>\n<p>其他说明</p>\n<p>proxychains配置文件中可以设置三种代理方式:动态代理(依次选择设定的代理方式,有一个可用即可),严格代理(依次选择,但是必须都能用),随机代理(随机选择设定的代理方式)</p>\n<p>类似软件:proxychains是只适用于linux/iOS系统,类似的还有polipo(让所有的程序全部走socks5代理),windows平台可以考虑privoxy.</p>\n<h3 id=\"卸载不常用软件\"><a href=\"#卸载不常用软件\" class=\"headerlink\" title=\"卸载不常用软件\"></a>卸载不常用软件</h3><p>卸载libreoffice</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get purge libreoffice-common</div></pre></td></tr></table></figure>\n<p>删除amazon链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt purge unity-webapps-common</div></pre></td></tr></table></figure>\n<p>删除不用的软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get purge thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install onboard deja-dup</div><div class=\"line\"><span class=\"comment\">#上述软件以此是:邮件客户端 多媒体播放 音乐mp3播放 IM通讯 刻录光盘 扫描软件 麻将(gnome-mahjongg) 纸牌(aisleriot) 扫雷(gnome-mines) 象棋 bt下载软件 屏幕阅读器(gnome-orca) 自带浏览器 数字游戏 远程桌面 虚拟键盘(onboard) 备份软件</span></div></pre></td></tr></table></figure>\n<h3 id=\"安装常用软件\"><a href=\"#安装常用软件\" class=\"headerlink\" title=\"安装常用软件\"></a>安装常用软件</h3><p><strong>常用软件:</strong>sogou输入法/typora(可以用sublime插件实现MD)/坚果云/网易云音乐/sublime，以及源自带的vim(记得安装<code>vim-gnome</code>)/goldendict,终端工具zsh/oh-my-zsh(<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">参考官网</a>).</p>\n<p><strong>安装方法</strong></p>\n<ul>\n<li><p>源自带的软件 <code>sudo apt-get install filename</code> 若是不知道软件名称，可以如下查看 <code>sudo dpkg -l *filename*</code>（<code>*</code>)为通配符</p>\n</li>\n<li><p>第三方软件 下载<code>.deb</code>格式安装包，如下安装 <code>sudo dpkg -i filename</code></p>\n</li>\n</ul>\n<p>备注1:Goldendict的配置及字典可以<a href=\"https://blog.yuanbin.me/posts/2013/01/goldendictxia-san-da-you-zhi-ci-ku-shi-yong-xiao-ji.html\" target=\"_blank\" rel=\"external\">参考网站</a><br>备注2:sublime无法输入中文可以<a href=\"https://github.com/lyfeyaj/sublime-text-imfix\" target=\"_blank\" rel=\"external\">参考网站1</a>和<a href=\"http://www.jianshu.com/p/bf05fb3a4709\" target=\"_blank\" rel=\"external\">参考网站2</a><br>备注3:sublime字体设置,打开<code>sublime</code>的<code>Preference-setting</code>在其中加入如下代码<br><code>{font_face&quot;: &quot;Droid Sans Fallback&quot;, &quot;font_size&quot;: 14}</code><br>备注4:查看中文字体名称可以输入<code>fc-list :lang=zh-cn</code></p>\n<p>###设置开机启动常用项</p>\n<p>需要开机启动的项目如搜狗输入法（依托于fcitx，启动fcitx）/SS/坚果云等</p>\n<p>将相关程序复制到用户自定义的开机项即可,也可以参考SS章节中通过添加服务的方式实现开机启动.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo cp /usr/share/applications/fcitx.desktop ~/.config/autostart/fcitx.desktop</div></pre></td></tr></table></figure>\n<p>增加可执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod +x ~/.config/autostart/fctix.desktop</div></pre></td></tr></table></figure>\n<h3 id=\"设置-下文件名为英文\"><a href=\"#设置-下文件名为英文\" class=\"headerlink\" title=\"设置~/下文件名为英文\"></a>设置<code>~/</code>下文件名为英文</h3><p>在安装是若选择中文安装，文件夹全部为中文，如<code>下载</code>/<code>音乐</code>等，这在终端中很不方便输入。</p>\n<p>依次运行如下命令 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> LANG=en_US</div><div class=\"line\">xdg-user-dirs-gtk-update</div><div class=\"line\"><span class=\"built_in\">export</span> LANG=zh_CN</div></pre></td></tr></table></figure>\n<p>或者是通过设置-语言支持-设置英文，再重启/注销。</p>\n<h3 id=\"卸载系统内置软件\"><a href=\"#卸载系统内置软件\" class=\"headerlink\" title=\"卸载系统内置软件\"></a>卸载系统内置软件</h3><p>不需要的软件：firefox/libreoffic*/系统自带浏览器/邮件客户端/gedit等</p>\n<p>倘若不清楚软件的名称,可以 <code>sudo dpkg -l libreoffice*</code></p>\n<p>或者,利用<code>tab</code>自动补全功能 <code>sudo apt purge libreoffice</code> 然后按<code>两次Tab</code>即可.</p>\n<h3 id=\"安装思源字体\"><a href=\"#安装思源字体\" class=\"headerlink\" title=\"安装思源字体\"></a>安装思源字体</h3><p>思源字体可以<a href=\"https://github.com/adobe-fonts/source-han-sans/tree/release\" target=\"_blank\" rel=\"external\">点击此处</a>下载</p>\n<p>将<code>思源字体</code>安装包放入<code>~/.fonts</code>重启即可.双击安装的话会安装在系统文件夹.</p>\n<p>话说系统自带的字体<code>Droid Sans Fallback</code>也挺好O(∩_∩)O哈哈~</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><h3 id=\"Ubuntu出现了内部错误\"><a href=\"#Ubuntu出现了内部错误\" class=\"headerlink\" title=\"Ubuntu出现了内部错误\"></a>Ubuntu出现了内部错误</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get remove apport</div></pre></td></tr></table></figure>\n<h3 id=\"Ubuntu-root-和user切换\"><a href=\"#Ubuntu-root-和user切换\" class=\"headerlink\" title=\"Ubuntu root 和user切换\"></a>Ubuntu root 和user切换</h3><p><a href=\"http://www.cnblogs.com/weiweiqiao99/archive/2010/11/10/1873761.html\" target=\"_blank\" rel=\"external\">参考网站1</a></p>\n<p><strong>从user切换到root用户</strong></p>\n<p>ubuntu默认登录user,可以用<code>sudo</code>临时授权使用root权限;此时可以使用<code>sudo su</code>切换到root用户</p>\n<p>注意:默认的ubuntu的root用户没有固定密码,是动态随机变动的,直接使用<code>su</code>是不可以的,因为我们不知道root的密码.</p>\n<p><strong>从root用户切回user用户</strong></p>\n<p>使用<code>su yaro</code>即可,或输入<code>exit</code>,也可以<code>ctrl+D</code>快捷键.</p>\n<p><strong>给root设定一个密码</strong></p>\n<p>默认root用户无固定密码,且被锁定,可以通过<code>sudo passwd root</code>设定密码.</p>\n<p><strong>禁用/启用root登录</strong></p>\n<p>禁用:<code>sudo passwd -l root</code>(禁用而已,密码还在);</p>\n<p>启用:<code>sudo passwd -u root</code> .</p>\n<h2 id=\"Ubuntu-快捷键\"><a href=\"#Ubuntu-快捷键\" class=\"headerlink\" title=\"Ubuntu 快捷键\"></a>Ubuntu 快捷键</h2><p>注：在普通 PC 上，Super 键通常就是 Win 键， Numpad 表示数字小键盘。</p>\n<p><strong>Launcher (启动器)</strong></p>\n<p><code>Super</code>（按住）- 调用启动器。<code>Super-1</code> 或 <code>2</code>或 <code>3</code>直至<code>0</code>- 打开或聚焦到应用程序。<code>Super-T</code>- 打开垃圾箱。<code>Alt-F1</code>- 把键盘聚焦在启动器上.<code>Alt-F2</code>- 以“特殊模式”调用托盘，用来运行命令。<code>Ctrl-Alt-T</code> - 启动终端窗口。</p>\n<p><strong>Dash (托盘）</strong></p>\n<p><code>Super</code>(敲击) - 敲击打开托盘。<code>Super-A</code>- 打开应用程序托盘。<code>Super-F</code> - 打开文件及文件夹托盘。</p>\n<p><strong>Panel (面板）</strong></p>\n<p>F10 - 打开面板上的第一个菜单。<code>Window Management</code> （窗口管理）<code>Super-?</code> - 扩展模式，缩小所有窗口到所有工作区。<code>Super-D</code> -最小化所有窗口; 再次使用该快捷键的话恢复所有窗口。（不起作用时，可以尝试再按住<code>Ctrl</code> ）</p>\n<p><strong>Window Placement （窗口放置）</strong></p>\n<p>假如你反复点击某个组合键，Unity 会循环改变窗口宽度，例如 <code>Ctrl-Alt-numpad 5</code>:<code>Ctrl-Alt-Numpad 7</code> - 放置窗口到屏幕左上角。<code>Ctrl-Alt-Numpad 8</code> - 放置窗口到屏幕上半部分。<code>Ctrl-Alt-Numpad 9</code> - 放置窗口到屏幕右上角。<code>Ctrl-Alt-Numpad 4</code> - 放置窗口到屏幕左侧。<code>Ctrl-Alt-Numpad 5</code> - 在屏幕中间位置居中/最大化窗口。<code>Ctrl-Alt-Numpad 6</code> - 放置窗口到屏幕右侧。<code>Ctrl-Alt-Numpad 1</code> - 放置窗口到屏幕左下角。<code>Ctrl-Alt-Numpad 2</code> - 放置窗口到屏幕下半部分。<code>Ctrl-Alt-Numpad 3</code> - 放置窗口到屏幕右下角。<code>Ctrl-Alt-Numpad 0</code> - 最大化窗口。</p>\n<p><strong>Workspace Management （工作区管理）</strong></p>\n<p><code>Super-W</code> - 平铺模式列出所有窗口<code>Super-S</code> - 浏览模式，缩小所有工作区，让你管理窗口。<code>Ctrl-Alt-← / → / ↑ / ↓</code> - 切换工作区。<code>Ctrl-Alt-Shift-← / → / ↑ / ↓</code> - 放置窗口到新工作区。</p>\n<p><strong>Mouse Tricks （鼠标技巧）</strong></p>\n<p>最大化 - <code>拖动</code>窗口到顶部面板就会最大化该窗口。<br>最大化按钮上<code>中击</code> - 垂直最大化窗口。<br>最大化按钮上<code>右击</code> - 水平最大化窗口。<br>平铺 - <code>拖动</code>窗口到左边/右边边缘，会自动在屏幕的一边平铺窗口。<br>恢复 - 在顶部面板会把最大化的窗口的标题栏往下<code>拖动</code>会自动还原到原始大小。<br>在应用程序的启动器图标上<code>中击</code> - 如果之前已打开过此程序，此操作会为该程序再打开一个新的独立进程。<br>在窗口标题栏上<code>中击</code>（不是菜单）- 把当前窗口放置到所有窗口的最后面。  </p>\n<p><strong>Nautilus快捷键</strong></p>\n<p><code>CTRL + 1</code>: 图标视图<br><code>CTRL + 2</code>: 列表视图<br><code>CTRL + T</code>: 新建标签页<br><code>CTRL + W</code>: 关闭标签页<br><code>CTRL + D</code> 收藏到书签<br><code>CTRL + Q</code>: 退出<br><code>Win+E</code>: 显示所有的工作空间，可轻松进行切换<br><code>Win + Mousewheel</code>: 桌面上的缩放操作，使用滚轮鼠标操作更方便  </p>\n<p><strong>Terminal终端快捷键</strong></p>\n<p><code>CTRL + ALT + T</code>: 打开终端<br><code>TAB</code>: 自动补全命令或文件名<br><code>CTRL + SHIFT + V</code>: 粘贴（Linux中不需要复制的动作，文本被选择就自动被复制）<br><code>CTRL + SHIFT + T</code>: 新建标签页<br><code>CTRL + D</code>: 关闭标签页<br><code>CTRL + L</code>: 清楚屏幕<br><code>CTRL + R</code> + 文本: 在输入历史中搜索<br><code>CTRL + A</code>: 移动到行首<br><code>CTRL + E</code>: 移动到行末<br><code>CTRL + C</code>: 终止当前任务<br><code>CTRL + Z</code>: 把当前任务放到后台运行（相当于运行命令时后面加&amp;）<br><code>~</code>: 表示用户目录路径  </p>\n","excerpt":"<p>老婆的笔记本有两个显卡,安装win10的时候总是自动更新显卡;但是同时安装两个显卡,重启之后立马黑屏,蛋好疼…没办法,只能试试linux系统了,网上参考了下,Ubuntu算是比较容易入门的了,于是乎就折腾了好几天.现在用着感觉还不错的说,嘿嘿^_^..本文主要是个人操作过程的记录,其中对于新手来说还是有很多坑的,亲们可以参考下.</p>\n<h2 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h2><p>Ubuntu<a href=\"http://cn.ubuntu.com/download/\">官网下载</a>镜像文件，可直接拖动链接到迅雷下载；</p>\n<p>制作启动U盘：一定使用要<strong>使用最新版</strong>的<strong><a href=\"http://cn.ezbsystems.com/ultraiso/\">UltraISO 软碟通</a></strong>,否则可能出现错误，原因参考<a href=\"http://www.ubuntukylin.com/news/shownews.php?lang=cn&amp;id=362\">U盘刻录无法启动原因</a>；</p>\n<p>设置电脑BIOS（F2进入）通过U盘启动，倘若无法启动，可尝试开启UEFI；</p>\n<p>通过U盘安装Ubuntu.</p>\n<h2 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h2><p>总的来说,linux的分区可以分为<code>系统分区</code>和<code>数据分区</code> ,<code>系统分区</code>包括<code>/</code>和<code>swap</code>, <code>数据分区</code>包括<code>/home</code>和<code>其他数据</code></p>\n<p>分区建议:<br>根分区/（系统主要文件）大小建议50G，<code>swap</code>交换分区大小参考物理内存,数据<code>/home</code>分区500G，剩下空间分两个区不挂载</p>\n<p>我的实际分区情况：<code>/</code>40G，<code>swap</code>4g，<code>其他</code>全部给<code>home</code>分区。</p>","more":"<h2 id=\"配置及安装软件\"><a href=\"#配置及安装软件\" class=\"headerlink\" title=\"配置及安装软件\"></a>配置及安装软件</h2><h3 id=\"解决桌面闪屏问题\"><a href=\"#解决桌面闪屏问题\" class=\"headerlink\" title=\"解决桌面闪屏问题\"></a>解决桌面闪屏问题</h3><p>倘若鼠标不间断闪动，鼠标可以移动到桌面右边界之外，可如下解决：<code>设置</code>=&gt;<code>显示</code>=&gt;<code>关闭unkwon display</code>即可。</p>\n<h3 id=\"ubuntu安装软件的常见方式\"><a href=\"#ubuntu安装软件的常见方式\" class=\"headerlink\" title=\"ubuntu安装软件的常见方式\"></a>ubuntu安装软件的常见方式</h3><p>软件安装参考<a href=\"http://www.cnblogs.com/dubaokun/p/3558848.html\">这个网页</a>.</p>\n<p><strong>直接通过<code>apt-get</code>安装</strong></p>\n<p>有些软件都是包含在相应的库中,通过添加库,便可以直接安装.这种方法安装的程序版本可能不是最新版(比如<code>node.js</code>).</p>\n<p><strong>下载<code>.deb</code>安装包手动安装</strong></p>\n<p>通过手动或<code>wget</code>等命令下载安装包,调用<code>dpkg -i package</code>安装</p>\n<p><strong>直接下载二进制文件解压即可用</strong></p>\n<ul>\n<li>下载二进制文件(Binaries)</li>\n<li>下载后将安装包移动到要安装到的文件夹下，根据个人喜好设置即可,这里我放在了<code>/home/kun/mysofltware/</code>下面</li>\n<li>解压到当前文件夹下运行 </li>\n<li>进入 解压后的目录bin目录下，执行ls会看到两个文件<code>node</code>,<code>npm</code>. 然后执行<code>./node -v</code>，如果显示出 版本号说明我们下载的程序包是没有问题的(这里以<code>node.js</code>的安装为例)  </li>\n<li><p>添加到PATH实现任意目录访问  </p>\n<blockquote>\n<p>因为 <code>/home/kun/mysofltware/node-v0.10.26-linux-x64/bin</code>这个目录是不在环境变量中的，所以只能到该目录下才能node的程序。如果在其他的目录下执行node命令的话 ，必须通过绝对路径访问才可以的.  </p>\n<p>如果要在任意目录可以访问的话，需要将node 所在的目录，添加<code>PATH环境变量</code>里面，或者通过软连接的形式将<code>node</code>和<code>npm</code>链接到系统默认的<code>PATH目录</code>下的一个，以下分别介绍:  </p>\n</blockquote>\n<ul>\n<li><p>软连接方式<br>  在终端执行<code>echo $PATH</code>可以获取<code>PATH变量</code>包含的内容，系统默认的<code>PATH环境变量</code>包括<code>/usr/local/bin</code>:<code>/usr/bin</code>:<code>/bin</code>:<code>/usr/local/sbin</code>:<code>/usr/sbin</code>:<code>/sbin</code>:，冒号为分隔符。所以我们可以将<code>node</code>和<code>npm</code>链接到<code>/usr/local/bin</code>目录执行如下命令  </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln <span class=\"_\">-s</span> /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/node /usr/<span class=\"built_in\">local</span>/bin/node</div><div class=\"line\">ln <span class=\"_\">-s</span> /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/npm /usr/<span class=\"built_in\">local</span>/bin/npm</div></pre></td></tr></table></figure>\n<p>  通过如此，就可以访问Node了，同时node部署也已经完毕。</p>\n</li>\n<li><p>环境变量配置<br>  在node目录下执行pwd 获取node所在的目录，要把这个目录添加到PATH环境变量<br>  执行su 输入密码切换到root用户。通过命令打开<code>vi /etc/profile</code>profile文件,添加如下代码:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PATH=<span class=\"variable\">$PATH</span>:/home/kun/mysofltware/node-v0.10.26-linux-x64/bin</div></pre></td></tr></table></figure>\n<p>  执行命令<code>source/etc/profile</code>可以使变量生效，然后执行<code>echo $PATH</code>，看看输出内容是否包含自己添加的内容<br>  然后到任意目录下去执行一次执行<code>node -v</code>,<code>npm -v</code>,尝试是否OK? </p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>下载源码,手动编译二进制</strong></p>\n<ul>\n<li>安装编译环境,安装依赖</li>\n<li><p>进入<code>cd</code>源码路径,执行里面的<code>configure文件</code>,即<code>./configure --prefix=/</code>生成二进制文件路径.  </p>\n<blockquote>\n<p><strong>命令解释:</strong><code>--prefix=/</code>用于指定安装路径,<br>  若不指定prefix，则可执行文件默认放在<code>/usr /local/bin</code>，库文件默认放在<code>/usr/local/lib</code>，配置文件默认放在<code>/usr/local/etc</code>,其它的资源文件放在<code>/usr /local/share</code>。你要卸载这个程序，要么在原来的make目录下用一次<code>make uninstall</code>（前提是make文件指定过uninstall）,要么去上述目录里面把相关的文件一个个手工删掉。<br>  若指定prefix，直接删掉一个文件夹就够了。  </p>\n</blockquote>\n</li>\n<li><p>运行<code>make</code>命令，这个是编译过程，运行的时间可能稍长一些</p>\n</li>\n<li>执行<code>install</code>命令。如果在第第一步骤中配置的程序安装路径不在系统的环境量PATH中，需要自己添加（下面会介绍在centos下修改环境变量）</li>\n<li>关于源码的编译也可以参考<a href=\"http://blog.csdn.net/zhaoweitco/article/details/12677089\">这篇博客</a>.</li>\n</ul>\n<h3 id=\"安装chrome\"><a href=\"#安装chrome\" class=\"headerlink\" title=\"安装chrome\"></a>安装chrome</h3><p>直接访问<a href=\"https://www.google.com/chrome/browser/desktop/index.html\">官网</a>下载Linux<code>.deb</code>安装包安装即可.</p>\n<p>也可先尝试运行如下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</div><div class=\"line\">sudo dpkg -i google-chrome-stable_current_amd64.deb</div></pre></td></tr></table></figure>\n<p>注意：若重启电脑后，chrome等软件提示：<code>账号登录信息已过期，需重新登录</code>，这是ubuntu的<code>密钥环</code>导致的；<code>bash</code>启动<code>密码和秘钥</code>，在<code>密码-登录</code>右键-<code>修改密码</code>，新密码置空即可。</p>\n<h3 id=\"安装SS\"><a href=\"#安装SS\" class=\"headerlink\" title=\"安装SS\"></a>安装SS</h3><p>在未FQ之前,通过百度很难找到SS的教程,这时可以利用<code>简书</code>或<code>必应</code>搜索</p>\n<h4 id=\"SS-qt5-GUI\"><a href=\"#SS-qt5-GUI\" class=\"headerlink\" title=\"SS-qt5(GUI)\"></a>SS-qt5(GUI)</h4><p>建议不使用GUI版本,安装命令行工具即可,见下一节.</p>\n<ul>\n<li><p>安装</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:hzwhuang/ss-qt5  <span class=\"comment\">#加入源</span></div><div class=\"line\">sudo apt-get update <span class=\"comment\">#更新源</span></div><div class=\"line\">sudo apt-get install shadowsocks-qt5 <span class=\"comment\">#安装SS</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>参数设置</p>\n  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"attr\">\"server\"</span>:<span class=\"string\">\"104.128.87.111\"</span>,</div><div class=\"line\"><span class=\"attr\">\"server_port\"</span>:<span class=\"number\">443</span>,</div><div class=\"line\"><span class=\"attr\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\"><span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\"><span class=\"attr\">\"password\"</span>:<span class=\"string\">\"Mjg5NTIzMz\"</span>,</div><div class=\"line\"><span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</div><div class=\"line\"><span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  可以访问搬瓦工<a href=\"http://banwagong.cn/\">国内镜像</a>查看最新SS相关配置参数。另外,服务器端重新安装系统难道SS会更快?有待证实.</p>\n</li>\n<li><p>全局代理设置</p>\n<p>  <code>System Setting &gt; Network &gt; Network proxy &gt; Method &gt; ManualSocket Host 127.0.0.1 1080</code>。 备注：这样chrome就可以FQ了，但是firefox还需要进一步设置（此处略）。</p>\n</li>\n<li><p>PAC代理</p>\n<p>  安装<code>genpac</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install genpac</div></pre></td></tr></table></figure>\n<p>  倘若提示没有<code>pip</code>命令，可以尝试输入<code>pip --help</code>，其他命令遇到类似情况同理。</p>\n<p>  生成autoproxy.pac文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">genpac -p <span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> --gfwlist-proxy=<span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=<span class=\"string\">\"autoproxy.pac\"</span></div></pre></td></tr></table></figure>\n<p>  更改系统代理设置 <code>System settings &gt; Network &gt; Network ProxyMethod &gt; AutomaticConfiguration URL 是 autoproxy.pac文件的路径，设置为/home/yaro/autoproxy.pac</code></p>\n</li>\n</ul>\n<h4 id=\"SS或者SS-libev\"><a href=\"#SS或者SS-libev\" class=\"headerlink\" title=\"SS或者SS-libev\"></a>SS或者SS-libev</h4><p>执行以下命令安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install shadowsocks</div></pre></td></tr></table></figure>\n<p>上述命令会同时安装<code>sslocal</code>和<code>ssserver</code>两个程序,客户端用前者,服务器用后者.</p>\n<p>可以用<code>whereis</code>(查找程序命令)查找<code>sslocal</code>位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">whereis sslocal</div><div class=\"line\"><span class=\"comment\">#默认返回如下:</span></div><div class=\"line\">sslocal: /usr/<span class=\"built_in\">local</span>/bin/sslocal</div></pre></td></tr></table></figure>\n<p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /home/yaro/.yaro/shadowsocks/shadowsocks.json   <span class=\"comment\">##创建.json文件,任意目录,内容如下:</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; </div><div class=\"line\">\"server\":\"104.128.87.111\", </div><div class=\"line\">\"server_port\":443, </div><div class=\"line\">\"local_address\": \"127.0.0.1\", </div><div class=\"line\">\"local_port\":1080,</div><div class=\"line\">\"password\":\"Mjg5NTIzMz\", </div><div class=\"line\">\"timeout\":600, \"</div><div class=\"line\">method\":\"aes-256-cfb\" </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>启动客户端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sslocal -c  /home/yaro/.yaro/shadowsocks/shadowsocks.json <span class=\"comment\">#在终端运行,不能停止不能关闭</span></div><div class=\"line\">sudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json <span class=\"_\">-d</span> start <span class=\"comment\">#后台运行</span></div><div class=\"line\"><span class=\"comment\">#其他参数可以`sslocal --help`.</span></div></pre></td></tr></table></figure>\n<p>开机启动</p>\n<blockquote>\n<p>早期的ubuntu版本可以通过写入<code>rc.local</code>的方式实现开机运行代码.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; sudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json <span class=\"_\">-d</span> start</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>ubuntu15.04后,<code>rc.local</code>无效,开始使用systemd管理开机启动,可通过写入服务的方式实现开机运行:</p>\n<p>注:<code>sslocal</code>初始位置为<code>/usr/local/bin/sslocal</code>.</p>\n<p>创建服务文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /lib/systemd/system/sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>内容如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Unit]</div><div class=\"line\">Description=Shadowsocks Client Start</div><div class=\"line\">After=network.target</div><div class=\"line\"></div><div class=\"line\">[Service]</div><div class=\"line\">Type=simple</div><div class=\"line\">User=yaro</div><div class=\"line\">ExecStart=/usr/<span class=\"built_in\">local</span>/bin/sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json</div><div class=\"line\"></div><div class=\"line\">[Install]</div><div class=\"line\">WantedBy=multi-user.target</div></pre></td></tr></table></figure>\n<p><strong>注意:</strong>地址记得用绝对地址,不要用<code>~/</code>地址.</p>\n<p>将这个文件软连接到<code>/etc/systemd/system/multi-user.target.wants/</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ln <span class=\"_\">-s</span> /lib/systemd/system/sslocal@myserver.service /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>查看软连接文件权限(需要可执行):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls <span class=\"_\">-l</span> /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>重启电脑,OK! 访问google,或通过如下命令查看服务运行状态(查找问题)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl status sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>局部代理/全局代理设置同上.</p>\n<p><a href=\"https://www.linuxbabe.com/desktop-linux/how-to-install-and-use-shadowsocks-command-line-client\">参考1</a>-ubuntu安装SS </p>\n<p><a href=\"http://www.linuxidc.com/Linux/2016-04/129727.htm\">参考2</a>-Ubuntu systemd添加开机启动</p>\n<h4 id=\"proxychains\"><a href=\"#proxychains\" class=\"headerlink\" title=\"proxychains\"></a>proxychains</h4><p>proxychains支持http/https/socks4/socks5代理方式之间的切换.</p>\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install proxychains</div></pre></td></tr></table></figure>\n<p>配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/proxychains.conf</div><div class=\"line\"><span class=\"comment\">#将socks4 127.0.0.1 9095改为socks5  127.0.0.1 1080</span></div></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget google.com   <span class=\"comment\">#直接连google</span></div><div class=\"line\">proxychains wget google.com <span class=\"comment\">#通过sock5代理链接google</span></div><div class=\"line\">sudo proxychains wget google.com <span class=\"comment\">#注意proxy要紧挨这功能命令</span></div><div class=\"line\">sudo proxychains apt install typora <span class=\"comment\">#前提要能访问typora的资源站(先FQ)</span></div></pre></td></tr></table></figure>\n<p>其他说明</p>\n<p>proxychains配置文件中可以设置三种代理方式:动态代理(依次选择设定的代理方式,有一个可用即可),严格代理(依次选择,但是必须都能用),随机代理(随机选择设定的代理方式)</p>\n<p>类似软件:proxychains是只适用于linux/iOS系统,类似的还有polipo(让所有的程序全部走socks5代理),windows平台可以考虑privoxy.</p>\n<h3 id=\"卸载不常用软件\"><a href=\"#卸载不常用软件\" class=\"headerlink\" title=\"卸载不常用软件\"></a>卸载不常用软件</h3><p>卸载libreoffice</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get purge libreoffice-common</div></pre></td></tr></table></figure>\n<p>删除amazon链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt purge unity-webapps-common</div></pre></td></tr></table></figure>\n<p>删除不用的软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get purge thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install onboard deja-dup</div><div class=\"line\"><span class=\"comment\">#上述软件以此是:邮件客户端 多媒体播放 音乐mp3播放 IM通讯 刻录光盘 扫描软件 麻将(gnome-mahjongg) 纸牌(aisleriot) 扫雷(gnome-mines) 象棋 bt下载软件 屏幕阅读器(gnome-orca) 自带浏览器 数字游戏 远程桌面 虚拟键盘(onboard) 备份软件</span></div></pre></td></tr></table></figure>\n<h3 id=\"安装常用软件\"><a href=\"#安装常用软件\" class=\"headerlink\" title=\"安装常用软件\"></a>安装常用软件</h3><p><strong>常用软件:</strong>sogou输入法/typora(可以用sublime插件实现MD)/坚果云/网易云音乐/sublime，以及源自带的vim(记得安装<code>vim-gnome</code>)/goldendict,终端工具zsh/oh-my-zsh(<a href=\"https://github.com/robbyrussell/oh-my-zsh\">参考官网</a>).</p>\n<p><strong>安装方法</strong></p>\n<ul>\n<li><p>源自带的软件 <code>sudo apt-get install filename</code> 若是不知道软件名称，可以如下查看 <code>sudo dpkg -l *filename*</code>（<code>*</code>)为通配符</p>\n</li>\n<li><p>第三方软件 下载<code>.deb</code>格式安装包，如下安装 <code>sudo dpkg -i filename</code></p>\n</li>\n</ul>\n<p>备注1:Goldendict的配置及字典可以<a href=\"https://blog.yuanbin.me/posts/2013/01/goldendictxia-san-da-you-zhi-ci-ku-shi-yong-xiao-ji.html\">参考网站</a><br>备注2:sublime无法输入中文可以<a href=\"https://github.com/lyfeyaj/sublime-text-imfix\">参考网站1</a>和<a href=\"http://www.jianshu.com/p/bf05fb3a4709\">参考网站2</a><br>备注3:sublime字体设置,打开<code>sublime</code>的<code>Preference-setting</code>在其中加入如下代码<br><code>{font_face&quot;: &quot;Droid Sans Fallback&quot;, &quot;font_size&quot;: 14}</code><br>备注4:查看中文字体名称可以输入<code>fc-list :lang=zh-cn</code></p>\n<p>###设置开机启动常用项</p>\n<p>需要开机启动的项目如搜狗输入法（依托于fcitx，启动fcitx）/SS/坚果云等</p>\n<p>将相关程序复制到用户自定义的开机项即可,也可以参考SS章节中通过添加服务的方式实现开机启动.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo cp /usr/share/applications/fcitx.desktop ~/.config/autostart/fcitx.desktop</div></pre></td></tr></table></figure>\n<p>增加可执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod +x ~/.config/autostart/fctix.desktop</div></pre></td></tr></table></figure>\n<h3 id=\"设置-下文件名为英文\"><a href=\"#设置-下文件名为英文\" class=\"headerlink\" title=\"设置~/下文件名为英文\"></a>设置<code>~/</code>下文件名为英文</h3><p>在安装是若选择中文安装，文件夹全部为中文，如<code>下载</code>/<code>音乐</code>等，这在终端中很不方便输入。</p>\n<p>依次运行如下命令 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> LANG=en_US</div><div class=\"line\">xdg-user-dirs-gtk-update</div><div class=\"line\"><span class=\"built_in\">export</span> LANG=zh_CN</div></pre></td></tr></table></figure>\n<p>或者是通过设置-语言支持-设置英文，再重启/注销。</p>\n<h3 id=\"卸载系统内置软件\"><a href=\"#卸载系统内置软件\" class=\"headerlink\" title=\"卸载系统内置软件\"></a>卸载系统内置软件</h3><p>不需要的软件：firefox/libreoffic*/系统自带浏览器/邮件客户端/gedit等</p>\n<p>倘若不清楚软件的名称,可以 <code>sudo dpkg -l libreoffice*</code></p>\n<p>或者,利用<code>tab</code>自动补全功能 <code>sudo apt purge libreoffice</code> 然后按<code>两次Tab</code>即可.</p>\n<h3 id=\"安装思源字体\"><a href=\"#安装思源字体\" class=\"headerlink\" title=\"安装思源字体\"></a>安装思源字体</h3><p>思源字体可以<a href=\"https://github.com/adobe-fonts/source-han-sans/tree/release\">点击此处</a>下载</p>\n<p>将<code>思源字体</code>安装包放入<code>~/.fonts</code>重启即可.双击安装的话会安装在系统文件夹.</p>\n<p>话说系统自带的字体<code>Droid Sans Fallback</code>也挺好O(∩_∩)O哈哈~</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><h3 id=\"Ubuntu出现了内部错误\"><a href=\"#Ubuntu出现了内部错误\" class=\"headerlink\" title=\"Ubuntu出现了内部错误\"></a>Ubuntu出现了内部错误</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get remove apport</div></pre></td></tr></table></figure>\n<h3 id=\"Ubuntu-root-和user切换\"><a href=\"#Ubuntu-root-和user切换\" class=\"headerlink\" title=\"Ubuntu root 和user切换\"></a>Ubuntu root 和user切换</h3><p><a href=\"http://www.cnblogs.com/weiweiqiao99/archive/2010/11/10/1873761.html\">参考网站1</a></p>\n<p><strong>从user切换到root用户</strong></p>\n<p>ubuntu默认登录user,可以用<code>sudo</code>临时授权使用root权限;此时可以使用<code>sudo su</code>切换到root用户</p>\n<p>注意:默认的ubuntu的root用户没有固定密码,是动态随机变动的,直接使用<code>su</code>是不可以的,因为我们不知道root的密码.</p>\n<p><strong>从root用户切回user用户</strong></p>\n<p>使用<code>su yaro</code>即可,或输入<code>exit</code>,也可以<code>ctrl+D</code>快捷键.</p>\n<p><strong>给root设定一个密码</strong></p>\n<p>默认root用户无固定密码,且被锁定,可以通过<code>sudo passwd root</code>设定密码.</p>\n<p><strong>禁用/启用root登录</strong></p>\n<p>禁用:<code>sudo passwd -l root</code>(禁用而已,密码还在);</p>\n<p>启用:<code>sudo passwd -u root</code> .</p>\n<h2 id=\"Ubuntu-快捷键\"><a href=\"#Ubuntu-快捷键\" class=\"headerlink\" title=\"Ubuntu 快捷键\"></a>Ubuntu 快捷键</h2><p>注：在普通 PC 上，Super 键通常就是 Win 键， Numpad 表示数字小键盘。</p>\n<p><strong>Launcher (启动器)</strong></p>\n<p><code>Super</code>（按住）- 调用启动器。<code>Super-1</code> 或 <code>2</code>或 <code>3</code>直至<code>0</code>- 打开或聚焦到应用程序。<code>Super-T</code>- 打开垃圾箱。<code>Alt-F1</code>- 把键盘聚焦在启动器上.<code>Alt-F2</code>- 以“特殊模式”调用托盘，用来运行命令。<code>Ctrl-Alt-T</code> - 启动终端窗口。</p>\n<p><strong>Dash (托盘）</strong></p>\n<p><code>Super</code>(敲击) - 敲击打开托盘。<code>Super-A</code>- 打开应用程序托盘。<code>Super-F</code> - 打开文件及文件夹托盘。</p>\n<p><strong>Panel (面板）</strong></p>\n<p>F10 - 打开面板上的第一个菜单。<code>Window Management</code> （窗口管理）<code>Super-?</code> - 扩展模式，缩小所有窗口到所有工作区。<code>Super-D</code> -最小化所有窗口; 再次使用该快捷键的话恢复所有窗口。（不起作用时，可以尝试再按住<code>Ctrl</code> ）</p>\n<p><strong>Window Placement （窗口放置）</strong></p>\n<p>假如你反复点击某个组合键，Unity 会循环改变窗口宽度，例如 <code>Ctrl-Alt-numpad 5</code>:<code>Ctrl-Alt-Numpad 7</code> - 放置窗口到屏幕左上角。<code>Ctrl-Alt-Numpad 8</code> - 放置窗口到屏幕上半部分。<code>Ctrl-Alt-Numpad 9</code> - 放置窗口到屏幕右上角。<code>Ctrl-Alt-Numpad 4</code> - 放置窗口到屏幕左侧。<code>Ctrl-Alt-Numpad 5</code> - 在屏幕中间位置居中/最大化窗口。<code>Ctrl-Alt-Numpad 6</code> - 放置窗口到屏幕右侧。<code>Ctrl-Alt-Numpad 1</code> - 放置窗口到屏幕左下角。<code>Ctrl-Alt-Numpad 2</code> - 放置窗口到屏幕下半部分。<code>Ctrl-Alt-Numpad 3</code> - 放置窗口到屏幕右下角。<code>Ctrl-Alt-Numpad 0</code> - 最大化窗口。</p>\n<p><strong>Workspace Management （工作区管理）</strong></p>\n<p><code>Super-W</code> - 平铺模式列出所有窗口<code>Super-S</code> - 浏览模式，缩小所有工作区，让你管理窗口。<code>Ctrl-Alt-← / → / ↑ / ↓</code> - 切换工作区。<code>Ctrl-Alt-Shift-← / → / ↑ / ↓</code> - 放置窗口到新工作区。</p>\n<p><strong>Mouse Tricks （鼠标技巧）</strong></p>\n<p>最大化 - <code>拖动</code>窗口到顶部面板就会最大化该窗口。<br>最大化按钮上<code>中击</code> - 垂直最大化窗口。<br>最大化按钮上<code>右击</code> - 水平最大化窗口。<br>平铺 - <code>拖动</code>窗口到左边/右边边缘，会自动在屏幕的一边平铺窗口。<br>恢复 - 在顶部面板会把最大化的窗口的标题栏往下<code>拖动</code>会自动还原到原始大小。<br>在应用程序的启动器图标上<code>中击</code> - 如果之前已打开过此程序，此操作会为该程序再打开一个新的独立进程。<br>在窗口标题栏上<code>中击</code>（不是菜单）- 把当前窗口放置到所有窗口的最后面。  </p>\n<p><strong>Nautilus快捷键</strong></p>\n<p><code>CTRL + 1</code>: 图标视图<br><code>CTRL + 2</code>: 列表视图<br><code>CTRL + T</code>: 新建标签页<br><code>CTRL + W</code>: 关闭标签页<br><code>CTRL + D</code> 收藏到书签<br><code>CTRL + Q</code>: 退出<br><code>Win+E</code>: 显示所有的工作空间，可轻松进行切换<br><code>Win + Mousewheel</code>: 桌面上的缩放操作，使用滚轮鼠标操作更方便  </p>\n<p><strong>Terminal终端快捷键</strong></p>\n<p><code>CTRL + ALT + T</code>: 打开终端<br><code>TAB</code>: 自动补全命令或文件名<br><code>CTRL + SHIFT + V</code>: 粘贴（Linux中不需要复制的动作，文本被选择就自动被复制）<br><code>CTRL + SHIFT + T</code>: 新建标签页<br><code>CTRL + D</code>: 关闭标签页<br><code>CTRL + L</code>: 清楚屏幕<br><code>CTRL + R</code> + 文本: 在输入历史中搜索<br><code>CTRL + A</code>: 移动到行首<br><code>CTRL + E</code>: 移动到行末<br><code>CTRL + C</code>: 终止当前任务<br><code>CTRL + Z</code>: 把当前任务放到后台运行（相当于运行命令时后面加&amp;）<br><code>~</code>: 表示用户目录路径  </p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"civyon3y20000umdfjt050r0z","tag_id":"civyon3yj0003umdf3xa3fowr","_id":"civyon3yz0008umdfsfaad113"},{"post_id":"civyon3y20000umdfjt050r0z","tag_id":"civyon3yv0006umdf40o6axjm","_id":"civyon3z00009umdfrp5dfwiv"},{"post_id":"civyon3yc0002umdfvsvjcx5d","tag_id":"civyon3yy0007umdfhvgcbfb8","_id":"civyon3z4000dumdfmw6bk8m7"},{"post_id":"civyon3yc0002umdfvsvjcx5d","tag_id":"civyon3z0000aumdfee1ptp7l","_id":"civyon3z7000eumdfhfik8d6z"},{"post_id":"civyon3yc0002umdfvsvjcx5d","tag_id":"civyon3z1000bumdfg3zugmv5","_id":"civyon3z8000gumdfubtyauiu"},{"post_id":"civyon3yn0004umdfauavkzpg","tag_id":"civyon3z3000cumdffha8sbe6","_id":"civyon3zb000kumdf3utpyyf9"},{"post_id":"civyon3yn0004umdfauavkzpg","tag_id":"civyon3z8000fumdfka3pjwqr","_id":"civyon3zc000lumdftnb31reh"},{"post_id":"civyon3yn0004umdfauavkzpg","tag_id":"civyon3z9000humdf4ta2a9mw","_id":"civyon3zc000numdf2x1tdvcc"},{"post_id":"civyon3yn0004umdfauavkzpg","tag_id":"civyon3za000iumdfarl1kg0e","_id":"civyon3zc000oumdffrj7smgk"},{"post_id":"civyon3yq0005umdfelgezkll","tag_id":"civyon3za000jumdf2rp0ifyl","_id":"civyon3zf000qumdfxk7gwuc4"},{"post_id":"civyon3yq0005umdfelgezkll","tag_id":"civyon3zc000mumdfvy3fjak3","_id":"civyon3zg000rumdfr99hl0bw"},{"post_id":"civyon3yq0005umdfelgezkll","tag_id":"civyon3zd000pumdf7ujbwu55","_id":"civyon3zi000sumdfvfnh84if"}],"Tag":[{"name":"Git","_id":"civyon3yj0003umdf3xa3fowr"},{"name":"Github","_id":"civyon3yv0006umdf40o6axjm"},{"name":"hexo","_id":"civyon3yy0007umdfhvgcbfb8"},{"name":"github page","_id":"civyon3z0000aumdfee1ptp7l"},{"name":"搭建博客","_id":"civyon3z1000bumdfg3zugmv5"},{"name":"linux常用命令","_id":"civyon3z3000cumdffha8sbe6"},{"name":"DOS命令","_id":"civyon3z8000fumdfka3pjwqr"},{"name":"Ubuntu命令","_id":"civyon3z9000humdf4ta2a9mw"},{"name":"Cheat Sheet","_id":"civyon3za000iumdfarl1kg0e"},{"name":"Ubuntu安装","_id":"civyon3za000jumdf2rp0ifyl"},{"name":"Ubuntu快捷键","_id":"civyon3zc000mumdfvy3fjak3"},{"name":"Shandowsocks配置","_id":"civyon3zd000pumdf7ujbwu55"}]}}