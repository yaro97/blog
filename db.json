{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1479716140425},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1479716140450},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1479716140467},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1479716140472},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1479716140477},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1479716140480},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1479716140485},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1479716140489},{"_id":"themes/next/_config.yml","hash":"e4ef93cbcc4e649877e8215952f429add4c728e3","modified":1479644664000},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1479716140521},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1479716140525},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1479716141052},{"_id":"source/_posts/Git使用过程.md","hash":"9589ac64f6a89c66100f333460c321ce0f9e6db5","modified":1479722411496},{"_id":"source/_posts/Hexo-Github建博客教程.md","hash":"c68975afddd3db770a8944938f71ec735addf0a4","modified":1479778040541},{"_id":"source/_posts/Ubuntu安装及调试记录.md","hash":"acce815b0552304c3d540f332cff4acbbc2a6a30","modified":1479651050000},{"_id":"source/tags/index.md","hash":"e122fc0b7fb087a0da7859851f39f38398db594a","modified":1479735350838},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1479716140399},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1479716140413},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1479716122071},{"_id":"themes/next/.git/index","hash":"fe265578c8385fcd42dff24baab15bfa6c46b3cf","modified":1479722627606},{"_id":"themes/next/.git/packed-refs","hash":"09a09da39b7d77dcf2904850874cf00817abdb45","modified":1479716140388},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1479716140456},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1479716140461},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1479716140529},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1479716140533},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1479716140536},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1479716140540},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1479716140543},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1479716140546},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1479716140551},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1479716140554},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1479716140558},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1479716140561},{"_id":"themes/next/languages/zh-Hans.yml","hash":"439c16c744b1596f24d9e0b4e230c4d3c93b7d85","modified":1479716140565},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1479716140568},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1479716140572},{"_id":"themes/next/layout/_layout.swig","hash":"b4ef30f7da073bf2a9052186f76e0e080de1c794","modified":1479716140584},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1479716141028},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1479716141031},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1479716141035},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1479716141038},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1479716141042},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1479716141045},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1479716141048},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1479716141060},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1479716142566},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1479716142577},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1479716142591},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479716141583},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1479716122075},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1479716122080},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1479716122084},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1479716122087},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1479716122094},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1479716122105},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1479716122113},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1479716122118},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1479716122122},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1479716122130},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1479716122134},{"_id":"themes/next/.git/logs/HEAD","hash":"468a6b6a953f7c06fb2a154d5cf3947933b4f8a1","modified":1479716140404},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1479716140579},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1479716140580},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1479716140588},{"_id":"themes/next/layout/_macro/post.swig","hash":"abfc88f34f2c0ae52229c4ffa577b00ad7cecdc6","modified":1479716140597},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1479716140602},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3b261c758a7673d91c116367be1bb5223403f9e0","modified":1479716140607},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1479716140610},{"_id":"themes/next/layout/_partials/comments.swig","hash":"a5ffadb516522f85c052b290b94c0e4af3002644","modified":1479716140614},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1479716140617},{"_id":"themes/next/layout/_partials/footer.swig","hash":"168430bd87ca8212cf9773b5dd94f52b805ef210","modified":1479716140620},{"_id":"themes/next/layout/_partials/head.swig","hash":"740684ef2b6e56183529387882042612e904bc8d","modified":1479716140629},{"_id":"themes/next/layout/_partials/header.swig","hash":"d9b10a92fdccd57a0c0d6773831f9c1b0f1bb449","modified":1479716140640},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1479716140644},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1479716140647},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1479716140650},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1479716140793},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1479716140796},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1479716140799},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1479716141021},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1479716141065},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1479716141072},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1479716141087},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1479716141100},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1479716141582},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1479716141587},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479716141588},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1479716141593},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1479716141597},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1479716141601},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1479716141606},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1479716141611},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1479716141615},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1479716141619},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479716141619},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479716141620},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1479716141624},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1479716141627},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479716141628},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479716140803},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479716140803},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479716141450},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479716141449},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479716141459},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479716141563},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479612469000},{"_id":"themes/next/.git/refs/heads/master","hash":"776e91b78b954875a8d38297e05b80eab20df4b9","modified":1479716140403},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1479716140576},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1479716140579},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1479716140632},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1479716140636},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1479716140703},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1479716140717},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1479716140722},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1479716140729},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1479716140767},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1479716140773},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1479716140783},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1479716140803},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1479716140806},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1479716140810},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"9c8f4b2a29741d96adf0b8fef52ae7f4396f27f5","modified":1479716140905},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1479716140956},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1479716140975},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1479716140987},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1479716141003},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1479716141012},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1479716141449},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1479716141453},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1479716141458},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1479716141563},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"d7826b48a20162835450495db534d353ac52e476","modified":1479716141569},{"_id":"themes/next/source/css/_variables/base.styl","hash":"af54b8b080b9db8261e552151cec8d8b45259259","modified":1479649054000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1479716141651},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1479716141662},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1479716141669},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1479716141679},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1479716141697},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1479716141712},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1479716141742},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1479716141758},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1479716141760},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1479716142028},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1479716142031},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1479716142128},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1479716142132},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1479716142141},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1479716142143},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1479716142163},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1479716142166},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1479716142170},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1479716142174},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1479716142177},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1479716142333},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1479716142409},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1479716142416},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1479716142422},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1479716142426},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1479716142439},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1479716142450},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1479716142487},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1479716142491},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1479716142539},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1479716142550},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1479716142563},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1479716142404},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"468a6b6a953f7c06fb2a154d5cf3947933b4f8a1","modified":1479716140405},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1479716140397},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1479716140821},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1479716140860},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1479716140864},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1479716140867},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1479716140876},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1479716140886},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1479716140902},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1479716140916},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1479716140926},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1479716140936},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1479716141104},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1479716141107},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1479716141110},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1479716141114},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1479716141194},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1479716141301},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1479716141359},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1479716141363},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1479716141369},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1479716141436},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1479716141441},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1479716141445},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1479716141464},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1479716141469},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1479716141472},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1479716141477},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1479716141482},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479716141486},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1479716141492},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1479716141535},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1479716141539},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1479716141543},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1479716141546},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1479716141549},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1479716141555},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1479716141558},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1479716141503},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1479716141507},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1479716141510},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479716141510},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1479716141513},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1479716141718},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479716142032},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479716142032},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479716142033},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479716142034},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479716142035},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479716142036},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1479776451944},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1479776451960},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1479776451975},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1479716142159},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479716142160},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1479716142181},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1479716142185},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1479716142189},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1479716142467},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1479716142481},{"_id":"themes/next/.git/objects/pack/pack-f7e914c1b99eb35e9bcafeef0cd43367c7b79eb8.idx","hash":"1913fe8e058000988ab312ef45a00fe03b566660","modified":1479716138997},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1479716142199},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1479716142225},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1479716142254},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1479716142327},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1479716142515},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"468a6b6a953f7c06fb2a154d5cf3947933b4f8a1","modified":1479716140394},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1479716141117},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1479716141120},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1479716141123},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1479716141131},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1479716141128},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1479716141134},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1479716141138},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1479716141142},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1479716141146},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1479716141149},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1479716141152},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1479716141157},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1479716141187},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1479716141190},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1479716141199},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1479716141203},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1479716141208},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1479716141211},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e2066dd20747e3125c969ef8459d0015fa5233a2","modified":1479716141214},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1479716141217},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1479716141221},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1479716141224},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1479716141227},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1479716141230},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1479716141235},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1479716141238},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1479716141270},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1479716141274},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1479716141277},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1479716141280},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1479716141284},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1479716141288},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1479716141291},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1479716141295},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1479716141298},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1479716141306},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1479716141311},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1479716141314},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1479716141319},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1479716141322},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1479716141326},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1479716141329},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1479716141332},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1479716141337},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1479716141340},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1479716141350},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4f1e9d96940aa3e42d58fb63a26d4fa260323b0d","modified":1479716141354},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1479716141495},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479716141499},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479716141514},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479716142037},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1479776451897},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1479776451913},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1479776451913},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1479776451913},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1479776451928},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1479716142249},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1479716142024},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1479716142242},{"_id":"themes/next/.git/objects/pack/pack-f7e914c1b99eb35e9bcafeef0cd43367c7b79eb8.pack","hash":"35ea225378a491c28321e41aad9cb4d37e340ae9","modified":1479716139195},{"_id":"public/archives/index.html","hash":"f2469bc1127c23baadef682d4147b5014855b3a4","modified":1479778248096},{"_id":"public/archives/2016/index.html","hash":"f6e0d4f11288aaaef9c8690daaae239292d2e659","modified":1479778248096},{"_id":"public/archives/2016/11/index.html","hash":"1f9f5c81eb310da9bc6f1fe72dfbe70e3b23b5cb","modified":1479778248096},{"_id":"public/index.html","hash":"0ff0c36b7eb86cc526a2ef43ba43fbe59caa1208","modified":1479778248096},{"_id":"public/tags/index.html","hash":"dadb8dc5cb4784a7a2400dc133b2f8d167c04a6e","modified":1479776470999},{"_id":"public/tags/Git/index.html","hash":"e98728421eb734e886a63cdeccc763be328006fc","modified":1479776470999},{"_id":"public/tags/Github/index.html","hash":"d9815a81c3901bfaa99f4e0301472387215d72e4","modified":1479776470999},{"_id":"public/tags/hexo/index.html","hash":"53b8170d5ef51ffafdc63733ed13e06d999b4aed","modified":1479778248096},{"_id":"public/tags/github-page/index.html","hash":"0672ac62cb0eea92eaeb4173392b9776739316f9","modified":1479778248096},{"_id":"public/tags/搭建博客/index.html","hash":"91c82076d97f9aaade37a1ea7108acac98952c47","modified":1479778248096},{"_id":"public/tags/Ubuntu安装/index.html","hash":"6e4d3d28fa067f39fd0b3910e6c18d07d6e8da02","modified":1479776470999},{"_id":"public/tags/Ubuntu快捷键/index.html","hash":"0c7ace357541a2c4ac99b52fba1001bffbec9ee7","modified":1479776470999},{"_id":"public/tags/Shandowsocks配置/index.html","hash":"0eb402e48eede68b9bd02d9d1f41b3d237842087","modified":1479776470999},{"_id":"public/2016/11/21/Hexo-Github建博客教程/index.html","hash":"c4b7de6ca9f1cb1a00c0216234931c2d362066e4","modified":1479776470999},{"_id":"public/2016/11/21/Git使用过程/index.html","hash":"f8e2753da924b1d37633e9e4da134b7736cbdb33","modified":1479778248096},{"_id":"public/2016/11/20/Ubuntu安装及调试记录/index.html","hash":"99819b05b27fe678a48b2f0dd283fcbe4483582f","modified":1479776470999},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1479776471030},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479776471030},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1479776471030},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1479776471030},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1479776471030},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1479776471030},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1479776471030},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1479776471030},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1479776471030},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479776471030},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479776471030},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1479776471030},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1479776471030},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479776471030},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1479776471030},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1479776471030},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479776471030},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479776471030},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479776471030},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479776471030},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479776471030},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479776471030},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1479776471030},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479776471030},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1479776472171},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1479776472186},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1479776472186},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1479776472186},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1479776472202},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1479776472202},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1479776472202},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1479776472202},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1479776472202},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1479776472202},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1479776472202},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1479776472202},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1479776472202},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1479776472202},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1479776472202},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1479776472202},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1479776472202},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1479776472202},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1479776472202},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1479776472202},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1479776472202},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1479776472202},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1479776472202},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1479776472202},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1479776472202},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479776472202},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1479776472202},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1479776472202},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1479776472202},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1479776472202},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1479776472202},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1479776472202},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1479776472202},{"_id":"public/css/main.css","hash":"9a0678d8467c570804cc822da7db7f48fdaf87b6","modified":1479776472202},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1479776472202},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1479776472202},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1479776472202},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1479776472202},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1479776472202},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1479776472202},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1479776472202},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1479776472202},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1479776472202},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1479776472202},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1479776472202},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1479776472233},{"_id":"public/2016/11/22/Hexo-Github建博客教程/index.html","hash":"9c86cc970888ec4510e05e0e28b5df02f1143df0","modified":1479778248096}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2016-11-21T13:32:56.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-21 21:32:56\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-11-21T13:35:50.838Z","path":"tags/index.html","_id":"civs44x6b0001jcvp3ydhyo12","layout":"page","content":"","excerpt":"","more":""}],"Post":[{"title":"Git使用过程","_content":"本教程只会让你成为Git用户，不会让你成为Git专家。很多Git命令只有那些专家才明白（事实上我也不明白，因为我不是Git专家），但我保证这些命令可能你一辈子都不会用到。既然Git是一个工具，就没必要把时间浪费在那些“高级”但几乎永远不会用到的命令上。一旦你真的非用不可了，到时候再自行Google或者请教专家也未迟。\n\n[参考网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n## 安装git\n\n### linux安装\n\n`sudo apt install git`  \n早期的版本都是安装git-core,因为git=GNU interactive Tools,后来由于git名气太大,就用git了.\n\n### windows安装\n\n在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行:http://msysgit.github.com/\n完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。\n\n## 配置\n\n配置文件目录\nlinux:`/etc/gitconfig` 和 `~/.gitconfig`\nwins:`C:\\Documents and Settings\\$USER`\n\n<!-- more -->\n\n```\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"email@example.com\"\n```\n\n因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。\n\n注意`git config`命令的`--global`参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n此外还可以设置默认文本编辑器和差异分析工具\n\n```\ngit config --global core.editor emacs\ngit config --global merge.tool vimdiff\n```\n\n## 创建仓库(repository/版本库)\n\n### 选择合适的地方创建空目录\n\n```\nmkdir learngit\ncd learngit\npwd\n```\n\n### 初始化一个Git仓库\n\n使用`git init`命令;将目录变成可以管理的仓库\n瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个`.git`的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。\n\n### 把文件添加到版本库\n第一步，使用命令`git add <file>`，注意，可反复多次使用，添加多个文件；\n第二步，使用命令`git commit`，完成。如:\n\n```\ngit add file1.txt\ngit add file2.txt file3.txt\ngit commit -m \"add 3 files.\"\n```\n\n说明:不要用记事本编辑任何文本文件,Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题.\nGIt只能跟踪文本文件的改动,word(二进制文件)不可以\n\n## 时光机穿梭\n\n提交修改和提交新文件是一样的两步，第一步是`git add`,第二部是`git commit -m \"add distributed\"`  \n要随时掌握工作区的状态，使用`git status`命令。  \n如果`git status`告诉你有文件被修改过，用`git diff`可以查看修改内容。\n\n### 版本回退\n\n```\ngit log #可以查看每次提交改动的历史记录\ngit log --pretty=oneline #可以一行显示一条\ngit reset --hard HEAD^ #退回当前版本的上一个版本\ngit reset --hard HEAD^^ #退回当前版本的上两个版本\ngit reset --hard HEAD~100 #退回当前版本的上100个版本\ngit reset --hard 3628164...... #退回commit id为3628164开头的那个版本(可以不写完)\n```\n\nHEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`。  \n穿梭前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。  \n要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。  \n\n### 工作区和暂存区\n\n工作区+git版本库{暂存区+N个分支(分支+指向分支的指针HEAD)}\n\n为什么说Git管理的是修改，而不是文件呢？`文件`修改后提交,是不会在库里有修改记录的,必须把`修改`,`git add`后才能用`git status`查询.\n\n### 撤销修改\n\n场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。\n\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD file`，就回到了场景1，第二步按场景1操作。\n\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n### 删除文件\n\n确实要从版本库中删除该文件，那就用命令`git rm`删掉，并且`git commit`\n\n另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本  \n`$ git checkout -- test.txt`  \n`git checkout`其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。\n\n## 远程仓库\n\n### 添加远程库\n\n为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n\n要关联一个远程库，使用命令`git remote add origin git@server-name:path/repo-name.git`；\n\n关联后，使用命令`git push -u origin master`第一次推送master分支的所有内容；\n\n此后，每次本地提交后，只要有必要，就可以使用命令`git push origin master`推送最新修改；\n\n分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！\n\n### 从远程库克隆\n\n要克隆一个仓库，首先必须知道仓库的地址，然后使用`git clone`命令克隆。  \nGit支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。\n\n## 分支管理\n\n### 创建与合并分支\n\nGit鼓励大量使用分支：\n查看分支：`git branch`\n创建分支：`git branch <name>`\n切换分支：`git checkout <name>`\n创建+切换分支：`git checkout -b <name>`\n合并某分支到当前分支：`git merge <name>`\n删除分支：`git branch -d <name>`\n\n### 解决冲突\n\n当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n用git log --graph命令可以看到分支合并图。\n\n### 分支管理策略\n\nGit分支十分强大，在团队开发中应该充分应用。  \n合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。\n\n### Bug分支\n\n修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；  \n当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。\n\n### Feature分支\n\n开发一个新feature，最好新建一个分支；  \n如果要丢弃一个没有被合并过的分支，可以通过git branch -D `<name>`强行删除。\n\n### 多人协作\n\n查看远程库信息，使用`git remote -v`；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n\n从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。\n\n## 标签管理\n\n请把上周一的那个版本打包发布，commit号是6a5819e...一串乱七八糟的数字不好找！请把上周一的那个版本打包发布，版本号是v1.2,“好的，按照tag v1.2查找commit就行！所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。\n\n### 创建标签\n\n```\ngit branch #查看所有分支\ngit checkout master #切换到需要打标签的分支上\ngit tag v1.0 #打一个新标签\ngit tag #查看所有标签\ngit tag v0.9 `<commit id>` #可以对历史某个commit打标签\n```\n\n命令`git tag <name>`用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n`git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；\n`git tag -s <tagname> -m \"blablabla...\"`可以用PGP签名标签；\n命令`git tag`可以查看所有标签。\n\n### 操作标签\n\n命令`git push origin <tagname>`可以推送一个本地标签；  \n命令`git push origin --tags`可以推送全部未推送过的本地标签；  \n命令`git tag -d <tagname>`可以删除一个本地标签；  \n命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签。  \n\n## 使用github\n\n在GitHub上，可以任意Fork开源仓库；  \n自己拥有Fork后的仓库的读写权限；  \n可以推送pull request给官方仓库来贡献代码。\n\n## 自定义git\n\n### 忽略特殊文件\n\n忽略某些文件时，需要编写.gitignore；  \n.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！\n\n### 设置别名\n\n给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。\n\n### 搭建Git服务器\n\n针对于自己公司非开源的项目.\n\n搭建Git服务器非常简单，通常10分钟即可完成；  \n要方便管理公钥，用Gitosis；  \n要像SVN那样变态地控制权限，用Gitolite。\n","source":"_posts/Git使用过程.md","raw":"---\ntitle: Git使用过程\ntags:\n- Git\n- Github\n---\n本教程只会让你成为Git用户，不会让你成为Git专家。很多Git命令只有那些专家才明白（事实上我也不明白，因为我不是Git专家），但我保证这些命令可能你一辈子都不会用到。既然Git是一个工具，就没必要把时间浪费在那些“高级”但几乎永远不会用到的命令上。一旦你真的非用不可了，到时候再自行Google或者请教专家也未迟。\n\n[参考网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n## 安装git\n\n### linux安装\n\n`sudo apt install git`  \n早期的版本都是安装git-core,因为git=GNU interactive Tools,后来由于git名气太大,就用git了.\n\n### windows安装\n\n在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行:http://msysgit.github.com/\n完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。\n\n## 配置\n\n配置文件目录\nlinux:`/etc/gitconfig` 和 `~/.gitconfig`\nwins:`C:\\Documents and Settings\\$USER`\n\n<!-- more -->\n\n```\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"email@example.com\"\n```\n\n因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。\n\n注意`git config`命令的`--global`参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n此外还可以设置默认文本编辑器和差异分析工具\n\n```\ngit config --global core.editor emacs\ngit config --global merge.tool vimdiff\n```\n\n## 创建仓库(repository/版本库)\n\n### 选择合适的地方创建空目录\n\n```\nmkdir learngit\ncd learngit\npwd\n```\n\n### 初始化一个Git仓库\n\n使用`git init`命令;将目录变成可以管理的仓库\n瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个`.git`的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。\n\n### 把文件添加到版本库\n第一步，使用命令`git add <file>`，注意，可反复多次使用，添加多个文件；\n第二步，使用命令`git commit`，完成。如:\n\n```\ngit add file1.txt\ngit add file2.txt file3.txt\ngit commit -m \"add 3 files.\"\n```\n\n说明:不要用记事本编辑任何文本文件,Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题.\nGIt只能跟踪文本文件的改动,word(二进制文件)不可以\n\n## 时光机穿梭\n\n提交修改和提交新文件是一样的两步，第一步是`git add`,第二部是`git commit -m \"add distributed\"`  \n要随时掌握工作区的状态，使用`git status`命令。  \n如果`git status`告诉你有文件被修改过，用`git diff`可以查看修改内容。\n\n### 版本回退\n\n```\ngit log #可以查看每次提交改动的历史记录\ngit log --pretty=oneline #可以一行显示一条\ngit reset --hard HEAD^ #退回当前版本的上一个版本\ngit reset --hard HEAD^^ #退回当前版本的上两个版本\ngit reset --hard HEAD~100 #退回当前版本的上100个版本\ngit reset --hard 3628164...... #退回commit id为3628164开头的那个版本(可以不写完)\n```\n\nHEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`。  \n穿梭前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。  \n要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。  \n\n### 工作区和暂存区\n\n工作区+git版本库{暂存区+N个分支(分支+指向分支的指针HEAD)}\n\n为什么说Git管理的是修改，而不是文件呢？`文件`修改后提交,是不会在库里有修改记录的,必须把`修改`,`git add`后才能用`git status`查询.\n\n### 撤销修改\n\n场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。\n\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD file`，就回到了场景1，第二步按场景1操作。\n\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n### 删除文件\n\n确实要从版本库中删除该文件，那就用命令`git rm`删掉，并且`git commit`\n\n另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本  \n`$ git checkout -- test.txt`  \n`git checkout`其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。\n\n## 远程仓库\n\n### 添加远程库\n\n为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n\n要关联一个远程库，使用命令`git remote add origin git@server-name:path/repo-name.git`；\n\n关联后，使用命令`git push -u origin master`第一次推送master分支的所有内容；\n\n此后，每次本地提交后，只要有必要，就可以使用命令`git push origin master`推送最新修改；\n\n分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！\n\n### 从远程库克隆\n\n要克隆一个仓库，首先必须知道仓库的地址，然后使用`git clone`命令克隆。  \nGit支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。\n\n## 分支管理\n\n### 创建与合并分支\n\nGit鼓励大量使用分支：\n查看分支：`git branch`\n创建分支：`git branch <name>`\n切换分支：`git checkout <name>`\n创建+切换分支：`git checkout -b <name>`\n合并某分支到当前分支：`git merge <name>`\n删除分支：`git branch -d <name>`\n\n### 解决冲突\n\n当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n用git log --graph命令可以看到分支合并图。\n\n### 分支管理策略\n\nGit分支十分强大，在团队开发中应该充分应用。  \n合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。\n\n### Bug分支\n\n修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；  \n当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。\n\n### Feature分支\n\n开发一个新feature，最好新建一个分支；  \n如果要丢弃一个没有被合并过的分支，可以通过git branch -D `<name>`强行删除。\n\n### 多人协作\n\n查看远程库信息，使用`git remote -v`；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n\n从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。\n\n## 标签管理\n\n请把上周一的那个版本打包发布，commit号是6a5819e...一串乱七八糟的数字不好找！请把上周一的那个版本打包发布，版本号是v1.2,“好的，按照tag v1.2查找commit就行！所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。\n\n### 创建标签\n\n```\ngit branch #查看所有分支\ngit checkout master #切换到需要打标签的分支上\ngit tag v1.0 #打一个新标签\ngit tag #查看所有标签\ngit tag v0.9 `<commit id>` #可以对历史某个commit打标签\n```\n\n命令`git tag <name>`用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n`git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；\n`git tag -s <tagname> -m \"blablabla...\"`可以用PGP签名标签；\n命令`git tag`可以查看所有标签。\n\n### 操作标签\n\n命令`git push origin <tagname>`可以推送一个本地标签；  \n命令`git push origin --tags`可以推送全部未推送过的本地标签；  \n命令`git tag -d <tagname>`可以删除一个本地标签；  \n命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签。  \n\n## 使用github\n\n在GitHub上，可以任意Fork开源仓库；  \n自己拥有Fork后的仓库的读写权限；  \n可以推送pull request给官方仓库来贡献代码。\n\n## 自定义git\n\n### 忽略特殊文件\n\n忽略某些文件时，需要编写.gitignore；  \n.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！\n\n### 设置别名\n\n给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。\n\n### 搭建Git服务器\n\n针对于自己公司非开源的项目.\n\n搭建Git服务器非常简单，通常10分钟即可完成；  \n要方便管理公钥，用Gitosis；  \n要像SVN那样变态地控制权限，用Gitolite。\n","slug":"Git使用过程","published":1,"date":"2016-11-21T13:30:18.435Z","updated":"2016-11-21T10:00:11.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civs44x650000jcvp8zazwmfl","content":"<p>本教程只会让你成为Git用户，不会让你成为Git专家。很多Git命令只有那些专家才明白（事实上我也不明白，因为我不是Git专家），但我保证这些命令可能你一辈子都不会用到。既然Git是一个工具，就没必要把时间浪费在那些“高级”但几乎永远不会用到的命令上。一旦你真的非用不可了，到时候再自行Google或者请教专家也未迟。</p>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">参考网站</a></p>\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><h3 id=\"linux安装\"><a href=\"#linux安装\" class=\"headerlink\" title=\"linux安装\"></a>linux安装</h3><p><code>sudo apt install git</code><br>早期的版本都是安装git-core,因为git=GNU interactive Tools,后来由于git名气太大,就用git了.</p>\n<h3 id=\"windows安装\"><a href=\"#windows安装\" class=\"headerlink\" title=\"windows安装\"></a>windows安装</h3><p>在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行:<a href=\"http://msysgit.github.com/\" target=\"_blank\" rel=\"external\">http://msysgit.github.com/</a><br>完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>配置文件目录<br>linux:<code>/etc/gitconfig</code> 和 <code>~/.gitconfig</code><br>wins:<code>C:\\Documents and Settings\\$USER</code></p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;Your Name&quot;</div><div class=\"line\">git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure>\n<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p>\n<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n<p>此外还可以设置默认文本编辑器和差异分析工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.editor emacs</div><div class=\"line\">git config --global merge.tool vimdiff</div></pre></td></tr></table></figure>\n<h2 id=\"创建仓库-repository-版本库\"><a href=\"#创建仓库-repository-版本库\" class=\"headerlink\" title=\"创建仓库(repository/版本库)\"></a>创建仓库(repository/版本库)</h2><h3 id=\"选择合适的地方创建空目录\"><a href=\"#选择合适的地方创建空目录\" class=\"headerlink\" title=\"选择合适的地方创建空目录\"></a>选择合适的地方创建空目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir learngit</div><div class=\"line\">cd learngit</div><div class=\"line\">pwd</div></pre></td></tr></table></figure>\n<h3 id=\"初始化一个Git仓库\"><a href=\"#初始化一个Git仓库\" class=\"headerlink\" title=\"初始化一个Git仓库\"></a>初始化一个Git仓库</h3><p>使用<code>git init</code>命令;将目录变成可以管理的仓库<br>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p>\n<h3 id=\"把文件添加到版本库\"><a href=\"#把文件添加到版本库\" class=\"headerlink\" title=\"把文件添加到版本库\"></a>把文件添加到版本库</h3><p>第一步，使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；<br>第二步，使用命令<code>git commit</code>，完成。如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add file1.txt</div><div class=\"line\">git add file2.txt file3.txt</div><div class=\"line\">git commit -m &quot;add 3 files.&quot;</div></pre></td></tr></table></figure>\n<p>说明:不要用记事本编辑任何文本文件,Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题.<br>GIt只能跟踪文本文件的改动,word(二进制文件)不可以</p>\n<h2 id=\"时光机穿梭\"><a href=\"#时光机穿梭\" class=\"headerlink\" title=\"时光机穿梭\"></a>时光机穿梭</h2><p>提交修改和提交新文件是一样的两步，第一步是<code>git add</code>,第二部是<code>git commit -m &quot;add distributed&quot;</code><br>要随时掌握工作区的状态，使用<code>git status</code>命令。<br>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log #可以查看每次提交改动的历史记录</div><div class=\"line\">git log --pretty=oneline #可以一行显示一条</div><div class=\"line\">git reset --hard HEAD^ #退回当前版本的上一个版本</div><div class=\"line\">git reset --hard HEAD^^ #退回当前版本的上两个版本</div><div class=\"line\">git reset --hard HEAD~100 #退回当前版本的上100个版本</div><div class=\"line\">git reset --hard 3628164...... #退回commit id为3628164开头的那个版本(可以不写完)</div></pre></td></tr></table></figure>\n<p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。<br>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。<br>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。  </p>\n<h3 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h3><p>工作区+git版本库{暂存区+N个分支(分支+指向分支的指针HEAD)}</p>\n<p>为什么说Git管理的是修改，而不是文件呢？<code>文件</code>修改后提交,是不会在库里有修改记录的,必须把<code>修改</code>,<code>git add</code>后才能用<code>git status</code>查询.</p>\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>\n<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p>\n<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code></p>\n<p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本<br><code>$ git checkout -- test.txt</code><br><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><h3 id=\"添加远程库\"><a href=\"#添加远程库\" class=\"headerlink\" title=\"添加远程库\"></a>添加远程库</h3><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>\n<p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p>\n<p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>\n<p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>\n<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>\n<h3 id=\"从远程库克隆\"><a href=\"#从远程库克隆\" class=\"headerlink\" title=\"从远程库克隆\"></a>从远程库克隆</h3><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。<br>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h3 id=\"创建与合并分支\"><a href=\"#创建与合并分支\" class=\"headerlink\" title=\"创建与合并分支\"></a>创建与合并分支</h3><p>Git鼓励大量使用分支：<br>查看分支：<code>git branch</code><br>创建分支：<code>git branch &lt;name&gt;</code><br>切换分支：<code>git checkout &lt;name&gt;</code><br>创建+切换分支：<code>git checkout -b &lt;name&gt;</code><br>合并某分支到当前分支：<code>git merge &lt;name&gt;</code><br>删除分支：<code>git branch -d &lt;name&gt;</code></p>\n<h3 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>用git log –graph命令可以看到分支合并图。</p>\n<h3 id=\"分支管理策略\"><a href=\"#分支管理策略\" class=\"headerlink\" title=\"分支管理策略\"></a>分支管理策略</h3><p>Git分支十分强大，在团队开发中应该充分应用。<br>合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。</p>\n<h3 id=\"Bug分支\"><a href=\"#Bug分支\" class=\"headerlink\" title=\"Bug分支\"></a>Bug分支</h3><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</p>\n<h3 id=\"Feature分支\"><a href=\"#Feature分支\" class=\"headerlink\" title=\"Feature分支\"></a>Feature分支</h3><p>开发一个新feature，最好新建一个分支；<br>如果要丢弃一个没有被合并过的分支，可以通过git branch -D <code>&lt;name&gt;</code>强行删除。</p>\n<h3 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h3><p>查看远程库信息，使用<code>git remote -v</code>；</p>\n<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>\n<p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p>\n<p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>\n<p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p>\n<p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>\n<h2 id=\"标签管理\"><a href=\"#标签管理\" class=\"headerlink\" title=\"标签管理\"></a>标签管理</h2><p>请把上周一的那个版本打包发布，commit号是6a5819e…一串乱七八糟的数字不好找！请把上周一的那个版本打包发布，版本号是v1.2,“好的，按照tag v1.2查找commit就行！所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p>\n<h3 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch #查看所有分支</div><div class=\"line\">git checkout master #切换到需要打标签的分支上</div><div class=\"line\">git tag v1.0 #打一个新标签</div><div class=\"line\">git tag #查看所有标签</div><div class=\"line\">git tag v0.9 `&lt;commit id&gt;` #可以对历史某个commit打标签</div></pre></td></tr></table></figure>\n<p>命令<code>git tag &lt;name&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；<br><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；<br><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签；<br>命令<code>git tag</code>可以查看所有标签。</p>\n<h3 id=\"操作标签\"><a href=\"#操作标签\" class=\"headerlink\" title=\"操作标签\"></a>操作标签</h3><p>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；<br>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；<br>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；<br>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。  </p>\n<h2 id=\"使用github\"><a href=\"#使用github\" class=\"headerlink\" title=\"使用github\"></a>使用github</h2><p>在GitHub上，可以任意Fork开源仓库；<br>自己拥有Fork后的仓库的读写权限；<br>可以推送pull request给官方仓库来贡献代码。</p>\n<h2 id=\"自定义git\"><a href=\"#自定义git\" class=\"headerlink\" title=\"自定义git\"></a>自定义git</h2><h3 id=\"忽略特殊文件\"><a href=\"#忽略特殊文件\" class=\"headerlink\" title=\"忽略特殊文件\"></a>忽略特殊文件</h3><p>忽略某些文件时，需要编写.gitignore；<br>.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！</p>\n<h3 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h3><p>给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。</p>\n<h3 id=\"搭建Git服务器\"><a href=\"#搭建Git服务器\" class=\"headerlink\" title=\"搭建Git服务器\"></a>搭建Git服务器</h3><p>针对于自己公司非开源的项目.</p>\n<p>搭建Git服务器非常简单，通常10分钟即可完成；<br>要方便管理公钥，用Gitosis；<br>要像SVN那样变态地控制权限，用Gitolite。</p>\n","excerpt":"<p>本教程只会让你成为Git用户，不会让你成为Git专家。很多Git命令只有那些专家才明白（事实上我也不明白，因为我不是Git专家），但我保证这些命令可能你一辈子都不会用到。既然Git是一个工具，就没必要把时间浪费在那些“高级”但几乎永远不会用到的命令上。一旦你真的非用不可了，到时候再自行Google或者请教专家也未迟。</p>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">参考网站</a></p>\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><h3 id=\"linux安装\"><a href=\"#linux安装\" class=\"headerlink\" title=\"linux安装\"></a>linux安装</h3><p><code>sudo apt install git</code><br>早期的版本都是安装git-core,因为git=GNU interactive Tools,后来由于git名气太大,就用git了.</p>\n<h3 id=\"windows安装\"><a href=\"#windows安装\" class=\"headerlink\" title=\"windows安装\"></a>windows安装</h3><p>在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行:<a href=\"http://msysgit.github.com/\">http://msysgit.github.com/</a><br>完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>配置文件目录<br>linux:<code>/etc/gitconfig</code> 和 <code>~/.gitconfig</code><br>wins:<code>C:\\Documents and Settings\\$USER</code></p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;Your Name&quot;</div><div class=\"line\">git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure>\n<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p>\n<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n<p>此外还可以设置默认文本编辑器和差异分析工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.editor emacs</div><div class=\"line\">git config --global merge.tool vimdiff</div></pre></td></tr></table></figure>\n<h2 id=\"创建仓库-repository-版本库\"><a href=\"#创建仓库-repository-版本库\" class=\"headerlink\" title=\"创建仓库(repository/版本库)\"></a>创建仓库(repository/版本库)</h2><h3 id=\"选择合适的地方创建空目录\"><a href=\"#选择合适的地方创建空目录\" class=\"headerlink\" title=\"选择合适的地方创建空目录\"></a>选择合适的地方创建空目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir learngit</div><div class=\"line\">cd learngit</div><div class=\"line\">pwd</div></pre></td></tr></table></figure>\n<h3 id=\"初始化一个Git仓库\"><a href=\"#初始化一个Git仓库\" class=\"headerlink\" title=\"初始化一个Git仓库\"></a>初始化一个Git仓库</h3><p>使用<code>git init</code>命令;将目录变成可以管理的仓库<br>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p>\n<h3 id=\"把文件添加到版本库\"><a href=\"#把文件添加到版本库\" class=\"headerlink\" title=\"把文件添加到版本库\"></a>把文件添加到版本库</h3><p>第一步，使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；<br>第二步，使用命令<code>git commit</code>，完成。如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add file1.txt</div><div class=\"line\">git add file2.txt file3.txt</div><div class=\"line\">git commit -m &quot;add 3 files.&quot;</div></pre></td></tr></table></figure>\n<p>说明:不要用记事本编辑任何文本文件,Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题.<br>GIt只能跟踪文本文件的改动,word(二进制文件)不可以</p>\n<h2 id=\"时光机穿梭\"><a href=\"#时光机穿梭\" class=\"headerlink\" title=\"时光机穿梭\"></a>时光机穿梭</h2><p>提交修改和提交新文件是一样的两步，第一步是<code>git add</code>,第二部是<code>git commit -m &quot;add distributed&quot;</code><br>要随时掌握工作区的状态，使用<code>git status</code>命令。<br>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log #可以查看每次提交改动的历史记录</div><div class=\"line\">git log --pretty=oneline #可以一行显示一条</div><div class=\"line\">git reset --hard HEAD^ #退回当前版本的上一个版本</div><div class=\"line\">git reset --hard HEAD^^ #退回当前版本的上两个版本</div><div class=\"line\">git reset --hard HEAD~100 #退回当前版本的上100个版本</div><div class=\"line\">git reset --hard 3628164...... #退回commit id为3628164开头的那个版本(可以不写完)</div></pre></td></tr></table></figure>\n<p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。<br>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。<br>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。  </p>\n<h3 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h3><p>工作区+git版本库{暂存区+N个分支(分支+指向分支的指针HEAD)}</p>\n<p>为什么说Git管理的是修改，而不是文件呢？<code>文件</code>修改后提交,是不会在库里有修改记录的,必须把<code>修改</code>,<code>git add</code>后才能用<code>git status</code>查询.</p>\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>\n<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p>\n<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code></p>\n<p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本<br><code>$ git checkout -- test.txt</code><br><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><h3 id=\"添加远程库\"><a href=\"#添加远程库\" class=\"headerlink\" title=\"添加远程库\"></a>添加远程库</h3><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>\n<p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p>\n<p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>\n<p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>\n<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>\n<h3 id=\"从远程库克隆\"><a href=\"#从远程库克隆\" class=\"headerlink\" title=\"从远程库克隆\"></a>从远程库克隆</h3><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。<br>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h3 id=\"创建与合并分支\"><a href=\"#创建与合并分支\" class=\"headerlink\" title=\"创建与合并分支\"></a>创建与合并分支</h3><p>Git鼓励大量使用分支：<br>查看分支：<code>git branch</code><br>创建分支：<code>git branch &lt;name&gt;</code><br>切换分支：<code>git checkout &lt;name&gt;</code><br>创建+切换分支：<code>git checkout -b &lt;name&gt;</code><br>合并某分支到当前分支：<code>git merge &lt;name&gt;</code><br>删除分支：<code>git branch -d &lt;name&gt;</code></p>\n<h3 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>用git log –graph命令可以看到分支合并图。</p>\n<h3 id=\"分支管理策略\"><a href=\"#分支管理策略\" class=\"headerlink\" title=\"分支管理策略\"></a>分支管理策略</h3><p>Git分支十分强大，在团队开发中应该充分应用。<br>合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。</p>\n<h3 id=\"Bug分支\"><a href=\"#Bug分支\" class=\"headerlink\" title=\"Bug分支\"></a>Bug分支</h3><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</p>\n<h3 id=\"Feature分支\"><a href=\"#Feature分支\" class=\"headerlink\" title=\"Feature分支\"></a>Feature分支</h3><p>开发一个新feature，最好新建一个分支；<br>如果要丢弃一个没有被合并过的分支，可以通过git branch -D <code>&lt;name&gt;</code>强行删除。</p>\n<h3 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h3><p>查看远程库信息，使用<code>git remote -v</code>；</p>\n<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>\n<p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p>\n<p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>\n<p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p>\n<p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>\n<h2 id=\"标签管理\"><a href=\"#标签管理\" class=\"headerlink\" title=\"标签管理\"></a>标签管理</h2><p>请把上周一的那个版本打包发布，commit号是6a5819e…一串乱七八糟的数字不好找！请把上周一的那个版本打包发布，版本号是v1.2,“好的，按照tag v1.2查找commit就行！所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p>\n<h3 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch #查看所有分支</div><div class=\"line\">git checkout master #切换到需要打标签的分支上</div><div class=\"line\">git tag v1.0 #打一个新标签</div><div class=\"line\">git tag #查看所有标签</div><div class=\"line\">git tag v0.9 `&lt;commit id&gt;` #可以对历史某个commit打标签</div></pre></td></tr></table></figure>\n<p>命令<code>git tag &lt;name&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；<br><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；<br><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签；<br>命令<code>git tag</code>可以查看所有标签。</p>\n<h3 id=\"操作标签\"><a href=\"#操作标签\" class=\"headerlink\" title=\"操作标签\"></a>操作标签</h3><p>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；<br>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；<br>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；<br>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。  </p>\n<h2 id=\"使用github\"><a href=\"#使用github\" class=\"headerlink\" title=\"使用github\"></a>使用github</h2><p>在GitHub上，可以任意Fork开源仓库；<br>自己拥有Fork后的仓库的读写权限；<br>可以推送pull request给官方仓库来贡献代码。</p>\n<h2 id=\"自定义git\"><a href=\"#自定义git\" class=\"headerlink\" title=\"自定义git\"></a>自定义git</h2><h3 id=\"忽略特殊文件\"><a href=\"#忽略特殊文件\" class=\"headerlink\" title=\"忽略特殊文件\"></a>忽略特殊文件</h3><p>忽略某些文件时，需要编写.gitignore；<br>.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！</p>\n<h3 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h3><p>给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。</p>\n<h3 id=\"搭建Git服务器\"><a href=\"#搭建Git服务器\" class=\"headerlink\" title=\"搭建Git服务器\"></a>搭建Git服务器</h3><p>针对于自己公司非开源的项目.</p>\n<p>搭建Git服务器非常简单，通常10分钟即可完成；<br>要方便管理公钥，用Gitosis；<br>要像SVN那样变态地控制权限，用Gitolite。</p>"},{"title":"Hexo-Github建博客教程","_content":"本人=一名小白,而且我对网站开发以及前端的知识几乎是零基础,所以在自己刚接触这个东西的时候,我像很多人一样,都是上网找教程,但是要知道,那都是程序员的教程.一路摸爬滚打,终于搞定了,这篇文章算是自己的操作记录,为以后的重新搭建留个备忘...\n\n参考官网:https://hexo.io/docs  \n参考网站1:http://jiji262.github.io  \n参考网站2:http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/\n\n## 安装Hexo\n\nHexo需要安装`Node.js`和`Git`.二者的安装可以到相应的官网下载安装即可.注意`apt-get`安装的`Node.js`不是最新版本. 具体参考[hexo官网](https://hexo.io/docs  ).  \n\n在任意目录下(如`E\\hexo`)文件夹中运行\n\n```bash\nnpm install hexo-cli -g \n```\n\n注:卸载hexo可尝试`npm uninstall hexo-cli`.\n\n## 初始化Hexo\n\n在相应目录下(如`E\\hexo`)文件夹中运行\n\n```bash\nhexo init blog #建立文件夹`blog`,并在其中初始化hexo\ncd blog #进入`blog`目录\nnpm install #npm安装package.json中的依赖包\nnpm install hexo-deployer-git --save #安装deploy插件,后续部署github需要.\n```\n\n<!--more-->\n\n初始化完成后,可以`hexo generate`,`hexo server`查看是否能正常访问本地博客`http://localhost:4000`.  \n安装成功后可以使用`hexo -v`查看本地配置环境\n\n## Hexo主题\n\n### 下载主题\n\n- 可以直接下载相关zip文件,解压缩到`.../hexo/themes`文件夹下\n\n- 可以在`blog`目录下运行`git clone https://github.com/iissnan/hexo-theme-next themes/next`将next主题下载到themes文件夹下(推荐,可以使用`git pull`更新主题).\n\n### 启用主题\n\n编辑配置文件`_config.xml`中的主题名为`themes`文件夹下对应的文件夹名.然后运行如下命令.\n\n```bash\nhexo clean #清理hexo缓存\nhexo s #重新启动本地web服务器\n```\n\n主题的其他设置见next主题[官网](http://theme-next.iissnan.com/).\n\n## 创建Github pages\n\n- 在线创建库并起名`yaro97.github.io`,在设置中通过` Launch automatic page generator`生成github page即可  \n**注意:**`name`要是唯一的话,生成的网址为`name.github.io`,若不唯一,网址为`yaro97.github.com/name.github.io`\n\n## 部署本地Hexo到Github pages\n\n- 注意部署前一定要安装插件`hexo-deployer-git`.前面已经安装\n\n- 修改`_config.xml`文件\n\n    ```bash\n    deploy:\n        type: git\n        repo: https://github.com/yaro97/yaro97.github.io.git\n        branch: master\n        name: yaro\n        email: wyzh97@gmail.com\n    # 具体设置可以参考hexo官网.\n    ```\n\n- 执行命令`hexo d`完成部署,过程中需要github账号/密码,账号为`yaro97`.\n\n## 自定义域名\n\n### 绑定主域名\n\n- 在新建的`repository`中新建文件`CNAME`,内容填写:\n    \n    ```bash\n    www.paotime.com\n    paotimecom\n    ```\n\n- 在阿里云中,添加域名解析,内容如下:\n\n    ```bash\n    记录类型:A; 主机记录:@; 记录值:192.30.252.153.\n    记录类型:A; 主机记录:www; 记录值:192.30.252.153.\n    ```\n\n### 绑定二级域名\n\n- 在新建的`repository`中新建文件`CNAME`,内容填写:\n\n    ```bash\n    blog.paotime.com\n    ```\n\n- 在阿里云中,添加域名解析,内容如下:\n\n    ```bash\n    记录类型:CNAME; 主机记录:blog 记录值:paotime.github.io. #注意这个点`.`\n    ```\n\n## 在两个台电脑同时更新\n\n### 对A电脑的操作如下\n\n1. 在github新建仓库名为blog\n2. 上传A电脑本地Hexo博客的源文件夹至github的blog仓库，流程如下：\n\n    - 删除根目录和主题目录下的.git文件夹\n    - 修改根目录下的.gitignore文件为：\n\n        ```bash\n        /.deploy_git\n        /public\n        ```\n\n    - 依次执行以下指令，同步源文件至github\n\n        ```bash\n        git init \n        git add .\n        # 若出现`warning: LF will be replaced by CRLF in`\n        # 执行:\n        # git config --global core.autocrlf  false\n        git commit -m \"first commit\"\n        git remote add origin git@github.com:yaro97/blog.git\n        git push -u origin master\n        # 此时可能会出错failed to push some refs to git  出现错误的主要原因是github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并\n        # git pull --rebase origin master\n        # 此时再执行语句 \n        # git push -u origin master\n        ```\n\n### 对B电脑的操作如下：\n\n1. 安装Git，并配置github账号下的B电脑的.ssh\n2. 安装Node.js\n3. 使用npm指令安装Hexo  \n\n    ```bash\n    npm install -g hexo-cli\n    ```\n\n4. 使用Git bash随便选择一个文件夹,执行git clone\n\n    ```bash\n    git clone git@github.com:yaro97/blog.git\n    ```\n\n至此，两个电脑的hexo环境一致，Hexo博客源文件一致.倘若还有C电脑,重复B电脑的操作即可.  \n这里需要说明的是:在blog\n\n## 关于日常的改动流程（A，B两台电脑均使用的情况下）\n\n1. 建议先检查更新git pull，将本地博客源文件更新至最新版本\n\n    ```bash\n    git pull\n    ```\n\n2. 然后可以新建或修改博客内容，进行预览等操作\n\n    ```bash\n    hexo new <新的博客名称>\n    hexo server\n    ```\n\n3. 新建博客后，先同步Hexo源文件，将修改后的源文件同步至github\n\n    ```bash\n    git add . #不添加被删除的文件,`git add -A`会添加所有修改.\n    git commit -m \"更新描述\"\n    git push origin master\n    ```\n\n4. 然后再执行Hexo的生成文件和部署指令\n\n    ```bash\n    hexo g -d #hexo generate && hexo deploy\n    ```","source":"_posts/Hexo-Github建博客教程.md","raw":"---\ntitle: Hexo-Github建博客教程\ntags:\n- hexo\n- github page\n- 搭建博客\n---\n本人=一名小白,而且我对网站开发以及前端的知识几乎是零基础,所以在自己刚接触这个东西的时候,我像很多人一样,都是上网找教程,但是要知道,那都是程序员的教程.一路摸爬滚打,终于搞定了,这篇文章算是自己的操作记录,为以后的重新搭建留个备忘...\n\n参考官网:https://hexo.io/docs  \n参考网站1:http://jiji262.github.io  \n参考网站2:http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/\n\n## 安装Hexo\n\nHexo需要安装`Node.js`和`Git`.二者的安装可以到相应的官网下载安装即可.注意`apt-get`安装的`Node.js`不是最新版本. 具体参考[hexo官网](https://hexo.io/docs  ).  \n\n在任意目录下(如`E\\hexo`)文件夹中运行\n\n```bash\nnpm install hexo-cli -g \n```\n\n注:卸载hexo可尝试`npm uninstall hexo-cli`.\n\n## 初始化Hexo\n\n在相应目录下(如`E\\hexo`)文件夹中运行\n\n```bash\nhexo init blog #建立文件夹`blog`,并在其中初始化hexo\ncd blog #进入`blog`目录\nnpm install #npm安装package.json中的依赖包\nnpm install hexo-deployer-git --save #安装deploy插件,后续部署github需要.\n```\n\n<!--more-->\n\n初始化完成后,可以`hexo generate`,`hexo server`查看是否能正常访问本地博客`http://localhost:4000`.  \n安装成功后可以使用`hexo -v`查看本地配置环境\n\n## Hexo主题\n\n### 下载主题\n\n- 可以直接下载相关zip文件,解压缩到`.../hexo/themes`文件夹下\n\n- 可以在`blog`目录下运行`git clone https://github.com/iissnan/hexo-theme-next themes/next`将next主题下载到themes文件夹下(推荐,可以使用`git pull`更新主题).\n\n### 启用主题\n\n编辑配置文件`_config.xml`中的主题名为`themes`文件夹下对应的文件夹名.然后运行如下命令.\n\n```bash\nhexo clean #清理hexo缓存\nhexo s #重新启动本地web服务器\n```\n\n主题的其他设置见next主题[官网](http://theme-next.iissnan.com/).\n\n## 创建Github pages\n\n- 在线创建库并起名`yaro97.github.io`,在设置中通过` Launch automatic page generator`生成github page即可  \n**注意:**`name`要是唯一的话,生成的网址为`name.github.io`,若不唯一,网址为`yaro97.github.com/name.github.io`\n\n## 部署本地Hexo到Github pages\n\n- 注意部署前一定要安装插件`hexo-deployer-git`.前面已经安装\n\n- 修改`_config.xml`文件\n\n    ```bash\n    deploy:\n        type: git\n        repo: https://github.com/yaro97/yaro97.github.io.git\n        branch: master\n        name: yaro\n        email: wyzh97@gmail.com\n    # 具体设置可以参考hexo官网.\n    ```\n\n- 执行命令`hexo d`完成部署,过程中需要github账号/密码,账号为`yaro97`.\n\n## 自定义域名\n\n### 绑定主域名\n\n- 在新建的`repository`中新建文件`CNAME`,内容填写:\n    \n    ```bash\n    www.paotime.com\n    paotimecom\n    ```\n\n- 在阿里云中,添加域名解析,内容如下:\n\n    ```bash\n    记录类型:A; 主机记录:@; 记录值:192.30.252.153.\n    记录类型:A; 主机记录:www; 记录值:192.30.252.153.\n    ```\n\n### 绑定二级域名\n\n- 在新建的`repository`中新建文件`CNAME`,内容填写:\n\n    ```bash\n    blog.paotime.com\n    ```\n\n- 在阿里云中,添加域名解析,内容如下:\n\n    ```bash\n    记录类型:CNAME; 主机记录:blog 记录值:paotime.github.io. #注意这个点`.`\n    ```\n\n## 在两个台电脑同时更新\n\n### 对A电脑的操作如下\n\n1. 在github新建仓库名为blog\n2. 上传A电脑本地Hexo博客的源文件夹至github的blog仓库，流程如下：\n\n    - 删除根目录和主题目录下的.git文件夹\n    - 修改根目录下的.gitignore文件为：\n\n        ```bash\n        /.deploy_git\n        /public\n        ```\n\n    - 依次执行以下指令，同步源文件至github\n\n        ```bash\n        git init \n        git add .\n        # 若出现`warning: LF will be replaced by CRLF in`\n        # 执行:\n        # git config --global core.autocrlf  false\n        git commit -m \"first commit\"\n        git remote add origin git@github.com:yaro97/blog.git\n        git push -u origin master\n        # 此时可能会出错failed to push some refs to git  出现错误的主要原因是github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并\n        # git pull --rebase origin master\n        # 此时再执行语句 \n        # git push -u origin master\n        ```\n\n### 对B电脑的操作如下：\n\n1. 安装Git，并配置github账号下的B电脑的.ssh\n2. 安装Node.js\n3. 使用npm指令安装Hexo  \n\n    ```bash\n    npm install -g hexo-cli\n    ```\n\n4. 使用Git bash随便选择一个文件夹,执行git clone\n\n    ```bash\n    git clone git@github.com:yaro97/blog.git\n    ```\n\n至此，两个电脑的hexo环境一致，Hexo博客源文件一致.倘若还有C电脑,重复B电脑的操作即可.  \n这里需要说明的是:在blog\n\n## 关于日常的改动流程（A，B两台电脑均使用的情况下）\n\n1. 建议先检查更新git pull，将本地博客源文件更新至最新版本\n\n    ```bash\n    git pull\n    ```\n\n2. 然后可以新建或修改博客内容，进行预览等操作\n\n    ```bash\n    hexo new <新的博客名称>\n    hexo server\n    ```\n\n3. 新建博客后，先同步Hexo源文件，将修改后的源文件同步至github\n\n    ```bash\n    git add . #不添加被删除的文件,`git add -A`会添加所有修改.\n    git commit -m \"更新描述\"\n    git push origin master\n    ```\n\n4. 然后再执行Hexo的生成文件和部署指令\n\n    ```bash\n    hexo g -d #hexo generate && hexo deploy\n    ```","slug":"Hexo-Github建博客教程","published":1,"date":"2016-11-22T01:00:50.678Z","updated":"2016-11-22T01:27:20.541Z","_id":"civs44x6d0002jcvp9xu4pe34","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本人=一名小白,而且我对网站开发以及前端的知识几乎是零基础,所以在自己刚接触这个东西的时候,我像很多人一样,都是上网找教程,但是要知道,那都是程序员的教程.一路摸爬滚打,终于搞定了,这篇文章算是自己的操作记录,为以后的重新搭建留个备忘…</p>\n<p>参考官网:<a href=\"https://hexo.io/docs\" target=\"_blank\" rel=\"external\">https://hexo.io/docs</a><br>参考网站1:<a href=\"http://jiji262.github.io\" target=\"_blank\" rel=\"external\">http://jiji262.github.io</a><br>参考网站2:<a href=\"http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/\" target=\"_blank\" rel=\"external\">http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/</a></p>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>Hexo需要安装<code>Node.js</code>和<code>Git</code>.二者的安装可以到相应的官网下载安装即可.注意<code>apt-get</code>安装的<code>Node.js</code>不是最新版本. 具体参考<a href=\"https://hexo.io/docs\" target=\"_blank\" rel=\"external\">hexo官网</a>.  </p>\n<p>在任意目录下(如<code>E\\hexo</code>)文件夹中运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>注:卸载hexo可尝试<code>npm uninstall hexo-cli</code>.</p>\n<h2 id=\"初始化Hexo\"><a href=\"#初始化Hexo\" class=\"headerlink\" title=\"初始化Hexo\"></a>初始化Hexo</h2><p>在相应目录下(如<code>E\\hexo</code>)文件夹中运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init blog <span class=\"comment\">#建立文件夹`blog`,并在其中初始化hexo</span></div><div class=\"line\"><span class=\"built_in\">cd</span> blog <span class=\"comment\">#进入`blog`目录</span></div><div class=\"line\">npm install <span class=\"comment\">#npm安装package.json中的依赖包</span></div><div class=\"line\">npm install hexo-deployer-git --save <span class=\"comment\">#安装deploy插件,后续部署github需要.</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>初始化完成后,可以<code>hexo generate</code>,<code>hexo server</code>查看是否能正常访问本地博客<code>http://localhost:4000</code>.<br>安装成功后可以使用<code>hexo -v</code>查看本地配置环境</p>\n<h2 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h2><h3 id=\"下载主题\"><a href=\"#下载主题\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h3><ul>\n<li><p>可以直接下载相关zip文件,解压缩到<code>.../hexo/themes</code>文件夹下</p>\n</li>\n<li><p>可以在<code>blog</code>目录下运行<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>将next主题下载到themes文件夹下(推荐,可以使用<code>git pull</code>更新主题).</p>\n</li>\n</ul>\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>编辑配置文件<code>_config.xml</code>中的主题名为<code>themes</code>文件夹下对应的文件夹名.然后运行如下命令.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean <span class=\"comment\">#清理hexo缓存</span></div><div class=\"line\">hexo s <span class=\"comment\">#重新启动本地web服务器</span></div></pre></td></tr></table></figure>\n<p>主题的其他设置见next主题<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">官网</a>.</p>\n<h2 id=\"创建Github-pages\"><a href=\"#创建Github-pages\" class=\"headerlink\" title=\"创建Github pages\"></a>创建Github pages</h2><ul>\n<li>在线创建库并起名<code>yaro97.github.io</code>,在设置中通过<code>Launch automatic page generator</code>生成github page即可<br><strong>注意:</strong><code>name</code>要是唯一的话,生成的网址为<code>name.github.io</code>,若不唯一,网址为<code>yaro97.github.com/name.github.io</code></li>\n</ul>\n<h2 id=\"部署本地Hexo到Github-pages\"><a href=\"#部署本地Hexo到Github-pages\" class=\"headerlink\" title=\"部署本地Hexo到Github pages\"></a>部署本地Hexo到Github pages</h2><ul>\n<li><p>注意部署前一定要安装插件<code>hexo-deployer-git</code>.前面已经安装</p>\n</li>\n<li><p>修改<code>_config.xml</code>文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">    <span class=\"built_in\">type</span>: git</div><div class=\"line\">    repo: https://github.com/yaro97/yaro97.github.io.git</div><div class=\"line\">    branch: master</div><div class=\"line\">    name: yaro</div><div class=\"line\">    email: wyzh97@gmail.com</div><div class=\"line\"><span class=\"comment\"># 具体设置可以参考hexo官网.</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>执行命令<code>hexo d</code>完成部署,过程中需要github账号/密码,账号为<code>yaro97</code>.</p>\n</li>\n</ul>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><h3 id=\"绑定主域名\"><a href=\"#绑定主域名\" class=\"headerlink\" title=\"绑定主域名\"></a>绑定主域名</h3><ul>\n<li><p>在新建的<code>repository</code>中新建文件<code>CNAME</code>,内容填写:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">www.paotime.com</div><div class=\"line\">paotimecom</div></pre></td></tr></table></figure>\n</li>\n<li><p>在阿里云中,添加域名解析,内容如下:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">记录类型:A; 主机记录:@; 记录值:192.30.252.153.</div><div class=\"line\">记录类型:A; 主机记录:www; 记录值:192.30.252.153.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"绑定二级域名\"><a href=\"#绑定二级域名\" class=\"headerlink\" title=\"绑定二级域名\"></a>绑定二级域名</h3><ul>\n<li><p>在新建的<code>repository</code>中新建文件<code>CNAME</code>,内容填写:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">blog.paotime.com</div></pre></td></tr></table></figure>\n</li>\n<li><p>在阿里云中,添加域名解析,内容如下:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">记录类型:CNAME; 主机记录:blog 记录值:paotime.github.io. <span class=\"comment\">#注意这个点`.`</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"在两个台电脑同时更新\"><a href=\"#在两个台电脑同时更新\" class=\"headerlink\" title=\"在两个台电脑同时更新\"></a>在两个台电脑同时更新</h2><h3 id=\"对A电脑的操作如下\"><a href=\"#对A电脑的操作如下\" class=\"headerlink\" title=\"对A电脑的操作如下\"></a>对A电脑的操作如下</h3><ol>\n<li>在github新建仓库名为blog</li>\n<li><p>上传A电脑本地Hexo博客的源文件夹至github的blog仓库，流程如下：</p>\n<ul>\n<li>删除根目录和主题目录下的.git文件夹</li>\n<li><p>修改根目录下的.gitignore文件为：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/.deploy_git</div><div class=\"line\">/public</div></pre></td></tr></table></figure>\n</li>\n<li><p>依次执行以下指令，同步源文件至github</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init </div><div class=\"line\">git add .</div><div class=\"line\"><span class=\"comment\"># 若出现`warning: LF will be replaced by CRLF in`</span></div><div class=\"line\"><span class=\"comment\"># 执行:</span></div><div class=\"line\"><span class=\"comment\"># git config --global core.autocrlf  false</span></div><div class=\"line\">git commit -m <span class=\"string\">\"first commit\"</span></div><div class=\"line\">git remote add origin git@github.com:yaro97/blog.git</div><div class=\"line\">git push -u origin master</div><div class=\"line\"><span class=\"comment\"># 此时可能会出错failed to push some refs to git  出现错误的主要原因是github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并</span></div><div class=\"line\"><span class=\"comment\"># git pull --rebase origin master</span></div><div class=\"line\"><span class=\"comment\"># 此时再执行语句 </span></div><div class=\"line\"><span class=\"comment\"># git push -u origin master</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"对B电脑的操作如下：\"><a href=\"#对B电脑的操作如下：\" class=\"headerlink\" title=\"对B电脑的操作如下：\"></a>对B电脑的操作如下：</h3><ol>\n<li>安装Git，并配置github账号下的B电脑的.ssh</li>\n<li>安装Node.js</li>\n<li><p>使用npm指令安装Hexo  </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用Git bash随便选择一个文件夹,执行git clone</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:yaro97/blog.git</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>至此，两个电脑的hexo环境一致，Hexo博客源文件一致.倘若还有C电脑,重复B电脑的操作即可.<br>这里需要说明的是:在blog</p>\n<h2 id=\"关于日常的改动流程（A，B两台电脑均使用的情况下）\"><a href=\"#关于日常的改动流程（A，B两台电脑均使用的情况下）\" class=\"headerlink\" title=\"关于日常的改动流程（A，B两台电脑均使用的情况下）\"></a>关于日常的改动流程（A，B两台电脑均使用的情况下）</h2><ol>\n<li><p>建议先检查更新git pull，将本地博客源文件更新至最新版本</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后可以新建或修改博客内容，进行预览等操作</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &lt;新的博客名称&gt;</div><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建博客后，先同步Hexo源文件，将修改后的源文件同步至github</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add . <span class=\"comment\">#不添加被删除的文件,`git add -A`会添加所有修改.</span></div><div class=\"line\">git commit -m <span class=\"string\">\"更新描述\"</span></div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后再执行Hexo的生成文件和部署指令</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g <span class=\"_\">-d</span> <span class=\"comment\">#hexo generate &amp;&amp; hexo deploy</span></div></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"<p>本人=一名小白,而且我对网站开发以及前端的知识几乎是零基础,所以在自己刚接触这个东西的时候,我像很多人一样,都是上网找教程,但是要知道,那都是程序员的教程.一路摸爬滚打,终于搞定了,这篇文章算是自己的操作记录,为以后的重新搭建留个备忘…</p>\n<p>参考官网:<a href=\"https://hexo.io/docs\">https://hexo.io/docs</a><br>参考网站1:<a href=\"http://jiji262.github.io\">http://jiji262.github.io</a><br>参考网站2:<a href=\"http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/\">http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/</a></p>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>Hexo需要安装<code>Node.js</code>和<code>Git</code>.二者的安装可以到相应的官网下载安装即可.注意<code>apt-get</code>安装的<code>Node.js</code>不是最新版本. 具体参考<a href=\"https://hexo.io/docs\">hexo官网</a>.  </p>\n<p>在任意目录下(如<code>E\\hexo</code>)文件夹中运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>注:卸载hexo可尝试<code>npm uninstall hexo-cli</code>.</p>\n<h2 id=\"初始化Hexo\"><a href=\"#初始化Hexo\" class=\"headerlink\" title=\"初始化Hexo\"></a>初始化Hexo</h2><p>在相应目录下(如<code>E\\hexo</code>)文件夹中运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init blog <span class=\"comment\">#建立文件夹`blog`,并在其中初始化hexo</span></div><div class=\"line\"><span class=\"built_in\">cd</span> blog <span class=\"comment\">#进入`blog`目录</span></div><div class=\"line\">npm install <span class=\"comment\">#npm安装package.json中的依赖包</span></div><div class=\"line\">npm install hexo-deployer-git --save <span class=\"comment\">#安装deploy插件,后续部署github需要.</span></div></pre></td></tr></table></figure>","more":"<p>初始化完成后,可以<code>hexo generate</code>,<code>hexo server</code>查看是否能正常访问本地博客<code>http://localhost:4000</code>.<br>安装成功后可以使用<code>hexo -v</code>查看本地配置环境</p>\n<h2 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h2><h3 id=\"下载主题\"><a href=\"#下载主题\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h3><ul>\n<li><p>可以直接下载相关zip文件,解压缩到<code>.../hexo/themes</code>文件夹下</p>\n</li>\n<li><p>可以在<code>blog</code>目录下运行<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>将next主题下载到themes文件夹下(推荐,可以使用<code>git pull</code>更新主题).</p>\n</li>\n</ul>\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>编辑配置文件<code>_config.xml</code>中的主题名为<code>themes</code>文件夹下对应的文件夹名.然后运行如下命令.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean <span class=\"comment\">#清理hexo缓存</span></div><div class=\"line\">hexo s <span class=\"comment\">#重新启动本地web服务器</span></div></pre></td></tr></table></figure>\n<p>主题的其他设置见next主题<a href=\"http://theme-next.iissnan.com/\">官网</a>.</p>\n<h2 id=\"创建Github-pages\"><a href=\"#创建Github-pages\" class=\"headerlink\" title=\"创建Github pages\"></a>创建Github pages</h2><ul>\n<li>在线创建库并起名<code>yaro97.github.io</code>,在设置中通过<code>Launch automatic page generator</code>生成github page即可<br><strong>注意:</strong><code>name</code>要是唯一的话,生成的网址为<code>name.github.io</code>,若不唯一,网址为<code>yaro97.github.com/name.github.io</code></li>\n</ul>\n<h2 id=\"部署本地Hexo到Github-pages\"><a href=\"#部署本地Hexo到Github-pages\" class=\"headerlink\" title=\"部署本地Hexo到Github pages\"></a>部署本地Hexo到Github pages</h2><ul>\n<li><p>注意部署前一定要安装插件<code>hexo-deployer-git</code>.前面已经安装</p>\n</li>\n<li><p>修改<code>_config.xml</code>文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">    <span class=\"built_in\">type</span>: git</div><div class=\"line\">    repo: https://github.com/yaro97/yaro97.github.io.git</div><div class=\"line\">    branch: master</div><div class=\"line\">    name: yaro</div><div class=\"line\">    email: wyzh97@gmail.com</div><div class=\"line\"><span class=\"comment\"># 具体设置可以参考hexo官网.</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>执行命令<code>hexo d</code>完成部署,过程中需要github账号/密码,账号为<code>yaro97</code>.</p>\n</li>\n</ul>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><h3 id=\"绑定主域名\"><a href=\"#绑定主域名\" class=\"headerlink\" title=\"绑定主域名\"></a>绑定主域名</h3><ul>\n<li><p>在新建的<code>repository</code>中新建文件<code>CNAME</code>,内容填写:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">www.paotime.com</div><div class=\"line\">paotimecom</div></pre></td></tr></table></figure>\n</li>\n<li><p>在阿里云中,添加域名解析,内容如下:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">记录类型:A; 主机记录:@; 记录值:192.30.252.153.</div><div class=\"line\">记录类型:A; 主机记录:www; 记录值:192.30.252.153.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"绑定二级域名\"><a href=\"#绑定二级域名\" class=\"headerlink\" title=\"绑定二级域名\"></a>绑定二级域名</h3><ul>\n<li><p>在新建的<code>repository</code>中新建文件<code>CNAME</code>,内容填写:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">blog.paotime.com</div></pre></td></tr></table></figure>\n</li>\n<li><p>在阿里云中,添加域名解析,内容如下:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">记录类型:CNAME; 主机记录:blog 记录值:paotime.github.io. <span class=\"comment\">#注意这个点`.`</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"在两个台电脑同时更新\"><a href=\"#在两个台电脑同时更新\" class=\"headerlink\" title=\"在两个台电脑同时更新\"></a>在两个台电脑同时更新</h2><h3 id=\"对A电脑的操作如下\"><a href=\"#对A电脑的操作如下\" class=\"headerlink\" title=\"对A电脑的操作如下\"></a>对A电脑的操作如下</h3><ol>\n<li>在github新建仓库名为blog</li>\n<li><p>上传A电脑本地Hexo博客的源文件夹至github的blog仓库，流程如下：</p>\n<ul>\n<li>删除根目录和主题目录下的.git文件夹</li>\n<li><p>修改根目录下的.gitignore文件为：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/.deploy_git</div><div class=\"line\">/public</div></pre></td></tr></table></figure>\n</li>\n<li><p>依次执行以下指令，同步源文件至github</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init </div><div class=\"line\">git add .</div><div class=\"line\"><span class=\"comment\"># 若出现`warning: LF will be replaced by CRLF in`</span></div><div class=\"line\"><span class=\"comment\"># 执行:</span></div><div class=\"line\"><span class=\"comment\"># git config --global core.autocrlf  false</span></div><div class=\"line\">git commit -m <span class=\"string\">\"first commit\"</span></div><div class=\"line\">git remote add origin git@github.com:yaro97/blog.git</div><div class=\"line\">git push -u origin master</div><div class=\"line\"><span class=\"comment\"># 此时可能会出错failed to push some refs to git  出现错误的主要原因是github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并</span></div><div class=\"line\"><span class=\"comment\"># git pull --rebase origin master</span></div><div class=\"line\"><span class=\"comment\"># 此时再执行语句 </span></div><div class=\"line\"><span class=\"comment\"># git push -u origin master</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"对B电脑的操作如下：\"><a href=\"#对B电脑的操作如下：\" class=\"headerlink\" title=\"对B电脑的操作如下：\"></a>对B电脑的操作如下：</h3><ol>\n<li>安装Git，并配置github账号下的B电脑的.ssh</li>\n<li>安装Node.js</li>\n<li><p>使用npm指令安装Hexo  </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用Git bash随便选择一个文件夹,执行git clone</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:yaro97/blog.git</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>至此，两个电脑的hexo环境一致，Hexo博客源文件一致.倘若还有C电脑,重复B电脑的操作即可.<br>这里需要说明的是:在blog</p>\n<h2 id=\"关于日常的改动流程（A，B两台电脑均使用的情况下）\"><a href=\"#关于日常的改动流程（A，B两台电脑均使用的情况下）\" class=\"headerlink\" title=\"关于日常的改动流程（A，B两台电脑均使用的情况下）\"></a>关于日常的改动流程（A，B两台电脑均使用的情况下）</h2><ol>\n<li><p>建议先检查更新git pull，将本地博客源文件更新至最新版本</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后可以新建或修改博客内容，进行预览等操作</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &lt;新的博客名称&gt;</div><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建博客后，先同步Hexo源文件，将修改后的源文件同步至github</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add . <span class=\"comment\">#不添加被删除的文件,`git add -A`会添加所有修改.</span></div><div class=\"line\">git commit -m <span class=\"string\">\"更新描述\"</span></div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后再执行Hexo的生成文件和部署指令</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g <span class=\"_\">-d</span> <span class=\"comment\">#hexo generate &amp;&amp; hexo deploy</span></div></pre></td></tr></table></figure></li>\n</ol>"},{"title":"Ubuntu安装及调试记录","date":"2016-11-20T01:08:16.000Z","_content":"老婆的笔记本有两个显卡,安装win10的时候总是自动更新显卡;但是同时安装两个显卡,重启之后立马黑屏,蛋好疼...没办法,只能试试linux系统了,网上参考了下,Ubuntu算是比较容易入门的了,于是乎就折腾了好几天.现在用着感觉还不错的说,嘿嘿^_^..本文主要是个人操作过程的记录,其中对于新手来说还是有很多坑的,亲们可以参考下.\n\n## 安装Ubuntu\n\nUbuntu[官网下载](http://cn.ubuntu.com/download/)镜像文件，可直接拖动链接到迅雷下载；\n\n制作启动U盘：一定使用要**使用最新版**的**[UltraISO 软碟通](http://cn.ezbsystems.com/ultraiso/)**,否则可能出现错误，原因参考[U盘刻录无法启动原因](http://www.ubuntukylin.com/news/shownews.php?lang=cn&id=362)；\n\n设置电脑BIOS（F2进入）通过U盘启动，倘若无法启动，可尝试开启UEFI；\n\n安装Ubuntu.\n\n## 分区\n\n系统分区和数据分区 系统分区包括`/`和`swap` 数据分区包括`/home`和`其他数据`\n\n分区建议\n\n根分区/（系统主要文件）大小建议50G，swap交换分区大小参考物理内存,数据/home分区500G，剩下空间分两个区不挂载\n\n实际分区情况：`/`40G，`swap`4g，`其他`全部给`home`分区。\n\n<!-- more -->\n\n## 配置及安装软件\n\n### 解决桌面闪屏问题\n\n倘若鼠标不间断闪动，鼠标可以移动到桌面右边界之外，可如下解决：`设置`-`显示`-`关闭unkwon display`即可。\n\n### ubuntu安装软件的常见方式\n\n软件安装参考[这个网页](http://www.cnblogs.com/dubaokun/p/3558848.html).\n\n**直接通过`apt-get`安装**\n\n有些软件都是包含在相应的库中,通过添加库,便可以直接安装.这种方法安装的程序版本可能不是最新版(比如`node.js`).\n\n**下载`.deb`安装包手动安装**\n\n通过手动或`wget`等命令下载安装包,调用`dpkg -i package`安装\n\n**直接下载二进制文件解压即可用**\n\n- 下载二进制文件(Binaries)\n\n- 下载后将安装包移动到要安装到的文件夹下，根据个人喜好设置即可,这里我放在了`/home/kun/mysofltware/ `下面\n\n- 解压到当前文件夹下运行 \n\n- 进入 解压后的目录bin目录下，执行ls会看到两个文件`node`,`npm`. 然后执行`./node -v `，如果显示出 版本号说明我们下载的程序包是没有问题的(这里以`node.js`的安装为例)\n\n- 添加到PATH实现任意目录访问\n\n\t> 因为 `/home/kun/mysofltware/node-v0.10.26-linux-x64/bin`这个目录是不在环境变量中的，所以只能到该目录下才能node的程序。如果在其他的目录下执行node命令的话 ，必须通过绝对路径访问才可以的.\n\t>如果要在任意目录可以访问的话，需要将node 所在的目录，添加`PATH环境变量`里面，或者通过软连接的形式将`node`和`npm`链接到系统默认的`PATH目录`下的一个，以下分别介绍:\n\n\t- 软连接方式\n\n\t\t在终端执行`echo $PATH`可以获取`PATH变量`包含的内容，系统默认的`PATH环境变量`包括`/usr/local/bin`:`/usr/bin`:`/bin`:`/usr/local/sbin`:`/usr/sbin`:`/sbin`:，冒号为分隔符。所以我们可以将`node`和`npm`链接到`/usr/local/bin `目录执行如下命令  \n\n\t\t```bash\n\t\tln -s /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/node /usr/local/bin/node\n\t\tln -s /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/npm /usr/local/bin/npm\n\t\t```\n\n\t\t通过如此，就可以访问Node了，同时node部署也已经完毕。\n\n\t- 环境变量配置\n\n\t\t在node目录下执行pwd 获取node所在的目录，要把这个目录添加到PATH环境变量\n\t\t执行su 输入密码切换到root用户。通过命令打开`vi /etc/profile`profile文件,添加如下代码:\n\n\t\t```bash\n\t\tPATH=$PATH:/home/kun/mysofltware/node-v0.10.26-linux-x64/bin\n\t\t```\n\n\t\t执行命令`source/etc/profile`可以使变量生效，然后执行`echo $PATH`，看看输出内容是否包含自己添加的内容\n\t\t然后到任意目录下去执行一次执行`node -v`,`npm -v`,尝试是否OK? \n\n**下载源码,手动编译二进制**\n\n- 安装编译环境,安装依赖\n\n- 进入`cd`源码路径,执行里面的`configure文件`,即`./configure --prefix=/`生成二进制文件路径.\n\n\t> **命令解释:**`--prefix=/`用于指定安装路径,\n\t若不指定prefix，则可执行文件默认放在`/usr /local/bin`，库文件默认放在`/usr/local/lib`，配置文件默认放在`/usr/local/etc`,其它的资源文件放在`/usr /local/share`。你要卸载这个程序，要么在原来的make目录下用一次`make uninstall`（前提是make文件指定过uninstall）,要么去上述目录里面把相关的文件一个个手工删掉。\n\t若指定prefix，直接删掉一个文件夹就够了。\n\n- 运行`make`命令，这个是编译过程，运行的时间可能稍长一些\n\n- 执行`install`命令。如果在第第一步骤中配置的程序安装路径不在系统的环境量PATH中，需要自己添加（下面会介绍在centos下修改环境变量）\n\n- 关于源码的编译也可以参考[这篇博客](http://blog.csdn.net/zhaoweitco/article/details/12677089).\n\n### 安装chrome\n\n直接访问[官网](https://www.google.com/chrome/browser/desktop/index.html)下载Linux版本\n\n可先尝试运行如下代码：\n\n```bash\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\nsudo dpkg -i google-chrome-stable_current_amd64.deb\n```\n\n若出现错误，根据提示输入如下代码安装依赖包：\n\n```bash\nsudo apt-get install -f\n```\n\n注意：若重启电脑后，chrome等软件提示：`账号登录信息已过期，需重新登录`，这是ubuntu的`密钥环`导致的；`bash`启动`密码和秘钥`，在`密码-登录`右键-`修改密码`，新密码置空即可。\n\n### 安装SS\n\n实时教程可以在`简书`或`必应`中搜索\n\n#### SS-qt5(GUI)\n\n建议不使用GUI版本,推荐命令行后台运行\n\n**安装**\n\n```bash\nsudo add-apt-repository ppa:hzwhuang/ss-qt5  #加入源\nsudo apt-get update #更新源\nsudo apt-get install shadowsocks-qt5 #安装SS\n```\n\n**参数设置**\n\n```json   \n{\n\"server\":\"104.128.87.111\",\n\"server_port\":443,\n\"local_address\": \"127.0.0.1\",\n\"local_port\":1080,\n\"password\":\"Mjg5NTIzMz\",\n\"timeout\":600,\n\"method\":\"aes-256-cfb\"\n}\n```\n\n可以访问搬瓦工[国内镜像](http://banwagong.cn/)查看最新SS相关配置参数。另外,服务器端重新安装系统难道SS会更快?有待证实.\n\n**全局代理**设置：`System Setting > Network > Network proxy > Method > ManualSocket Host 127.0.0.1 1080`。 备注：这样chrome就可以FQ了，但是firefox还需要进一步设置（此处略）。\n\n**PAC代理**\n- 安装`genpac`\n\n```bash\nsudo pip install genpac\n```\n\n倘若提示没有`pip`命令，可以尝试输入`pip --help`，其他命令遇到类似情况同理。\n\n生成autoproxy.pac文件\n\n```bash\ngenpac -p \"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=\"autoproxy.pac\"\n```\n\n更改系统代理设置 `System settings > Network > Network ProxyMethod > AutomaticConfiguration URL 是 autoproxy.pac文件的路径，设置为/home/yaro/autoproxy.pac`\n\n#### SS或者SS-libev\n\n执行以下命令安装\n\n```bash\nsudo pip install shadowsocks\n```\n\n上述命令会同时安装`sslocal`和`ssserver`两个程序,客户端用前者,服务器用后者.\n\n可以用`whereis`(查找程序命令)查找`sslocal`位置\n\n```bash\nwhereis sslocal\n#默认返回如下:\nsslocal: /usr/local/bin/sslocal\n```\n\n创建配置文件\n\n```bash\nsudo vim /home/yaro/.yaro/shadowsocks/shadowsocks.json   ##创建.json文件,任意目录,内容如下:\n```\n\n```json\n{ \n\"server\":\"104.128.87.111\", \n\"server_port\":443, \n\"local_address\": \"127.0.0.1\", \n\"local_port\":1080,\n\"password\":\"Mjg5NTIzMz\", \n\"timeout\":600, \"\nmethod\":\"aes-256-cfb\" \n}\n```\n\n启动客户端\n\n```bash\nsslocal -c  /home/yaro/.yaro/shadowsocks/shadowsocks.json #在终端运行,不能停止不能关闭\nsudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json -d start #后台运行\n#其他参数可以`sslocal --help`.\n```\n\n开机启动\n\n早期的ubuntu版本可以通过写入`rc.local`的方式实现开机运行代码.\n\n```bash\nsudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json -d start\n```\n\nubuntu15.04后,`rc.local`无效,开始使用systemd管理开机启动,可通过写入服务的方式实现开机运行:\n\n注:`sslocal`初始位置为`/usr/local/bin/sslocal`.\n\n创建服务文件\n\n```bash\nsudo vim /lib/systemd/system/sslocal@myserver.service\n```\n\n内容如下:\n\n```bash\n[Unit]\nDescription=Shadowsocks Client Start\nAfter=network.target\n\n[Service]\nType=simple\nUser=yaro\nExecStart=/usr/local/bin/sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n```\n\n**注意:**地址记得用绝对地址,不要用`~/`地址.\n\n将这个文件软连接到`/etc/systemd/system/multi-user.target.wants/`\n\n```bash\nsudo ln -s /lib/systemd/system/sslocal@myserver.service /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service\n```\n\n查看软连接文件权限(需要可执行):\n\n```bash\nls -l /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service\n```\n\n重启电脑,OK! 访问google,或通过如下命令查看服务运行状态(查找问题)\n\n```bash\nsudo systemctl status sslocal@myserver.service\n```\n\n局部代理/全局代理设置同上.\n\n[参考1](https://www.linuxbabe.com/desktop-linux/how-to-install-and-use-shadowsocks-command-line-client)-ubuntu安装SS  \n[参考2](http://www.linuxidc.com/Linux/2016-04/129727.htm)-Ubuntu systemd添加开机启动\n\n#### proxychains\n\nproxychains支持http/https/socks4/socks5代理方式之间的切换.\n\n安装\n\n```bash\nsudo apt install proxychains\n```\n\n配置\n\n```bash\nsudo vi /etc/proxychains.conf\n#将socks4 127.0.0.1 9095改为socks5  127.0.0.1 1080\n```\n\n使用\n\n```bash\nwget google.com   #直接连google\nproxychains wget google.com #通过sock5代理链接google\nsudo proxychains wget google.com #注意proxy要紧挨这功能命令\nsudo proxychains apt install typora #前提要能访问typora的资源站(先FQ)\n```\n\n其他说明\n\nproxychains配置文件中可以设置三种代理方式:动态代理(依次选择设定的代理方式,有一个可用即可),严格代理(依次选择,但是必须都能用),随机代理(随机选择设定的代理方式)\n\n类似软件:proxychains是只适用于linux/iOS系统,类似的还有polipo(让所有的程序全部走socks5代理),windows平台可以考虑privoxy.\n\n### 卸载不常用软件\n\n卸载libreoffice\n\n```bash\nsudo apt-get purge libreoffice-common\n```\n\n删除amazon链接\n\n```bash\nsudo apt purge unity-webapps-common\n```\n\n删除不用的软件\n\n```bash\nsudo apt-get purge thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install onboard deja-dup\n#上述软件以此是:邮件客户端 多媒体播放 音乐mp3播放 IM通讯 刻录光盘 扫描软件 麻将(gnome-mahjongg) 纸牌(aisleriot) 扫雷(gnome-mines) 象棋 bt下载软件 屏幕阅读器(gnome-orca) 自带浏览器 数字游戏 远程桌面 虚拟键盘(onboard) 备份软件\n```\n\n### 安装常用软件\n\n**常用软件:**sogou输入法/typora(可以用sublime插件实现MD)/坚果云/网易云音乐/sublime，以及源自带的vim(记得安装`vim-gnome`)/goldendict,终端工具zsh/oh-my-zsh([参考官网](https://github.com/robbyrussell/oh-my-zsh)).\n\n**安装方法**\n\n- 源自带的软件 `sudo apt-get install filename` 若是不知道软件名称，可以如下查看 `sudo dpkg -l *filename*`（`*`)为通配符\n\n- 第三方软件 下载`.deb`格式安装包，如下安装 `sudo dpkg -i filename`\n\n备注1:Goldendict的配置及字典可以[参考网站](https://blog.yuanbin.me/posts/2013/01/goldendictxia-san-da-you-zhi-ci-ku-shi-yong-xiao-ji.html)\n备注2:sublime无法输入中文可以[参考网站1](https://github.com/lyfeyaj/sublime-text-imfix)和[参考网站2](http://www.jianshu.com/p/bf05fb3a4709)\n备注3:sublime字体设置,打开`sublime`的`Preference-setting`在其中加入如下代码\n`{font_face\": \"Droid Sans Fallback\", \"font_size\": 14}` 备注:查看中文字体名称可以输入`fc-list :lang=zh-cn`\n\n###设置开机启动常用项\n\n需要开机启动的项目如搜狗输入法（依托于fcitx，启动fcitx）/SS/坚果云等\n\n将相关程序复制到用户自定义的开机项即可\n\n```bash\nsudo cp /usr/share/applications/fcitx.desktop ~/.config/autostart/fcitx.desktop\n```\n\n增加可执行权限\n\n```bash\nsudo chmod +x ~/.config/autostart/fctix.desktop\n```\n\n### 设置`~/`下文件名为英文\n\n在安装是若选择中文安装，文件夹全部为中文，如`下载`/`音乐`等，这在终端中很不方便输入。\n\n依次运行如下命令 \n\n```bash\nexport LANG=en_US\nxdg-user-dirs-gtk-update\nexport LANG=zh_CN\n```\n\n或者是通过设置-语言支持-设置英文，再重启/注销。\n\n### 卸载系统内置软件\n\n不需要的软件：firefox/libreoffic*/系统自带浏览器/邮件客户端/gedit等\n\n倘若不清楚软件的名称,可以 `sudo dpkg -l libreoffice*`\n\n或者,利用`tab`自动补全功能 `sudo apt purge libreoffice` 然后按`两次Tab`即可.\n\n### 安装思源字体\n\n思源字体可以[点击此处](https://github.com/adobe-fonts/source-han-sans/tree/release)下载\n\n将`思源字体`安装包放入`~/.fonts`重启即可.双击安装的话会安装在系统文件夹.\n\n话说系统自带的字体`Droid Sans Fallback`也挺好O(∩_∩)O哈哈~\n\n## 其他问题\n\n### Ubuntu出现了内部错误\n\n```bash\nsudo apt-get remove apport\n```\n\n### Ubuntu root 和user切换\n\n[参考网站1](http://www.cnblogs.com/weiweiqiao99/archive/2010/11/10/1873761.html)\n\n**从user切换到root用户**\n\nubuntu默认登录user,可以用`sudo`临时授权使用root权限;此时可以使用`sudo su`切换到root用户\n\n注意:默认的ubuntu的root用户没有固定密码,是动态随机变动的,直接使用`su`是不可以的,因为我们不知道root的密码.\n\n**从root用户切回user用户**\n\n使用`su yaro`即可,或输入`exit`,也可以`ctrl+D`快捷键.\n\n**给root设定一个密码**\n\n默认root用户无固定密码,且被锁定,可以通过`sudo passwd root`设定密码.\n\n**禁用/启用root登录**\n\n禁用:`sudo passwd -l root`(禁用而已,密码还在);\n\n启用:`sudo passwd -u root` .\n\n## Ubuntu unity桌面快捷键\n\n注：在普通 PC 上，Super 键通常就是 Win 键， Numpad 表示数字小键盘。\n\n### Launcher (启动器)\n\n`Super`（按住）- 调用启动器。`Super-1` 或 `2`或 `3`直至`0`\\- 打开或聚焦到应用程序。`Super-T`\\- 打开垃圾箱。`Alt-F1`\\- 把键盘聚焦在启动器上.`Alt-F2`\\- 以“特殊模式”调用托盘，用来运行命令。`Ctrl-Alt-T` \\- 启动终端窗口。\n\n### Dash (托盘）\n\n`Super`(敲击) - 敲击打开托盘。`Super-A`\\- 打开应用程序托盘。`Super-F` \\- 打开文件及文件夹托盘。\n\n### Panel (面板）\n\nF10 - 打开面板上的第一个菜单。`Window Management` （窗口管理）`Super-?` \\- 扩展模式，缩小所有窗口到所有工作区。`Super-D` -最小化所有窗口; 再次使用该快捷键的话恢复所有窗口。（不起作用时，可以尝试再按住`Ctrl` ）\n\n### Window Placement （窗口放置）\n\n假如你反复点击某个组合键，Unity 会循环改变窗口宽度，例如 `Ctrl-Alt-numpad 5`:`Ctrl-Alt-Numpad 7` \\- 放置窗口到屏幕左上角。`Ctrl-Alt-Numpad 8` \\- 放置窗口到屏幕上半部分。`Ctrl-Alt-Numpad 9` \\- 放置窗口到屏幕右上角。`Ctrl-Alt-Numpad 4` \\- 放置窗口到屏幕左侧。`Ctrl-Alt-Numpad 5` \\- 在屏幕中间位置居中/最大化窗口。`Ctrl-Alt-Numpad 6` \\- 放置窗口到屏幕右侧。`Ctrl-Alt-Numpad 1` \\- 放置窗口到屏幕左下角。`Ctrl-Alt-Numpad 2` \\- 放置窗口到屏幕下半部分。`Ctrl-Alt-Numpad 3` \\- 放置窗口到屏幕右下角。`Ctrl-Alt-Numpad 0` \\- 最大化窗口。\n\n### Workspace Management （工作区管理）\n\n`Super-W` \\- 平铺模式列出所有窗口`Super-S` \\- 浏览模式，缩小所有工作区，让你管理窗口。`Ctrl-Alt-← / → / ↑ / ↓` \\- 切换工作区。`Ctrl-Alt-Shift-← / → / ↑ / ↓` \\- 放置窗口到新工作区。\n\n### Mouse Tricks （鼠标技巧）\n\n最大化 - 拖动窗口到顶部面板就会最大化该窗口。最大化按钮上中击 - 垂直最大化窗口。最大化按钮上右击 - 水平最大化窗口。平铺 - 拖动窗口到左边/右边边缘，会自动在屏幕的一边平铺窗口。恢复 - 在顶部面板会把最大化的窗口的标题栏往下托会自动还原到原始大小。在应用程序的启动器图标上中击 - 如果之前已打开过此程序，此操作会为该程序再打开一个新的独立进程。在顶部面板上中击（不是菜单）- 把当前窗口放置到所有窗口的最后面。\n","source":"_posts/Ubuntu安装及调试记录.md","raw":"---\ntitle: Ubuntu安装及调试记录\ndate: 2016-11-20 09:08:16\ntags:\n- Ubuntu安装\n- Ubuntu快捷键\n- Shandowsocks配置\n---\n老婆的笔记本有两个显卡,安装win10的时候总是自动更新显卡;但是同时安装两个显卡,重启之后立马黑屏,蛋好疼...没办法,只能试试linux系统了,网上参考了下,Ubuntu算是比较容易入门的了,于是乎就折腾了好几天.现在用着感觉还不错的说,嘿嘿^_^..本文主要是个人操作过程的记录,其中对于新手来说还是有很多坑的,亲们可以参考下.\n\n## 安装Ubuntu\n\nUbuntu[官网下载](http://cn.ubuntu.com/download/)镜像文件，可直接拖动链接到迅雷下载；\n\n制作启动U盘：一定使用要**使用最新版**的**[UltraISO 软碟通](http://cn.ezbsystems.com/ultraiso/)**,否则可能出现错误，原因参考[U盘刻录无法启动原因](http://www.ubuntukylin.com/news/shownews.php?lang=cn&id=362)；\n\n设置电脑BIOS（F2进入）通过U盘启动，倘若无法启动，可尝试开启UEFI；\n\n安装Ubuntu.\n\n## 分区\n\n系统分区和数据分区 系统分区包括`/`和`swap` 数据分区包括`/home`和`其他数据`\n\n分区建议\n\n根分区/（系统主要文件）大小建议50G，swap交换分区大小参考物理内存,数据/home分区500G，剩下空间分两个区不挂载\n\n实际分区情况：`/`40G，`swap`4g，`其他`全部给`home`分区。\n\n<!-- more -->\n\n## 配置及安装软件\n\n### 解决桌面闪屏问题\n\n倘若鼠标不间断闪动，鼠标可以移动到桌面右边界之外，可如下解决：`设置`-`显示`-`关闭unkwon display`即可。\n\n### ubuntu安装软件的常见方式\n\n软件安装参考[这个网页](http://www.cnblogs.com/dubaokun/p/3558848.html).\n\n**直接通过`apt-get`安装**\n\n有些软件都是包含在相应的库中,通过添加库,便可以直接安装.这种方法安装的程序版本可能不是最新版(比如`node.js`).\n\n**下载`.deb`安装包手动安装**\n\n通过手动或`wget`等命令下载安装包,调用`dpkg -i package`安装\n\n**直接下载二进制文件解压即可用**\n\n- 下载二进制文件(Binaries)\n\n- 下载后将安装包移动到要安装到的文件夹下，根据个人喜好设置即可,这里我放在了`/home/kun/mysofltware/ `下面\n\n- 解压到当前文件夹下运行 \n\n- 进入 解压后的目录bin目录下，执行ls会看到两个文件`node`,`npm`. 然后执行`./node -v `，如果显示出 版本号说明我们下载的程序包是没有问题的(这里以`node.js`的安装为例)\n\n- 添加到PATH实现任意目录访问\n\n\t> 因为 `/home/kun/mysofltware/node-v0.10.26-linux-x64/bin`这个目录是不在环境变量中的，所以只能到该目录下才能node的程序。如果在其他的目录下执行node命令的话 ，必须通过绝对路径访问才可以的.\n\t>如果要在任意目录可以访问的话，需要将node 所在的目录，添加`PATH环境变量`里面，或者通过软连接的形式将`node`和`npm`链接到系统默认的`PATH目录`下的一个，以下分别介绍:\n\n\t- 软连接方式\n\n\t\t在终端执行`echo $PATH`可以获取`PATH变量`包含的内容，系统默认的`PATH环境变量`包括`/usr/local/bin`:`/usr/bin`:`/bin`:`/usr/local/sbin`:`/usr/sbin`:`/sbin`:，冒号为分隔符。所以我们可以将`node`和`npm`链接到`/usr/local/bin `目录执行如下命令  \n\n\t\t```bash\n\t\tln -s /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/node /usr/local/bin/node\n\t\tln -s /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/npm /usr/local/bin/npm\n\t\t```\n\n\t\t通过如此，就可以访问Node了，同时node部署也已经完毕。\n\n\t- 环境变量配置\n\n\t\t在node目录下执行pwd 获取node所在的目录，要把这个目录添加到PATH环境变量\n\t\t执行su 输入密码切换到root用户。通过命令打开`vi /etc/profile`profile文件,添加如下代码:\n\n\t\t```bash\n\t\tPATH=$PATH:/home/kun/mysofltware/node-v0.10.26-linux-x64/bin\n\t\t```\n\n\t\t执行命令`source/etc/profile`可以使变量生效，然后执行`echo $PATH`，看看输出内容是否包含自己添加的内容\n\t\t然后到任意目录下去执行一次执行`node -v`,`npm -v`,尝试是否OK? \n\n**下载源码,手动编译二进制**\n\n- 安装编译环境,安装依赖\n\n- 进入`cd`源码路径,执行里面的`configure文件`,即`./configure --prefix=/`生成二进制文件路径.\n\n\t> **命令解释:**`--prefix=/`用于指定安装路径,\n\t若不指定prefix，则可执行文件默认放在`/usr /local/bin`，库文件默认放在`/usr/local/lib`，配置文件默认放在`/usr/local/etc`,其它的资源文件放在`/usr /local/share`。你要卸载这个程序，要么在原来的make目录下用一次`make uninstall`（前提是make文件指定过uninstall）,要么去上述目录里面把相关的文件一个个手工删掉。\n\t若指定prefix，直接删掉一个文件夹就够了。\n\n- 运行`make`命令，这个是编译过程，运行的时间可能稍长一些\n\n- 执行`install`命令。如果在第第一步骤中配置的程序安装路径不在系统的环境量PATH中，需要自己添加（下面会介绍在centos下修改环境变量）\n\n- 关于源码的编译也可以参考[这篇博客](http://blog.csdn.net/zhaoweitco/article/details/12677089).\n\n### 安装chrome\n\n直接访问[官网](https://www.google.com/chrome/browser/desktop/index.html)下载Linux版本\n\n可先尝试运行如下代码：\n\n```bash\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\nsudo dpkg -i google-chrome-stable_current_amd64.deb\n```\n\n若出现错误，根据提示输入如下代码安装依赖包：\n\n```bash\nsudo apt-get install -f\n```\n\n注意：若重启电脑后，chrome等软件提示：`账号登录信息已过期，需重新登录`，这是ubuntu的`密钥环`导致的；`bash`启动`密码和秘钥`，在`密码-登录`右键-`修改密码`，新密码置空即可。\n\n### 安装SS\n\n实时教程可以在`简书`或`必应`中搜索\n\n#### SS-qt5(GUI)\n\n建议不使用GUI版本,推荐命令行后台运行\n\n**安装**\n\n```bash\nsudo add-apt-repository ppa:hzwhuang/ss-qt5  #加入源\nsudo apt-get update #更新源\nsudo apt-get install shadowsocks-qt5 #安装SS\n```\n\n**参数设置**\n\n```json   \n{\n\"server\":\"104.128.87.111\",\n\"server_port\":443,\n\"local_address\": \"127.0.0.1\",\n\"local_port\":1080,\n\"password\":\"Mjg5NTIzMz\",\n\"timeout\":600,\n\"method\":\"aes-256-cfb\"\n}\n```\n\n可以访问搬瓦工[国内镜像](http://banwagong.cn/)查看最新SS相关配置参数。另外,服务器端重新安装系统难道SS会更快?有待证实.\n\n**全局代理**设置：`System Setting > Network > Network proxy > Method > ManualSocket Host 127.0.0.1 1080`。 备注：这样chrome就可以FQ了，但是firefox还需要进一步设置（此处略）。\n\n**PAC代理**\n- 安装`genpac`\n\n```bash\nsudo pip install genpac\n```\n\n倘若提示没有`pip`命令，可以尝试输入`pip --help`，其他命令遇到类似情况同理。\n\n生成autoproxy.pac文件\n\n```bash\ngenpac -p \"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=\"autoproxy.pac\"\n```\n\n更改系统代理设置 `System settings > Network > Network ProxyMethod > AutomaticConfiguration URL 是 autoproxy.pac文件的路径，设置为/home/yaro/autoproxy.pac`\n\n#### SS或者SS-libev\n\n执行以下命令安装\n\n```bash\nsudo pip install shadowsocks\n```\n\n上述命令会同时安装`sslocal`和`ssserver`两个程序,客户端用前者,服务器用后者.\n\n可以用`whereis`(查找程序命令)查找`sslocal`位置\n\n```bash\nwhereis sslocal\n#默认返回如下:\nsslocal: /usr/local/bin/sslocal\n```\n\n创建配置文件\n\n```bash\nsudo vim /home/yaro/.yaro/shadowsocks/shadowsocks.json   ##创建.json文件,任意目录,内容如下:\n```\n\n```json\n{ \n\"server\":\"104.128.87.111\", \n\"server_port\":443, \n\"local_address\": \"127.0.0.1\", \n\"local_port\":1080,\n\"password\":\"Mjg5NTIzMz\", \n\"timeout\":600, \"\nmethod\":\"aes-256-cfb\" \n}\n```\n\n启动客户端\n\n```bash\nsslocal -c  /home/yaro/.yaro/shadowsocks/shadowsocks.json #在终端运行,不能停止不能关闭\nsudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json -d start #后台运行\n#其他参数可以`sslocal --help`.\n```\n\n开机启动\n\n早期的ubuntu版本可以通过写入`rc.local`的方式实现开机运行代码.\n\n```bash\nsudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json -d start\n```\n\nubuntu15.04后,`rc.local`无效,开始使用systemd管理开机启动,可通过写入服务的方式实现开机运行:\n\n注:`sslocal`初始位置为`/usr/local/bin/sslocal`.\n\n创建服务文件\n\n```bash\nsudo vim /lib/systemd/system/sslocal@myserver.service\n```\n\n内容如下:\n\n```bash\n[Unit]\nDescription=Shadowsocks Client Start\nAfter=network.target\n\n[Service]\nType=simple\nUser=yaro\nExecStart=/usr/local/bin/sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n```\n\n**注意:**地址记得用绝对地址,不要用`~/`地址.\n\n将这个文件软连接到`/etc/systemd/system/multi-user.target.wants/`\n\n```bash\nsudo ln -s /lib/systemd/system/sslocal@myserver.service /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service\n```\n\n查看软连接文件权限(需要可执行):\n\n```bash\nls -l /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service\n```\n\n重启电脑,OK! 访问google,或通过如下命令查看服务运行状态(查找问题)\n\n```bash\nsudo systemctl status sslocal@myserver.service\n```\n\n局部代理/全局代理设置同上.\n\n[参考1](https://www.linuxbabe.com/desktop-linux/how-to-install-and-use-shadowsocks-command-line-client)-ubuntu安装SS  \n[参考2](http://www.linuxidc.com/Linux/2016-04/129727.htm)-Ubuntu systemd添加开机启动\n\n#### proxychains\n\nproxychains支持http/https/socks4/socks5代理方式之间的切换.\n\n安装\n\n```bash\nsudo apt install proxychains\n```\n\n配置\n\n```bash\nsudo vi /etc/proxychains.conf\n#将socks4 127.0.0.1 9095改为socks5  127.0.0.1 1080\n```\n\n使用\n\n```bash\nwget google.com   #直接连google\nproxychains wget google.com #通过sock5代理链接google\nsudo proxychains wget google.com #注意proxy要紧挨这功能命令\nsudo proxychains apt install typora #前提要能访问typora的资源站(先FQ)\n```\n\n其他说明\n\nproxychains配置文件中可以设置三种代理方式:动态代理(依次选择设定的代理方式,有一个可用即可),严格代理(依次选择,但是必须都能用),随机代理(随机选择设定的代理方式)\n\n类似软件:proxychains是只适用于linux/iOS系统,类似的还有polipo(让所有的程序全部走socks5代理),windows平台可以考虑privoxy.\n\n### 卸载不常用软件\n\n卸载libreoffice\n\n```bash\nsudo apt-get purge libreoffice-common\n```\n\n删除amazon链接\n\n```bash\nsudo apt purge unity-webapps-common\n```\n\n删除不用的软件\n\n```bash\nsudo apt-get purge thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install onboard deja-dup\n#上述软件以此是:邮件客户端 多媒体播放 音乐mp3播放 IM通讯 刻录光盘 扫描软件 麻将(gnome-mahjongg) 纸牌(aisleriot) 扫雷(gnome-mines) 象棋 bt下载软件 屏幕阅读器(gnome-orca) 自带浏览器 数字游戏 远程桌面 虚拟键盘(onboard) 备份软件\n```\n\n### 安装常用软件\n\n**常用软件:**sogou输入法/typora(可以用sublime插件实现MD)/坚果云/网易云音乐/sublime，以及源自带的vim(记得安装`vim-gnome`)/goldendict,终端工具zsh/oh-my-zsh([参考官网](https://github.com/robbyrussell/oh-my-zsh)).\n\n**安装方法**\n\n- 源自带的软件 `sudo apt-get install filename` 若是不知道软件名称，可以如下查看 `sudo dpkg -l *filename*`（`*`)为通配符\n\n- 第三方软件 下载`.deb`格式安装包，如下安装 `sudo dpkg -i filename`\n\n备注1:Goldendict的配置及字典可以[参考网站](https://blog.yuanbin.me/posts/2013/01/goldendictxia-san-da-you-zhi-ci-ku-shi-yong-xiao-ji.html)\n备注2:sublime无法输入中文可以[参考网站1](https://github.com/lyfeyaj/sublime-text-imfix)和[参考网站2](http://www.jianshu.com/p/bf05fb3a4709)\n备注3:sublime字体设置,打开`sublime`的`Preference-setting`在其中加入如下代码\n`{font_face\": \"Droid Sans Fallback\", \"font_size\": 14}` 备注:查看中文字体名称可以输入`fc-list :lang=zh-cn`\n\n###设置开机启动常用项\n\n需要开机启动的项目如搜狗输入法（依托于fcitx，启动fcitx）/SS/坚果云等\n\n将相关程序复制到用户自定义的开机项即可\n\n```bash\nsudo cp /usr/share/applications/fcitx.desktop ~/.config/autostart/fcitx.desktop\n```\n\n增加可执行权限\n\n```bash\nsudo chmod +x ~/.config/autostart/fctix.desktop\n```\n\n### 设置`~/`下文件名为英文\n\n在安装是若选择中文安装，文件夹全部为中文，如`下载`/`音乐`等，这在终端中很不方便输入。\n\n依次运行如下命令 \n\n```bash\nexport LANG=en_US\nxdg-user-dirs-gtk-update\nexport LANG=zh_CN\n```\n\n或者是通过设置-语言支持-设置英文，再重启/注销。\n\n### 卸载系统内置软件\n\n不需要的软件：firefox/libreoffic*/系统自带浏览器/邮件客户端/gedit等\n\n倘若不清楚软件的名称,可以 `sudo dpkg -l libreoffice*`\n\n或者,利用`tab`自动补全功能 `sudo apt purge libreoffice` 然后按`两次Tab`即可.\n\n### 安装思源字体\n\n思源字体可以[点击此处](https://github.com/adobe-fonts/source-han-sans/tree/release)下载\n\n将`思源字体`安装包放入`~/.fonts`重启即可.双击安装的话会安装在系统文件夹.\n\n话说系统自带的字体`Droid Sans Fallback`也挺好O(∩_∩)O哈哈~\n\n## 其他问题\n\n### Ubuntu出现了内部错误\n\n```bash\nsudo apt-get remove apport\n```\n\n### Ubuntu root 和user切换\n\n[参考网站1](http://www.cnblogs.com/weiweiqiao99/archive/2010/11/10/1873761.html)\n\n**从user切换到root用户**\n\nubuntu默认登录user,可以用`sudo`临时授权使用root权限;此时可以使用`sudo su`切换到root用户\n\n注意:默认的ubuntu的root用户没有固定密码,是动态随机变动的,直接使用`su`是不可以的,因为我们不知道root的密码.\n\n**从root用户切回user用户**\n\n使用`su yaro`即可,或输入`exit`,也可以`ctrl+D`快捷键.\n\n**给root设定一个密码**\n\n默认root用户无固定密码,且被锁定,可以通过`sudo passwd root`设定密码.\n\n**禁用/启用root登录**\n\n禁用:`sudo passwd -l root`(禁用而已,密码还在);\n\n启用:`sudo passwd -u root` .\n\n## Ubuntu unity桌面快捷键\n\n注：在普通 PC 上，Super 键通常就是 Win 键， Numpad 表示数字小键盘。\n\n### Launcher (启动器)\n\n`Super`（按住）- 调用启动器。`Super-1` 或 `2`或 `3`直至`0`\\- 打开或聚焦到应用程序。`Super-T`\\- 打开垃圾箱。`Alt-F1`\\- 把键盘聚焦在启动器上.`Alt-F2`\\- 以“特殊模式”调用托盘，用来运行命令。`Ctrl-Alt-T` \\- 启动终端窗口。\n\n### Dash (托盘）\n\n`Super`(敲击) - 敲击打开托盘。`Super-A`\\- 打开应用程序托盘。`Super-F` \\- 打开文件及文件夹托盘。\n\n### Panel (面板）\n\nF10 - 打开面板上的第一个菜单。`Window Management` （窗口管理）`Super-?` \\- 扩展模式，缩小所有窗口到所有工作区。`Super-D` -最小化所有窗口; 再次使用该快捷键的话恢复所有窗口。（不起作用时，可以尝试再按住`Ctrl` ）\n\n### Window Placement （窗口放置）\n\n假如你反复点击某个组合键，Unity 会循环改变窗口宽度，例如 `Ctrl-Alt-numpad 5`:`Ctrl-Alt-Numpad 7` \\- 放置窗口到屏幕左上角。`Ctrl-Alt-Numpad 8` \\- 放置窗口到屏幕上半部分。`Ctrl-Alt-Numpad 9` \\- 放置窗口到屏幕右上角。`Ctrl-Alt-Numpad 4` \\- 放置窗口到屏幕左侧。`Ctrl-Alt-Numpad 5` \\- 在屏幕中间位置居中/最大化窗口。`Ctrl-Alt-Numpad 6` \\- 放置窗口到屏幕右侧。`Ctrl-Alt-Numpad 1` \\- 放置窗口到屏幕左下角。`Ctrl-Alt-Numpad 2` \\- 放置窗口到屏幕下半部分。`Ctrl-Alt-Numpad 3` \\- 放置窗口到屏幕右下角。`Ctrl-Alt-Numpad 0` \\- 最大化窗口。\n\n### Workspace Management （工作区管理）\n\n`Super-W` \\- 平铺模式列出所有窗口`Super-S` \\- 浏览模式，缩小所有工作区，让你管理窗口。`Ctrl-Alt-← / → / ↑ / ↓` \\- 切换工作区。`Ctrl-Alt-Shift-← / → / ↑ / ↓` \\- 放置窗口到新工作区。\n\n### Mouse Tricks （鼠标技巧）\n\n最大化 - 拖动窗口到顶部面板就会最大化该窗口。最大化按钮上中击 - 垂直最大化窗口。最大化按钮上右击 - 水平最大化窗口。平铺 - 拖动窗口到左边/右边边缘，会自动在屏幕的一边平铺窗口。恢复 - 在顶部面板会把最大化的窗口的标题栏往下托会自动还原到原始大小。在应用程序的启动器图标上中击 - 如果之前已打开过此程序，此操作会为该程序再打开一个新的独立进程。在顶部面板上中击（不是菜单）- 把当前窗口放置到所有窗口的最后面。\n","slug":"Ubuntu安装及调试记录","published":1,"updated":"2016-11-20T14:10:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civs44x6l0004jcvpy2xjd3rx","content":"<p>老婆的笔记本有两个显卡,安装win10的时候总是自动更新显卡;但是同时安装两个显卡,重启之后立马黑屏,蛋好疼…没办法,只能试试linux系统了,网上参考了下,Ubuntu算是比较容易入门的了,于是乎就折腾了好几天.现在用着感觉还不错的说,嘿嘿^_^..本文主要是个人操作过程的记录,其中对于新手来说还是有很多坑的,亲们可以参考下.</p>\n<h2 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h2><p>Ubuntu<a href=\"http://cn.ubuntu.com/download/\" target=\"_blank\" rel=\"external\">官网下载</a>镜像文件，可直接拖动链接到迅雷下载；</p>\n<p>制作启动U盘：一定使用要<strong>使用最新版</strong>的<strong><a href=\"http://cn.ezbsystems.com/ultraiso/\" target=\"_blank\" rel=\"external\">UltraISO 软碟通</a></strong>,否则可能出现错误，原因参考<a href=\"http://www.ubuntukylin.com/news/shownews.php?lang=cn&amp;id=362\" target=\"_blank\" rel=\"external\">U盘刻录无法启动原因</a>；</p>\n<p>设置电脑BIOS（F2进入）通过U盘启动，倘若无法启动，可尝试开启UEFI；</p>\n<p>安装Ubuntu.</p>\n<h2 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h2><p>系统分区和数据分区 系统分区包括<code>/</code>和<code>swap</code> 数据分区包括<code>/home</code>和<code>其他数据</code></p>\n<p>分区建议</p>\n<p>根分区/（系统主要文件）大小建议50G，swap交换分区大小参考物理内存,数据/home分区500G，剩下空间分两个区不挂载</p>\n<p>实际分区情况：<code>/</code>40G，<code>swap</code>4g，<code>其他</code>全部给<code>home</code>分区。</p>\n<a id=\"more\"></a>\n<h2 id=\"配置及安装软件\"><a href=\"#配置及安装软件\" class=\"headerlink\" title=\"配置及安装软件\"></a>配置及安装软件</h2><h3 id=\"解决桌面闪屏问题\"><a href=\"#解决桌面闪屏问题\" class=\"headerlink\" title=\"解决桌面闪屏问题\"></a>解决桌面闪屏问题</h3><p>倘若鼠标不间断闪动，鼠标可以移动到桌面右边界之外，可如下解决：<code>设置</code>-<code>显示</code>-<code>关闭unkwon display</code>即可。</p>\n<h3 id=\"ubuntu安装软件的常见方式\"><a href=\"#ubuntu安装软件的常见方式\" class=\"headerlink\" title=\"ubuntu安装软件的常见方式\"></a>ubuntu安装软件的常见方式</h3><p>软件安装参考<a href=\"http://www.cnblogs.com/dubaokun/p/3558848.html\" target=\"_blank\" rel=\"external\">这个网页</a>.</p>\n<p><strong>直接通过<code>apt-get</code>安装</strong></p>\n<p>有些软件都是包含在相应的库中,通过添加库,便可以直接安装.这种方法安装的程序版本可能不是最新版(比如<code>node.js</code>).</p>\n<p><strong>下载<code>.deb</code>安装包手动安装</strong></p>\n<p>通过手动或<code>wget</code>等命令下载安装包,调用<code>dpkg -i package</code>安装</p>\n<p><strong>直接下载二进制文件解压即可用</strong></p>\n<ul>\n<li><p>下载二进制文件(Binaries)</p>\n</li>\n<li><p>下载后将安装包移动到要安装到的文件夹下，根据个人喜好设置即可,这里我放在了<code>/home/kun/mysofltware/</code>下面</p>\n</li>\n<li><p>解压到当前文件夹下运行 </p>\n</li>\n<li><p>进入 解压后的目录bin目录下，执行ls会看到两个文件<code>node</code>,<code>npm</code>. 然后执行<code>./node -v</code>，如果显示出 版本号说明我们下载的程序包是没有问题的(这里以<code>node.js</code>的安装为例)</p>\n</li>\n<li><p>添加到PATH实现任意目录访问</p>\n<blockquote>\n<p>因为 <code>/home/kun/mysofltware/node-v0.10.26-linux-x64/bin</code>这个目录是不在环境变量中的，所以只能到该目录下才能node的程序。如果在其他的目录下执行node命令的话 ，必须通过绝对路径访问才可以的.<br>如果要在任意目录可以访问的话，需要将node 所在的目录，添加<code>PATH环境变量</code>里面，或者通过软连接的形式将<code>node</code>和<code>npm</code>链接到系统默认的<code>PATH目录</code>下的一个，以下分别介绍:</p>\n</blockquote>\n<ul>\n<li><p>软连接方式</p>\n<p>  在终端执行<code>echo $PATH</code>可以获取<code>PATH变量</code>包含的内容，系统默认的<code>PATH环境变量</code>包括<code>/usr/local/bin</code>:<code>/usr/bin</code>:<code>/bin</code>:<code>/usr/local/sbin</code>:<code>/usr/sbin</code>:<code>/sbin</code>:，冒号为分隔符。所以我们可以将<code>node</code>和<code>npm</code>链接到<code>/usr/local/bin</code>目录执行如下命令  </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln <span class=\"_\">-s</span> /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/node /usr/<span class=\"built_in\">local</span>/bin/node</div><div class=\"line\">ln <span class=\"_\">-s</span> /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/npm /usr/<span class=\"built_in\">local</span>/bin/npm</div></pre></td></tr></table></figure>\n<p>  通过如此，就可以访问Node了，同时node部署也已经完毕。</p>\n</li>\n<li><p>环境变量配置</p>\n<p>  在node目录下执行pwd 获取node所在的目录，要把这个目录添加到PATH环境变量<br>  执行su 输入密码切换到root用户。通过命令打开<code>vi /etc/profile</code>profile文件,添加如下代码:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PATH=<span class=\"variable\">$PATH</span>:/home/kun/mysofltware/node-v0.10.26-linux-x64/bin</div></pre></td></tr></table></figure>\n<p>  执行命令<code>source/etc/profile</code>可以使变量生效，然后执行<code>echo $PATH</code>，看看输出内容是否包含自己添加的内容<br>  然后到任意目录下去执行一次执行<code>node -v</code>,<code>npm -v</code>,尝试是否OK? </p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>下载源码,手动编译二进制</strong></p>\n<ul>\n<li><p>安装编译环境,安装依赖</p>\n</li>\n<li><p>进入<code>cd</code>源码路径,执行里面的<code>configure文件</code>,即<code>./configure --prefix=/</code>生成二进制文件路径.</p>\n<blockquote>\n<p><strong>命令解释:</strong><code>--prefix=/</code>用于指定安装路径,<br>  若不指定prefix，则可执行文件默认放在<code>/usr /local/bin</code>，库文件默认放在<code>/usr/local/lib</code>，配置文件默认放在<code>/usr/local/etc</code>,其它的资源文件放在<code>/usr /local/share</code>。你要卸载这个程序，要么在原来的make目录下用一次<code>make uninstall</code>（前提是make文件指定过uninstall）,要么去上述目录里面把相关的文件一个个手工删掉。<br>  若指定prefix，直接删掉一个文件夹就够了。</p>\n</blockquote>\n</li>\n<li><p>运行<code>make</code>命令，这个是编译过程，运行的时间可能稍长一些</p>\n</li>\n<li><p>执行<code>install</code>命令。如果在第第一步骤中配置的程序安装路径不在系统的环境量PATH中，需要自己添加（下面会介绍在centos下修改环境变量）</p>\n</li>\n<li><p>关于源码的编译也可以参考<a href=\"http://blog.csdn.net/zhaoweitco/article/details/12677089\" target=\"_blank\" rel=\"external\">这篇博客</a>.</p>\n</li>\n</ul>\n<h3 id=\"安装chrome\"><a href=\"#安装chrome\" class=\"headerlink\" title=\"安装chrome\"></a>安装chrome</h3><p>直接访问<a href=\"https://www.google.com/chrome/browser/desktop/index.html\" target=\"_blank\" rel=\"external\">官网</a>下载Linux版本</p>\n<p>可先尝试运行如下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</div><div class=\"line\">sudo dpkg -i google-chrome-stable_current_amd64.deb</div></pre></td></tr></table></figure>\n<p>若出现错误，根据提示输入如下代码安装依赖包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install <span class=\"_\">-f</span></div></pre></td></tr></table></figure>\n<p>注意：若重启电脑后，chrome等软件提示：<code>账号登录信息已过期，需重新登录</code>，这是ubuntu的<code>密钥环</code>导致的；<code>bash</code>启动<code>密码和秘钥</code>，在<code>密码-登录</code>右键-<code>修改密码</code>，新密码置空即可。</p>\n<h3 id=\"安装SS\"><a href=\"#安装SS\" class=\"headerlink\" title=\"安装SS\"></a>安装SS</h3><p>实时教程可以在<code>简书</code>或<code>必应</code>中搜索</p>\n<h4 id=\"SS-qt5-GUI\"><a href=\"#SS-qt5-GUI\" class=\"headerlink\" title=\"SS-qt5(GUI)\"></a>SS-qt5(GUI)</h4><p>建议不使用GUI版本,推荐命令行后台运行</p>\n<p><strong>安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:hzwhuang/ss-qt5  <span class=\"comment\">#加入源</span></div><div class=\"line\">sudo apt-get update <span class=\"comment\">#更新源</span></div><div class=\"line\">sudo apt-get install shadowsocks-qt5 <span class=\"comment\">#安装SS</span></div></pre></td></tr></table></figure>\n<p><strong>参数设置</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"attr\">\"server\"</span>:<span class=\"string\">\"104.128.87.111\"</span>,</div><div class=\"line\"><span class=\"attr\">\"server_port\"</span>:<span class=\"number\">443</span>,</div><div class=\"line\"><span class=\"attr\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\"><span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\"><span class=\"attr\">\"password\"</span>:<span class=\"string\">\"Mjg5NTIzMz\"</span>,</div><div class=\"line\"><span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</div><div class=\"line\"><span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以访问搬瓦工<a href=\"http://banwagong.cn/\" target=\"_blank\" rel=\"external\">国内镜像</a>查看最新SS相关配置参数。另外,服务器端重新安装系统难道SS会更快?有待证实.</p>\n<p><strong>全局代理</strong>设置：<code>System Setting &gt; Network &gt; Network proxy &gt; Method &gt; ManualSocket Host 127.0.0.1 1080</code>。 备注：这样chrome就可以FQ了，但是firefox还需要进一步设置（此处略）。</p>\n<p><strong>PAC代理</strong></p>\n<ul>\n<li>安装<code>genpac</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install genpac</div></pre></td></tr></table></figure>\n<p>倘若提示没有<code>pip</code>命令，可以尝试输入<code>pip --help</code>，其他命令遇到类似情况同理。</p>\n<p>生成autoproxy.pac文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">genpac -p <span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> --gfwlist-proxy=<span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=<span class=\"string\">\"autoproxy.pac\"</span></div></pre></td></tr></table></figure>\n<p>更改系统代理设置 <code>System settings &gt; Network &gt; Network ProxyMethod &gt; AutomaticConfiguration URL 是 autoproxy.pac文件的路径，设置为/home/yaro/autoproxy.pac</code></p>\n<h4 id=\"SS或者SS-libev\"><a href=\"#SS或者SS-libev\" class=\"headerlink\" title=\"SS或者SS-libev\"></a>SS或者SS-libev</h4><p>执行以下命令安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install shadowsocks</div></pre></td></tr></table></figure>\n<p>上述命令会同时安装<code>sslocal</code>和<code>ssserver</code>两个程序,客户端用前者,服务器用后者.</p>\n<p>可以用<code>whereis</code>(查找程序命令)查找<code>sslocal</code>位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">whereis sslocal</div><div class=\"line\"><span class=\"comment\">#默认返回如下:</span></div><div class=\"line\">sslocal: /usr/<span class=\"built_in\">local</span>/bin/sslocal</div></pre></td></tr></table></figure>\n<p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /home/yaro/.yaro/shadowsocks/shadowsocks.json   <span class=\"comment\">##创建.json文件,任意目录,内容如下:</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; </div><div class=\"line\">\"server\":\"104.128.87.111\", </div><div class=\"line\">\"server_port\":443, </div><div class=\"line\">\"local_address\": \"127.0.0.1\", </div><div class=\"line\">\"local_port\":1080,</div><div class=\"line\">\"password\":\"Mjg5NTIzMz\", </div><div class=\"line\">\"timeout\":600, \"</div><div class=\"line\">method\":\"aes-256-cfb\" </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>启动客户端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sslocal -c  /home/yaro/.yaro/shadowsocks/shadowsocks.json <span class=\"comment\">#在终端运行,不能停止不能关闭</span></div><div class=\"line\">sudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json <span class=\"_\">-d</span> start <span class=\"comment\">#后台运行</span></div><div class=\"line\"><span class=\"comment\">#其他参数可以`sslocal --help`.</span></div></pre></td></tr></table></figure>\n<p>开机启动</p>\n<p>早期的ubuntu版本可以通过写入<code>rc.local</code>的方式实现开机运行代码.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json <span class=\"_\">-d</span> start</div></pre></td></tr></table></figure>\n<p>ubuntu15.04后,<code>rc.local</code>无效,开始使用systemd管理开机启动,可通过写入服务的方式实现开机运行:</p>\n<p>注:<code>sslocal</code>初始位置为<code>/usr/local/bin/sslocal</code>.</p>\n<p>创建服务文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /lib/systemd/system/sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>内容如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Unit]</div><div class=\"line\">Description=Shadowsocks Client Start</div><div class=\"line\">After=network.target</div><div class=\"line\"></div><div class=\"line\">[Service]</div><div class=\"line\">Type=simple</div><div class=\"line\">User=yaro</div><div class=\"line\">ExecStart=/usr/<span class=\"built_in\">local</span>/bin/sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json</div><div class=\"line\"></div><div class=\"line\">[Install]</div><div class=\"line\">WantedBy=multi-user.target</div></pre></td></tr></table></figure>\n<p><strong>注意:</strong>地址记得用绝对地址,不要用<code>~/</code>地址.</p>\n<p>将这个文件软连接到<code>/etc/systemd/system/multi-user.target.wants/</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ln <span class=\"_\">-s</span> /lib/systemd/system/sslocal@myserver.service /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>查看软连接文件权限(需要可执行):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls <span class=\"_\">-l</span> /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>重启电脑,OK! 访问google,或通过如下命令查看服务运行状态(查找问题)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl status sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>局部代理/全局代理设置同上.</p>\n<p><a href=\"https://www.linuxbabe.com/desktop-linux/how-to-install-and-use-shadowsocks-command-line-client\" target=\"_blank\" rel=\"external\">参考1</a>-ubuntu安装SS<br><a href=\"http://www.linuxidc.com/Linux/2016-04/129727.htm\" target=\"_blank\" rel=\"external\">参考2</a>-Ubuntu systemd添加开机启动</p>\n<h4 id=\"proxychains\"><a href=\"#proxychains\" class=\"headerlink\" title=\"proxychains\"></a>proxychains</h4><p>proxychains支持http/https/socks4/socks5代理方式之间的切换.</p>\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install proxychains</div></pre></td></tr></table></figure>\n<p>配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/proxychains.conf</div><div class=\"line\"><span class=\"comment\">#将socks4 127.0.0.1 9095改为socks5  127.0.0.1 1080</span></div></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget google.com   <span class=\"comment\">#直接连google</span></div><div class=\"line\">proxychains wget google.com <span class=\"comment\">#通过sock5代理链接google</span></div><div class=\"line\">sudo proxychains wget google.com <span class=\"comment\">#注意proxy要紧挨这功能命令</span></div><div class=\"line\">sudo proxychains apt install typora <span class=\"comment\">#前提要能访问typora的资源站(先FQ)</span></div></pre></td></tr></table></figure>\n<p>其他说明</p>\n<p>proxychains配置文件中可以设置三种代理方式:动态代理(依次选择设定的代理方式,有一个可用即可),严格代理(依次选择,但是必须都能用),随机代理(随机选择设定的代理方式)</p>\n<p>类似软件:proxychains是只适用于linux/iOS系统,类似的还有polipo(让所有的程序全部走socks5代理),windows平台可以考虑privoxy.</p>\n<h3 id=\"卸载不常用软件\"><a href=\"#卸载不常用软件\" class=\"headerlink\" title=\"卸载不常用软件\"></a>卸载不常用软件</h3><p>卸载libreoffice</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get purge libreoffice-common</div></pre></td></tr></table></figure>\n<p>删除amazon链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt purge unity-webapps-common</div></pre></td></tr></table></figure>\n<p>删除不用的软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get purge thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install onboard deja-dup</div><div class=\"line\"><span class=\"comment\">#上述软件以此是:邮件客户端 多媒体播放 音乐mp3播放 IM通讯 刻录光盘 扫描软件 麻将(gnome-mahjongg) 纸牌(aisleriot) 扫雷(gnome-mines) 象棋 bt下载软件 屏幕阅读器(gnome-orca) 自带浏览器 数字游戏 远程桌面 虚拟键盘(onboard) 备份软件</span></div></pre></td></tr></table></figure>\n<h3 id=\"安装常用软件\"><a href=\"#安装常用软件\" class=\"headerlink\" title=\"安装常用软件\"></a>安装常用软件</h3><p><strong>常用软件:</strong>sogou输入法/typora(可以用sublime插件实现MD)/坚果云/网易云音乐/sublime，以及源自带的vim(记得安装<code>vim-gnome</code>)/goldendict,终端工具zsh/oh-my-zsh(<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">参考官网</a>).</p>\n<p><strong>安装方法</strong></p>\n<ul>\n<li><p>源自带的软件 <code>sudo apt-get install filename</code> 若是不知道软件名称，可以如下查看 <code>sudo dpkg -l *filename*</code>（<code>*</code>)为通配符</p>\n</li>\n<li><p>第三方软件 下载<code>.deb</code>格式安装包，如下安装 <code>sudo dpkg -i filename</code></p>\n</li>\n</ul>\n<p>备注1:Goldendict的配置及字典可以<a href=\"https://blog.yuanbin.me/posts/2013/01/goldendictxia-san-da-you-zhi-ci-ku-shi-yong-xiao-ji.html\" target=\"_blank\" rel=\"external\">参考网站</a><br>备注2:sublime无法输入中文可以<a href=\"https://github.com/lyfeyaj/sublime-text-imfix\" target=\"_blank\" rel=\"external\">参考网站1</a>和<a href=\"http://www.jianshu.com/p/bf05fb3a4709\" target=\"_blank\" rel=\"external\">参考网站2</a><br>备注3:sublime字体设置,打开<code>sublime</code>的<code>Preference-setting</code>在其中加入如下代码<br><code>{font_face&quot;: &quot;Droid Sans Fallback&quot;, &quot;font_size&quot;: 14}</code> 备注:查看中文字体名称可以输入<code>fc-list :lang=zh-cn</code></p>\n<p>###设置开机启动常用项</p>\n<p>需要开机启动的项目如搜狗输入法（依托于fcitx，启动fcitx）/SS/坚果云等</p>\n<p>将相关程序复制到用户自定义的开机项即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo cp /usr/share/applications/fcitx.desktop ~/.config/autostart/fcitx.desktop</div></pre></td></tr></table></figure>\n<p>增加可执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod +x ~/.config/autostart/fctix.desktop</div></pre></td></tr></table></figure>\n<h3 id=\"设置-下文件名为英文\"><a href=\"#设置-下文件名为英文\" class=\"headerlink\" title=\"设置~/下文件名为英文\"></a>设置<code>~/</code>下文件名为英文</h3><p>在安装是若选择中文安装，文件夹全部为中文，如<code>下载</code>/<code>音乐</code>等，这在终端中很不方便输入。</p>\n<p>依次运行如下命令 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> LANG=en_US</div><div class=\"line\">xdg-user-dirs-gtk-update</div><div class=\"line\"><span class=\"built_in\">export</span> LANG=zh_CN</div></pre></td></tr></table></figure>\n<p>或者是通过设置-语言支持-设置英文，再重启/注销。</p>\n<h3 id=\"卸载系统内置软件\"><a href=\"#卸载系统内置软件\" class=\"headerlink\" title=\"卸载系统内置软件\"></a>卸载系统内置软件</h3><p>不需要的软件：firefox/libreoffic*/系统自带浏览器/邮件客户端/gedit等</p>\n<p>倘若不清楚软件的名称,可以 <code>sudo dpkg -l libreoffice*</code></p>\n<p>或者,利用<code>tab</code>自动补全功能 <code>sudo apt purge libreoffice</code> 然后按<code>两次Tab</code>即可.</p>\n<h3 id=\"安装思源字体\"><a href=\"#安装思源字体\" class=\"headerlink\" title=\"安装思源字体\"></a>安装思源字体</h3><p>思源字体可以<a href=\"https://github.com/adobe-fonts/source-han-sans/tree/release\" target=\"_blank\" rel=\"external\">点击此处</a>下载</p>\n<p>将<code>思源字体</code>安装包放入<code>~/.fonts</code>重启即可.双击安装的话会安装在系统文件夹.</p>\n<p>话说系统自带的字体<code>Droid Sans Fallback</code>也挺好O(∩_∩)O哈哈~</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><h3 id=\"Ubuntu出现了内部错误\"><a href=\"#Ubuntu出现了内部错误\" class=\"headerlink\" title=\"Ubuntu出现了内部错误\"></a>Ubuntu出现了内部错误</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get remove apport</div></pre></td></tr></table></figure>\n<h3 id=\"Ubuntu-root-和user切换\"><a href=\"#Ubuntu-root-和user切换\" class=\"headerlink\" title=\"Ubuntu root 和user切换\"></a>Ubuntu root 和user切换</h3><p><a href=\"http://www.cnblogs.com/weiweiqiao99/archive/2010/11/10/1873761.html\" target=\"_blank\" rel=\"external\">参考网站1</a></p>\n<p><strong>从user切换到root用户</strong></p>\n<p>ubuntu默认登录user,可以用<code>sudo</code>临时授权使用root权限;此时可以使用<code>sudo su</code>切换到root用户</p>\n<p>注意:默认的ubuntu的root用户没有固定密码,是动态随机变动的,直接使用<code>su</code>是不可以的,因为我们不知道root的密码.</p>\n<p><strong>从root用户切回user用户</strong></p>\n<p>使用<code>su yaro</code>即可,或输入<code>exit</code>,也可以<code>ctrl+D</code>快捷键.</p>\n<p><strong>给root设定一个密码</strong></p>\n<p>默认root用户无固定密码,且被锁定,可以通过<code>sudo passwd root</code>设定密码.</p>\n<p><strong>禁用/启用root登录</strong></p>\n<p>禁用:<code>sudo passwd -l root</code>(禁用而已,密码还在);</p>\n<p>启用:<code>sudo passwd -u root</code> .</p>\n<h2 id=\"Ubuntu-unity桌面快捷键\"><a href=\"#Ubuntu-unity桌面快捷键\" class=\"headerlink\" title=\"Ubuntu unity桌面快捷键\"></a>Ubuntu unity桌面快捷键</h2><p>注：在普通 PC 上，Super 键通常就是 Win 键， Numpad 表示数字小键盘。</p>\n<h3 id=\"Launcher-启动器\"><a href=\"#Launcher-启动器\" class=\"headerlink\" title=\"Launcher (启动器)\"></a>Launcher (启动器)</h3><p><code>Super</code>（按住）- 调用启动器。<code>Super-1</code> 或 <code>2</code>或 <code>3</code>直至<code>0</code>- 打开或聚焦到应用程序。<code>Super-T</code>- 打开垃圾箱。<code>Alt-F1</code>- 把键盘聚焦在启动器上.<code>Alt-F2</code>- 以“特殊模式”调用托盘，用来运行命令。<code>Ctrl-Alt-T</code> - 启动终端窗口。</p>\n<h3 id=\"Dash-托盘）\"><a href=\"#Dash-托盘）\" class=\"headerlink\" title=\"Dash (托盘）\"></a>Dash (托盘）</h3><p><code>Super</code>(敲击) - 敲击打开托盘。<code>Super-A</code>- 打开应用程序托盘。<code>Super-F</code> - 打开文件及文件夹托盘。</p>\n<h3 id=\"Panel-面板）\"><a href=\"#Panel-面板）\" class=\"headerlink\" title=\"Panel (面板）\"></a>Panel (面板）</h3><p>F10 - 打开面板上的第一个菜单。<code>Window Management</code> （窗口管理）<code>Super-?</code> - 扩展模式，缩小所有窗口到所有工作区。<code>Super-D</code> -最小化所有窗口; 再次使用该快捷键的话恢复所有窗口。（不起作用时，可以尝试再按住<code>Ctrl</code> ）</p>\n<h3 id=\"Window-Placement-（窗口放置）\"><a href=\"#Window-Placement-（窗口放置）\" class=\"headerlink\" title=\"Window Placement （窗口放置）\"></a>Window Placement （窗口放置）</h3><p>假如你反复点击某个组合键，Unity 会循环改变窗口宽度，例如 <code>Ctrl-Alt-numpad 5</code>:<code>Ctrl-Alt-Numpad 7</code> - 放置窗口到屏幕左上角。<code>Ctrl-Alt-Numpad 8</code> - 放置窗口到屏幕上半部分。<code>Ctrl-Alt-Numpad 9</code> - 放置窗口到屏幕右上角。<code>Ctrl-Alt-Numpad 4</code> - 放置窗口到屏幕左侧。<code>Ctrl-Alt-Numpad 5</code> - 在屏幕中间位置居中/最大化窗口。<code>Ctrl-Alt-Numpad 6</code> - 放置窗口到屏幕右侧。<code>Ctrl-Alt-Numpad 1</code> - 放置窗口到屏幕左下角。<code>Ctrl-Alt-Numpad 2</code> - 放置窗口到屏幕下半部分。<code>Ctrl-Alt-Numpad 3</code> - 放置窗口到屏幕右下角。<code>Ctrl-Alt-Numpad 0</code> - 最大化窗口。</p>\n<h3 id=\"Workspace-Management-（工作区管理）\"><a href=\"#Workspace-Management-（工作区管理）\" class=\"headerlink\" title=\"Workspace Management （工作区管理）\"></a>Workspace Management （工作区管理）</h3><p><code>Super-W</code> - 平铺模式列出所有窗口<code>Super-S</code> - 浏览模式，缩小所有工作区，让你管理窗口。<code>Ctrl-Alt-← / → / ↑ / ↓</code> - 切换工作区。<code>Ctrl-Alt-Shift-← / → / ↑ / ↓</code> - 放置窗口到新工作区。</p>\n<h3 id=\"Mouse-Tricks-（鼠标技巧）\"><a href=\"#Mouse-Tricks-（鼠标技巧）\" class=\"headerlink\" title=\"Mouse Tricks （鼠标技巧）\"></a>Mouse Tricks （鼠标技巧）</h3><p>最大化 - 拖动窗口到顶部面板就会最大化该窗口。最大化按钮上中击 - 垂直最大化窗口。最大化按钮上右击 - 水平最大化窗口。平铺 - 拖动窗口到左边/右边边缘，会自动在屏幕的一边平铺窗口。恢复 - 在顶部面板会把最大化的窗口的标题栏往下托会自动还原到原始大小。在应用程序的启动器图标上中击 - 如果之前已打开过此程序，此操作会为该程序再打开一个新的独立进程。在顶部面板上中击（不是菜单）- 把当前窗口放置到所有窗口的最后面。</p>\n","excerpt":"<p>老婆的笔记本有两个显卡,安装win10的时候总是自动更新显卡;但是同时安装两个显卡,重启之后立马黑屏,蛋好疼…没办法,只能试试linux系统了,网上参考了下,Ubuntu算是比较容易入门的了,于是乎就折腾了好几天.现在用着感觉还不错的说,嘿嘿^_^..本文主要是个人操作过程的记录,其中对于新手来说还是有很多坑的,亲们可以参考下.</p>\n<h2 id=\"安装Ubuntu\"><a href=\"#安装Ubuntu\" class=\"headerlink\" title=\"安装Ubuntu\"></a>安装Ubuntu</h2><p>Ubuntu<a href=\"http://cn.ubuntu.com/download/\">官网下载</a>镜像文件，可直接拖动链接到迅雷下载；</p>\n<p>制作启动U盘：一定使用要<strong>使用最新版</strong>的<strong><a href=\"http://cn.ezbsystems.com/ultraiso/\">UltraISO 软碟通</a></strong>,否则可能出现错误，原因参考<a href=\"http://www.ubuntukylin.com/news/shownews.php?lang=cn&amp;id=362\">U盘刻录无法启动原因</a>；</p>\n<p>设置电脑BIOS（F2进入）通过U盘启动，倘若无法启动，可尝试开启UEFI；</p>\n<p>安装Ubuntu.</p>\n<h2 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h2><p>系统分区和数据分区 系统分区包括<code>/</code>和<code>swap</code> 数据分区包括<code>/home</code>和<code>其他数据</code></p>\n<p>分区建议</p>\n<p>根分区/（系统主要文件）大小建议50G，swap交换分区大小参考物理内存,数据/home分区500G，剩下空间分两个区不挂载</p>\n<p>实际分区情况：<code>/</code>40G，<code>swap</code>4g，<code>其他</code>全部给<code>home</code>分区。</p>","more":"<h2 id=\"配置及安装软件\"><a href=\"#配置及安装软件\" class=\"headerlink\" title=\"配置及安装软件\"></a>配置及安装软件</h2><h3 id=\"解决桌面闪屏问题\"><a href=\"#解决桌面闪屏问题\" class=\"headerlink\" title=\"解决桌面闪屏问题\"></a>解决桌面闪屏问题</h3><p>倘若鼠标不间断闪动，鼠标可以移动到桌面右边界之外，可如下解决：<code>设置</code>-<code>显示</code>-<code>关闭unkwon display</code>即可。</p>\n<h3 id=\"ubuntu安装软件的常见方式\"><a href=\"#ubuntu安装软件的常见方式\" class=\"headerlink\" title=\"ubuntu安装软件的常见方式\"></a>ubuntu安装软件的常见方式</h3><p>软件安装参考<a href=\"http://www.cnblogs.com/dubaokun/p/3558848.html\">这个网页</a>.</p>\n<p><strong>直接通过<code>apt-get</code>安装</strong></p>\n<p>有些软件都是包含在相应的库中,通过添加库,便可以直接安装.这种方法安装的程序版本可能不是最新版(比如<code>node.js</code>).</p>\n<p><strong>下载<code>.deb</code>安装包手动安装</strong></p>\n<p>通过手动或<code>wget</code>等命令下载安装包,调用<code>dpkg -i package</code>安装</p>\n<p><strong>直接下载二进制文件解压即可用</strong></p>\n<ul>\n<li><p>下载二进制文件(Binaries)</p>\n</li>\n<li><p>下载后将安装包移动到要安装到的文件夹下，根据个人喜好设置即可,这里我放在了<code>/home/kun/mysofltware/</code>下面</p>\n</li>\n<li><p>解压到当前文件夹下运行 </p>\n</li>\n<li><p>进入 解压后的目录bin目录下，执行ls会看到两个文件<code>node</code>,<code>npm</code>. 然后执行<code>./node -v</code>，如果显示出 版本号说明我们下载的程序包是没有问题的(这里以<code>node.js</code>的安装为例)</p>\n</li>\n<li><p>添加到PATH实现任意目录访问</p>\n<blockquote>\n<p>因为 <code>/home/kun/mysofltware/node-v0.10.26-linux-x64/bin</code>这个目录是不在环境变量中的，所以只能到该目录下才能node的程序。如果在其他的目录下执行node命令的话 ，必须通过绝对路径访问才可以的.<br>如果要在任意目录可以访问的话，需要将node 所在的目录，添加<code>PATH环境变量</code>里面，或者通过软连接的形式将<code>node</code>和<code>npm</code>链接到系统默认的<code>PATH目录</code>下的一个，以下分别介绍:</p>\n</blockquote>\n<ul>\n<li><p>软连接方式</p>\n<p>  在终端执行<code>echo $PATH</code>可以获取<code>PATH变量</code>包含的内容，系统默认的<code>PATH环境变量</code>包括<code>/usr/local/bin</code>:<code>/usr/bin</code>:<code>/bin</code>:<code>/usr/local/sbin</code>:<code>/usr/sbin</code>:<code>/sbin</code>:，冒号为分隔符。所以我们可以将<code>node</code>和<code>npm</code>链接到<code>/usr/local/bin</code>目录执行如下命令  </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln <span class=\"_\">-s</span> /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/node /usr/<span class=\"built_in\">local</span>/bin/node</div><div class=\"line\">ln <span class=\"_\">-s</span> /home/kun/mysofltware/node-v0.10.26-linux-x64/bin/npm /usr/<span class=\"built_in\">local</span>/bin/npm</div></pre></td></tr></table></figure>\n<p>  通过如此，就可以访问Node了，同时node部署也已经完毕。</p>\n</li>\n<li><p>环境变量配置</p>\n<p>  在node目录下执行pwd 获取node所在的目录，要把这个目录添加到PATH环境变量<br>  执行su 输入密码切换到root用户。通过命令打开<code>vi /etc/profile</code>profile文件,添加如下代码:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PATH=<span class=\"variable\">$PATH</span>:/home/kun/mysofltware/node-v0.10.26-linux-x64/bin</div></pre></td></tr></table></figure>\n<p>  执行命令<code>source/etc/profile</code>可以使变量生效，然后执行<code>echo $PATH</code>，看看输出内容是否包含自己添加的内容<br>  然后到任意目录下去执行一次执行<code>node -v</code>,<code>npm -v</code>,尝试是否OK? </p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>下载源码,手动编译二进制</strong></p>\n<ul>\n<li><p>安装编译环境,安装依赖</p>\n</li>\n<li><p>进入<code>cd</code>源码路径,执行里面的<code>configure文件</code>,即<code>./configure --prefix=/</code>生成二进制文件路径.</p>\n<blockquote>\n<p><strong>命令解释:</strong><code>--prefix=/</code>用于指定安装路径,<br>  若不指定prefix，则可执行文件默认放在<code>/usr /local/bin</code>，库文件默认放在<code>/usr/local/lib</code>，配置文件默认放在<code>/usr/local/etc</code>,其它的资源文件放在<code>/usr /local/share</code>。你要卸载这个程序，要么在原来的make目录下用一次<code>make uninstall</code>（前提是make文件指定过uninstall）,要么去上述目录里面把相关的文件一个个手工删掉。<br>  若指定prefix，直接删掉一个文件夹就够了。</p>\n</blockquote>\n</li>\n<li><p>运行<code>make</code>命令，这个是编译过程，运行的时间可能稍长一些</p>\n</li>\n<li><p>执行<code>install</code>命令。如果在第第一步骤中配置的程序安装路径不在系统的环境量PATH中，需要自己添加（下面会介绍在centos下修改环境变量）</p>\n</li>\n<li><p>关于源码的编译也可以参考<a href=\"http://blog.csdn.net/zhaoweitco/article/details/12677089\">这篇博客</a>.</p>\n</li>\n</ul>\n<h3 id=\"安装chrome\"><a href=\"#安装chrome\" class=\"headerlink\" title=\"安装chrome\"></a>安装chrome</h3><p>直接访问<a href=\"https://www.google.com/chrome/browser/desktop/index.html\">官网</a>下载Linux版本</p>\n<p>可先尝试运行如下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</div><div class=\"line\">sudo dpkg -i google-chrome-stable_current_amd64.deb</div></pre></td></tr></table></figure>\n<p>若出现错误，根据提示输入如下代码安装依赖包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install <span class=\"_\">-f</span></div></pre></td></tr></table></figure>\n<p>注意：若重启电脑后，chrome等软件提示：<code>账号登录信息已过期，需重新登录</code>，这是ubuntu的<code>密钥环</code>导致的；<code>bash</code>启动<code>密码和秘钥</code>，在<code>密码-登录</code>右键-<code>修改密码</code>，新密码置空即可。</p>\n<h3 id=\"安装SS\"><a href=\"#安装SS\" class=\"headerlink\" title=\"安装SS\"></a>安装SS</h3><p>实时教程可以在<code>简书</code>或<code>必应</code>中搜索</p>\n<h4 id=\"SS-qt5-GUI\"><a href=\"#SS-qt5-GUI\" class=\"headerlink\" title=\"SS-qt5(GUI)\"></a>SS-qt5(GUI)</h4><p>建议不使用GUI版本,推荐命令行后台运行</p>\n<p><strong>安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:hzwhuang/ss-qt5  <span class=\"comment\">#加入源</span></div><div class=\"line\">sudo apt-get update <span class=\"comment\">#更新源</span></div><div class=\"line\">sudo apt-get install shadowsocks-qt5 <span class=\"comment\">#安装SS</span></div></pre></td></tr></table></figure>\n<p><strong>参数设置</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"attr\">\"server\"</span>:<span class=\"string\">\"104.128.87.111\"</span>,</div><div class=\"line\"><span class=\"attr\">\"server_port\"</span>:<span class=\"number\">443</span>,</div><div class=\"line\"><span class=\"attr\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\"><span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\"><span class=\"attr\">\"password\"</span>:<span class=\"string\">\"Mjg5NTIzMz\"</span>,</div><div class=\"line\"><span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</div><div class=\"line\"><span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以访问搬瓦工<a href=\"http://banwagong.cn/\">国内镜像</a>查看最新SS相关配置参数。另外,服务器端重新安装系统难道SS会更快?有待证实.</p>\n<p><strong>全局代理</strong>设置：<code>System Setting &gt; Network &gt; Network proxy &gt; Method &gt; ManualSocket Host 127.0.0.1 1080</code>。 备注：这样chrome就可以FQ了，但是firefox还需要进一步设置（此处略）。</p>\n<p><strong>PAC代理</strong></p>\n<ul>\n<li>安装<code>genpac</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install genpac</div></pre></td></tr></table></figure>\n<p>倘若提示没有<code>pip</code>命令，可以尝试输入<code>pip --help</code>，其他命令遇到类似情况同理。</p>\n<p>生成autoproxy.pac文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">genpac -p <span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> --gfwlist-proxy=<span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=<span class=\"string\">\"autoproxy.pac\"</span></div></pre></td></tr></table></figure>\n<p>更改系统代理设置 <code>System settings &gt; Network &gt; Network ProxyMethod &gt; AutomaticConfiguration URL 是 autoproxy.pac文件的路径，设置为/home/yaro/autoproxy.pac</code></p>\n<h4 id=\"SS或者SS-libev\"><a href=\"#SS或者SS-libev\" class=\"headerlink\" title=\"SS或者SS-libev\"></a>SS或者SS-libev</h4><p>执行以下命令安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install shadowsocks</div></pre></td></tr></table></figure>\n<p>上述命令会同时安装<code>sslocal</code>和<code>ssserver</code>两个程序,客户端用前者,服务器用后者.</p>\n<p>可以用<code>whereis</code>(查找程序命令)查找<code>sslocal</code>位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">whereis sslocal</div><div class=\"line\"><span class=\"comment\">#默认返回如下:</span></div><div class=\"line\">sslocal: /usr/<span class=\"built_in\">local</span>/bin/sslocal</div></pre></td></tr></table></figure>\n<p>创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /home/yaro/.yaro/shadowsocks/shadowsocks.json   <span class=\"comment\">##创建.json文件,任意目录,内容如下:</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; </div><div class=\"line\">\"server\":\"104.128.87.111\", </div><div class=\"line\">\"server_port\":443, </div><div class=\"line\">\"local_address\": \"127.0.0.1\", </div><div class=\"line\">\"local_port\":1080,</div><div class=\"line\">\"password\":\"Mjg5NTIzMz\", </div><div class=\"line\">\"timeout\":600, \"</div><div class=\"line\">method\":\"aes-256-cfb\" </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>启动客户端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sslocal -c  /home/yaro/.yaro/shadowsocks/shadowsocks.json <span class=\"comment\">#在终端运行,不能停止不能关闭</span></div><div class=\"line\">sudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json <span class=\"_\">-d</span> start <span class=\"comment\">#后台运行</span></div><div class=\"line\"><span class=\"comment\">#其他参数可以`sslocal --help`.</span></div></pre></td></tr></table></figure>\n<p>开机启动</p>\n<p>早期的ubuntu版本可以通过写入<code>rc.local</code>的方式实现开机运行代码.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json <span class=\"_\">-d</span> start</div></pre></td></tr></table></figure>\n<p>ubuntu15.04后,<code>rc.local</code>无效,开始使用systemd管理开机启动,可通过写入服务的方式实现开机运行:</p>\n<p>注:<code>sslocal</code>初始位置为<code>/usr/local/bin/sslocal</code>.</p>\n<p>创建服务文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /lib/systemd/system/sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>内容如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Unit]</div><div class=\"line\">Description=Shadowsocks Client Start</div><div class=\"line\">After=network.target</div><div class=\"line\"></div><div class=\"line\">[Service]</div><div class=\"line\">Type=simple</div><div class=\"line\">User=yaro</div><div class=\"line\">ExecStart=/usr/<span class=\"built_in\">local</span>/bin/sslocal -c /home/yaro/.yaro/shadowsocks/shadowsocks.json</div><div class=\"line\"></div><div class=\"line\">[Install]</div><div class=\"line\">WantedBy=multi-user.target</div></pre></td></tr></table></figure>\n<p><strong>注意:</strong>地址记得用绝对地址,不要用<code>~/</code>地址.</p>\n<p>将这个文件软连接到<code>/etc/systemd/system/multi-user.target.wants/</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ln <span class=\"_\">-s</span> /lib/systemd/system/sslocal@myserver.service /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>查看软连接文件权限(需要可执行):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls <span class=\"_\">-l</span> /etc/systemd/system/multi-user.target.wants/sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>重启电脑,OK! 访问google,或通过如下命令查看服务运行状态(查找问题)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl status sslocal@myserver.service</div></pre></td></tr></table></figure>\n<p>局部代理/全局代理设置同上.</p>\n<p><a href=\"https://www.linuxbabe.com/desktop-linux/how-to-install-and-use-shadowsocks-command-line-client\">参考1</a>-ubuntu安装SS<br><a href=\"http://www.linuxidc.com/Linux/2016-04/129727.htm\">参考2</a>-Ubuntu systemd添加开机启动</p>\n<h4 id=\"proxychains\"><a href=\"#proxychains\" class=\"headerlink\" title=\"proxychains\"></a>proxychains</h4><p>proxychains支持http/https/socks4/socks5代理方式之间的切换.</p>\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install proxychains</div></pre></td></tr></table></figure>\n<p>配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/proxychains.conf</div><div class=\"line\"><span class=\"comment\">#将socks4 127.0.0.1 9095改为socks5  127.0.0.1 1080</span></div></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget google.com   <span class=\"comment\">#直接连google</span></div><div class=\"line\">proxychains wget google.com <span class=\"comment\">#通过sock5代理链接google</span></div><div class=\"line\">sudo proxychains wget google.com <span class=\"comment\">#注意proxy要紧挨这功能命令</span></div><div class=\"line\">sudo proxychains apt install typora <span class=\"comment\">#前提要能访问typora的资源站(先FQ)</span></div></pre></td></tr></table></figure>\n<p>其他说明</p>\n<p>proxychains配置文件中可以设置三种代理方式:动态代理(依次选择设定的代理方式,有一个可用即可),严格代理(依次选择,但是必须都能用),随机代理(随机选择设定的代理方式)</p>\n<p>类似软件:proxychains是只适用于linux/iOS系统,类似的还有polipo(让所有的程序全部走socks5代理),windows平台可以考虑privoxy.</p>\n<h3 id=\"卸载不常用软件\"><a href=\"#卸载不常用软件\" class=\"headerlink\" title=\"卸载不常用软件\"></a>卸载不常用软件</h3><p>卸载libreoffice</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get purge libreoffice-common</div></pre></td></tr></table></figure>\n<p>删除amazon链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt purge unity-webapps-common</div></pre></td></tr></table></figure>\n<p>删除不用的软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get purge thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install onboard deja-dup</div><div class=\"line\"><span class=\"comment\">#上述软件以此是:邮件客户端 多媒体播放 音乐mp3播放 IM通讯 刻录光盘 扫描软件 麻将(gnome-mahjongg) 纸牌(aisleriot) 扫雷(gnome-mines) 象棋 bt下载软件 屏幕阅读器(gnome-orca) 自带浏览器 数字游戏 远程桌面 虚拟键盘(onboard) 备份软件</span></div></pre></td></tr></table></figure>\n<h3 id=\"安装常用软件\"><a href=\"#安装常用软件\" class=\"headerlink\" title=\"安装常用软件\"></a>安装常用软件</h3><p><strong>常用软件:</strong>sogou输入法/typora(可以用sublime插件实现MD)/坚果云/网易云音乐/sublime，以及源自带的vim(记得安装<code>vim-gnome</code>)/goldendict,终端工具zsh/oh-my-zsh(<a href=\"https://github.com/robbyrussell/oh-my-zsh\">参考官网</a>).</p>\n<p><strong>安装方法</strong></p>\n<ul>\n<li><p>源自带的软件 <code>sudo apt-get install filename</code> 若是不知道软件名称，可以如下查看 <code>sudo dpkg -l *filename*</code>（<code>*</code>)为通配符</p>\n</li>\n<li><p>第三方软件 下载<code>.deb</code>格式安装包，如下安装 <code>sudo dpkg -i filename</code></p>\n</li>\n</ul>\n<p>备注1:Goldendict的配置及字典可以<a href=\"https://blog.yuanbin.me/posts/2013/01/goldendictxia-san-da-you-zhi-ci-ku-shi-yong-xiao-ji.html\">参考网站</a><br>备注2:sublime无法输入中文可以<a href=\"https://github.com/lyfeyaj/sublime-text-imfix\">参考网站1</a>和<a href=\"http://www.jianshu.com/p/bf05fb3a4709\">参考网站2</a><br>备注3:sublime字体设置,打开<code>sublime</code>的<code>Preference-setting</code>在其中加入如下代码<br><code>{font_face&quot;: &quot;Droid Sans Fallback&quot;, &quot;font_size&quot;: 14}</code> 备注:查看中文字体名称可以输入<code>fc-list :lang=zh-cn</code></p>\n<p>###设置开机启动常用项</p>\n<p>需要开机启动的项目如搜狗输入法（依托于fcitx，启动fcitx）/SS/坚果云等</p>\n<p>将相关程序复制到用户自定义的开机项即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo cp /usr/share/applications/fcitx.desktop ~/.config/autostart/fcitx.desktop</div></pre></td></tr></table></figure>\n<p>增加可执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod +x ~/.config/autostart/fctix.desktop</div></pre></td></tr></table></figure>\n<h3 id=\"设置-下文件名为英文\"><a href=\"#设置-下文件名为英文\" class=\"headerlink\" title=\"设置~/下文件名为英文\"></a>设置<code>~/</code>下文件名为英文</h3><p>在安装是若选择中文安装，文件夹全部为中文，如<code>下载</code>/<code>音乐</code>等，这在终端中很不方便输入。</p>\n<p>依次运行如下命令 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> LANG=en_US</div><div class=\"line\">xdg-user-dirs-gtk-update</div><div class=\"line\"><span class=\"built_in\">export</span> LANG=zh_CN</div></pre></td></tr></table></figure>\n<p>或者是通过设置-语言支持-设置英文，再重启/注销。</p>\n<h3 id=\"卸载系统内置软件\"><a href=\"#卸载系统内置软件\" class=\"headerlink\" title=\"卸载系统内置软件\"></a>卸载系统内置软件</h3><p>不需要的软件：firefox/libreoffic*/系统自带浏览器/邮件客户端/gedit等</p>\n<p>倘若不清楚软件的名称,可以 <code>sudo dpkg -l libreoffice*</code></p>\n<p>或者,利用<code>tab</code>自动补全功能 <code>sudo apt purge libreoffice</code> 然后按<code>两次Tab</code>即可.</p>\n<h3 id=\"安装思源字体\"><a href=\"#安装思源字体\" class=\"headerlink\" title=\"安装思源字体\"></a>安装思源字体</h3><p>思源字体可以<a href=\"https://github.com/adobe-fonts/source-han-sans/tree/release\">点击此处</a>下载</p>\n<p>将<code>思源字体</code>安装包放入<code>~/.fonts</code>重启即可.双击安装的话会安装在系统文件夹.</p>\n<p>话说系统自带的字体<code>Droid Sans Fallback</code>也挺好O(∩_∩)O哈哈~</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><h3 id=\"Ubuntu出现了内部错误\"><a href=\"#Ubuntu出现了内部错误\" class=\"headerlink\" title=\"Ubuntu出现了内部错误\"></a>Ubuntu出现了内部错误</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get remove apport</div></pre></td></tr></table></figure>\n<h3 id=\"Ubuntu-root-和user切换\"><a href=\"#Ubuntu-root-和user切换\" class=\"headerlink\" title=\"Ubuntu root 和user切换\"></a>Ubuntu root 和user切换</h3><p><a href=\"http://www.cnblogs.com/weiweiqiao99/archive/2010/11/10/1873761.html\">参考网站1</a></p>\n<p><strong>从user切换到root用户</strong></p>\n<p>ubuntu默认登录user,可以用<code>sudo</code>临时授权使用root权限;此时可以使用<code>sudo su</code>切换到root用户</p>\n<p>注意:默认的ubuntu的root用户没有固定密码,是动态随机变动的,直接使用<code>su</code>是不可以的,因为我们不知道root的密码.</p>\n<p><strong>从root用户切回user用户</strong></p>\n<p>使用<code>su yaro</code>即可,或输入<code>exit</code>,也可以<code>ctrl+D</code>快捷键.</p>\n<p><strong>给root设定一个密码</strong></p>\n<p>默认root用户无固定密码,且被锁定,可以通过<code>sudo passwd root</code>设定密码.</p>\n<p><strong>禁用/启用root登录</strong></p>\n<p>禁用:<code>sudo passwd -l root</code>(禁用而已,密码还在);</p>\n<p>启用:<code>sudo passwd -u root</code> .</p>\n<h2 id=\"Ubuntu-unity桌面快捷键\"><a href=\"#Ubuntu-unity桌面快捷键\" class=\"headerlink\" title=\"Ubuntu unity桌面快捷键\"></a>Ubuntu unity桌面快捷键</h2><p>注：在普通 PC 上，Super 键通常就是 Win 键， Numpad 表示数字小键盘。</p>\n<h3 id=\"Launcher-启动器\"><a href=\"#Launcher-启动器\" class=\"headerlink\" title=\"Launcher (启动器)\"></a>Launcher (启动器)</h3><p><code>Super</code>（按住）- 调用启动器。<code>Super-1</code> 或 <code>2</code>或 <code>3</code>直至<code>0</code>- 打开或聚焦到应用程序。<code>Super-T</code>- 打开垃圾箱。<code>Alt-F1</code>- 把键盘聚焦在启动器上.<code>Alt-F2</code>- 以“特殊模式”调用托盘，用来运行命令。<code>Ctrl-Alt-T</code> - 启动终端窗口。</p>\n<h3 id=\"Dash-托盘）\"><a href=\"#Dash-托盘）\" class=\"headerlink\" title=\"Dash (托盘）\"></a>Dash (托盘）</h3><p><code>Super</code>(敲击) - 敲击打开托盘。<code>Super-A</code>- 打开应用程序托盘。<code>Super-F</code> - 打开文件及文件夹托盘。</p>\n<h3 id=\"Panel-面板）\"><a href=\"#Panel-面板）\" class=\"headerlink\" title=\"Panel (面板）\"></a>Panel (面板）</h3><p>F10 - 打开面板上的第一个菜单。<code>Window Management</code> （窗口管理）<code>Super-?</code> - 扩展模式，缩小所有窗口到所有工作区。<code>Super-D</code> -最小化所有窗口; 再次使用该快捷键的话恢复所有窗口。（不起作用时，可以尝试再按住<code>Ctrl</code> ）</p>\n<h3 id=\"Window-Placement-（窗口放置）\"><a href=\"#Window-Placement-（窗口放置）\" class=\"headerlink\" title=\"Window Placement （窗口放置）\"></a>Window Placement （窗口放置）</h3><p>假如你反复点击某个组合键，Unity 会循环改变窗口宽度，例如 <code>Ctrl-Alt-numpad 5</code>:<code>Ctrl-Alt-Numpad 7</code> - 放置窗口到屏幕左上角。<code>Ctrl-Alt-Numpad 8</code> - 放置窗口到屏幕上半部分。<code>Ctrl-Alt-Numpad 9</code> - 放置窗口到屏幕右上角。<code>Ctrl-Alt-Numpad 4</code> - 放置窗口到屏幕左侧。<code>Ctrl-Alt-Numpad 5</code> - 在屏幕中间位置居中/最大化窗口。<code>Ctrl-Alt-Numpad 6</code> - 放置窗口到屏幕右侧。<code>Ctrl-Alt-Numpad 1</code> - 放置窗口到屏幕左下角。<code>Ctrl-Alt-Numpad 2</code> - 放置窗口到屏幕下半部分。<code>Ctrl-Alt-Numpad 3</code> - 放置窗口到屏幕右下角。<code>Ctrl-Alt-Numpad 0</code> - 最大化窗口。</p>\n<h3 id=\"Workspace-Management-（工作区管理）\"><a href=\"#Workspace-Management-（工作区管理）\" class=\"headerlink\" title=\"Workspace Management （工作区管理）\"></a>Workspace Management （工作区管理）</h3><p><code>Super-W</code> - 平铺模式列出所有窗口<code>Super-S</code> - 浏览模式，缩小所有工作区，让你管理窗口。<code>Ctrl-Alt-← / → / ↑ / ↓</code> - 切换工作区。<code>Ctrl-Alt-Shift-← / → / ↑ / ↓</code> - 放置窗口到新工作区。</p>\n<h3 id=\"Mouse-Tricks-（鼠标技巧）\"><a href=\"#Mouse-Tricks-（鼠标技巧）\" class=\"headerlink\" title=\"Mouse Tricks （鼠标技巧）\"></a>Mouse Tricks （鼠标技巧）</h3><p>最大化 - 拖动窗口到顶部面板就会最大化该窗口。最大化按钮上中击 - 垂直最大化窗口。最大化按钮上右击 - 水平最大化窗口。平铺 - 拖动窗口到左边/右边边缘，会自动在屏幕的一边平铺窗口。恢复 - 在顶部面板会把最大化的窗口的标题栏往下托会自动还原到原始大小。在应用程序的启动器图标上中击 - 如果之前已打开过此程序，此操作会为该程序再打开一个新的独立进程。在顶部面板上中击（不是菜单）- 把当前窗口放置到所有窗口的最后面。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"civs44x650000jcvp8zazwmfl","tag_id":"civs44x6i0003jcvp54g6jnoc","_id":"civs44x6s0007jcvp0yc51969"},{"post_id":"civs44x650000jcvp8zazwmfl","tag_id":"civs44x6p0005jcvpqq2ho0kr","_id":"civs44x6u0008jcvpf1dqcpkl"},{"post_id":"civs44x6d0002jcvp9xu4pe34","tag_id":"civs44x6r0006jcvpj1z63mov","_id":"civs44x6x000cjcvp788egmpb"},{"post_id":"civs44x6d0002jcvp9xu4pe34","tag_id":"civs44x6v0009jcvp79r9vc8e","_id":"civs44x6x000djcvpux22nmt5"},{"post_id":"civs44x6d0002jcvp9xu4pe34","tag_id":"civs44x6w000ajcvpjy4c22je","_id":"civs44x6y000fjcvpp8n2jogd"},{"post_id":"civs44x6l0004jcvpy2xjd3rx","tag_id":"civs44x6x000bjcvpfm72ek3u","_id":"civs44x6z000hjcvpbm5txnbn"},{"post_id":"civs44x6l0004jcvpy2xjd3rx","tag_id":"civs44x6y000ejcvputd1gwvv","_id":"civs44x70000ijcvphlxzy4l0"},{"post_id":"civs44x6l0004jcvpy2xjd3rx","tag_id":"civs44x6z000gjcvpm2h5ax0q","_id":"civs44x71000jjcvpgrzi3aut"}],"Tag":[{"name":"Git","_id":"civs44x6i0003jcvp54g6jnoc"},{"name":"Github","_id":"civs44x6p0005jcvpqq2ho0kr"},{"name":"hexo","_id":"civs44x6r0006jcvpj1z63mov"},{"name":"github page","_id":"civs44x6v0009jcvp79r9vc8e"},{"name":"搭建博客","_id":"civs44x6w000ajcvpjy4c22je"},{"name":"Ubuntu安装","_id":"civs44x6x000bjcvpfm72ek3u"},{"name":"Ubuntu快捷键","_id":"civs44x6y000ejcvputd1gwvv"},{"name":"Shandowsocks配置","_id":"civs44x6z000gjcvpm2h5ax0q"}]}}